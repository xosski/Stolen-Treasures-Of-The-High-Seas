/*!
 * SDK version: 5.8.15
 * Commit: 6f5b9a95
 */
( () => {
    "use strict";
    var __webpack_modules__ = {
        902: (e, t, i) => {
            i.r(t),
            i.d(t, {
                AbstractSearchStrategyAuto: () => Le,
                ActiveEventHandler: () => A,
                ActivityHolder: () => D,
                ActivityTracker: () => N,
                ActivityTrackerImpl: () => f,
                ActivityTrackerImplGecko: () => v,
                ActivityTrackerImplIEEdge: () => S,
                ActivityTrackerImplSafari: () => C,
                AnxVVApi: () => ft,
                AppNexusDisplayTag: () => tt,
                AppNexusRequestFormatter: () => Ze,
                AppNexusSDKMraidContainer: () => pe,
                AppNexusVideoRequestFormatter: () => et,
                AppNexusVideoTag: () => Qe,
                AppNexusVideoTriggerManager: () => lt,
                BrowserSpecificGecko: () => L,
                BrowserSpecificIE: () => V,
                BrowserSpecificWebkit: () => M,
                BrowserWindow: () => c,
                Clearing100Pv1STrigger: () => Tt,
                Clearing50Pv2STrigger: () => pt,
                ClearingEventVideoTriggerManager: () => Et,
                ClearingEventsManager: () => gt,
                ContainerImpl: () => ae,
                ContainerUtils: () => I,
                CustomTrigger: () => nt,
                CustomViewResult: () => ht,
                DOM: () => oe,
                DOMImpl: () => Z,
                DOMImplStandard: () => ee,
                DebugTools: () => l,
                DeletedTrackedObjectData: () => Je,
                ElementVisibilityCalculator: () => De,
                EventListenerWrapper: () => _,
                ExceptionManager: () => O,
                ExceptionSafeCommand: () => d,
                FocusOutEventHandler: () => y,
                FrameTools: () => R,
                FullscreenVisibilityCalculator: () => we,
                HundredPercentOneSecondTrigger: () => ct,
                HybridAppContainer: () => Ee,
                HybridAppHelper: () => Ie,
                IABTrigger: () => st,
                IABViewResult: () => mt,
                IntersectionObserverVisibilityCalculator: () => Me,
                LimitedVisibilityCalculator: () => Re,
                LoaderHelper: () => Ge,
                MetricsAggregator: () => qe,
                MicrosoftMapleContainer: () => ge,
                ModuleManager: () => p,
                MopubSDKContainer: () => he,
                MousePositionTracker: () => P,
                MraidContainerUtil: () => me,
                NativeEvent: () => Ne,
                NativeEventList: () => ve,
                NativeEventsTriggerManager: () => dt,
                NotInitializedContainer: () => le,
                NotSupportedContainer: () => ce,
                OmidVideo: () => Ct,
                OpenMeasurementSdkContainer: () => ue,
                PageShowEventHandler: () => b,
                Point: () => E,
                Position: () => re,
                PositionImpl: () => te,
                PositionImplMozilla: () => ne,
                PositionImplSafari: () => ie,
                ReferrerDetection: () => Oe,
                RequestSender: () => fe,
                SearchStrategy: () => Ve,
                SearchStrategyAutoAnchor: () => je,
                SearchStrategyCssSelector: () => He,
                SearchStrategyDomEltVar: () => Be,
                SearchStrategyLimitedOmid: () => We,
                SearchStrategyNode: () => Ue,
                SearchStrategyNodeId: () => Fe,
                SearchStrategyNodeIdChildren: () => Xe,
                SearchStrategyPrebidNative: () => ke,
                SearchStrategyVideo: () => xe,
                SessionStartOmidEvent: () => _e,
                Settings: () => h,
                SharedSession: () => g,
                SmaatoSDKNotSupportedContainer: () => de,
                Tag: () => ye,
                TagManager: () => Pe,
                TagMetricsAggregator: () => Ye,
                TagURL: () => Ce,
                Timer: () => m,
                TrackDisplay: () => X,
                TrackDisplayIE11XD: () => j,
                TrackedObject: () => ze,
                Tracking: () => bt,
                TrackingImpl: () => x,
                TrackingImplEdge: () => H,
                TrackingImplGecko40: () => B,
                TrackingImplIE11: () => W,
                TrackingImplStandard: () => k,
                TrackingImplWebkit: () => U,
                TrackingLoader: () => F,
                TrackingLoaderEdgeXD: () => K,
                TrackingLoaderGecko40XD: () => q,
                TrackingLoaderIE11XD: () => G,
                TrackingLoaderWebkitXD: () => z,
                TriggerManager: () => at,
                UtilsMisc: () => u,
                Video100Pv50PercentDurationOr15SecondsTrigger: () => ot,
                VideoAppNexusTagURL: () => Se,
                VideoIABTrigger: () => rt,
                VideoMetricsAggregator: () => Ke,
                VideoOmidEvent: () => Te,
                VideoTrackedObject: () => it,
                ViewPort: () => $e,
                ViewPortTop: () => be,
                ViewType: () => ut,
                VisibilityChangeEventHandler: () => $,
                VisibleElementSeeker: () => Ae,
                WindowHierarchy: () => w,
                XDOM: () => se,
                XDOMImpl: () => Y,
                XDOMImplIE11: () => Q,
                XDOMImplStandard: () => J,
                XTEEngine: () => $t,
                XTEImpl: () => _t,
                XTEImplAppNexusDisplay: () => St,
                XTEImplAppNexusDisplayApp: () => vt,
                XTEImplOMSDKVideo: () => At,
                XTEImplVPAIDWrapper: () => Nt,
                XdrDisplayApi: () => It,
                XdrViewApi: () => Ot,
                getParentElement: () => s,
                getUserAgent: () => T,
                hashCode: () => n,
                isJSContext: () => r
            });
            const n = e => {
                let t = 0;
                for (let i = 0; i < e.length; i++)
                    t = (t << 5) - t + e.charCodeAt(i),
                    t |= 0;
                return t
            }
              , s = e => {
                let t = e.parentNode;
                return t && 1 === t.nodeType || (t = null),
                t
            }
              , r = () => "undefined" == typeof window;
            var o, a;
            class c {
                static getWindowOuterSize(e) {
                    const t = e.outerWidth
                      , i = e.outerHeight;
                    return new E(t,i)
                }
                static initVisibilityAPI() {
                    const e = o.getWindow().document;
                    let t = null
                      , i = null;
                    void 0 !== e.hidden ? (t = "hidden",
                    i = "visibilitychange") : void 0 !== e.mozHidden ? (t = "mozHidden",
                    i = "mozvisibilitychange") : void 0 !== e.msHidden ? (t = "msHidden",
                    i = "msvisibilitychange") : void 0 !== e.webkitHidden && (t = "webkitHidden",
                    i = "webkitvisibilitychange"),
                    o.documentHiddenVarName = t,
                    o.visibilityChangeEventName = i
                }
                static getPageSize(e) {
                    const t = e.document
                      , i = t.body
                      , n = t.documentElement
                      , s = n ? n.scrollHeight : 0
                      , r = n ? n.offsetHeight : 0
                      , o = n ? n.scrollWidth : 0
                      , a = n ? n.offsetWidth : 0
                      , c = i ? i.scrollHeight : 0
                      , l = i ? i.offsetHeight : 0
                      , d = i ? i.scrollWidth : 0
                      , u = i ? i.offsetWidth : 0
                      , m = Math.max(s, r, c, l)
                      , h = Math.max(o, a, d, u);
                    return new E(Math.round(h),Math.round(m))
                }
                static getWindowScroll(e) {
                    const t = e.pageXOffset || e.document.documentElement.scrollLeft || e.document.body.scrollLeft
                      , i = e.pageYOffset || e.document.documentElement.scrollTop || e.document.body.scrollTop;
                    return new E(t,i)
                }
                static getClientSize(e) {
                    const t = e.document.documentElement.clientWidth
                      , i = e.document.documentElement.clientHeight;
                    return new E(t,i)
                }
                static getBodyElement(e) {
                    return e.document.body
                }
                static getBodyElementTagNameChecked(e) {
                    const t = this.getBodyElement(e);
                    return t && "BODY" === se.getAttribute(t, "tagName") ? t : null
                }
                static getLocation(e) {
                    return e.location.href
                }
                static getScreenWidth() {
                    return screen.width
                }
                static getScreenHeight() {
                    return screen.height
                }
                static getScreenSize() {
                    return r() ? E.minusOne : new E(this.getScreenWidth(),this.getScreenHeight())
                }
                static hasFocus(e) {
                    return !e.document.hasFocus || e.document.hasFocus()
                }
                static isHiddenWithWindow(e) {
                    return this.documentHiddenVarName && e.document[this.documentHiddenVarName]
                }
                static isHidden() {
                    return this.isHiddenWithWindow(this.getTopAccessibleWindow())
                }
                static isDisplayNoneFrame(e) {
                    try {
                        let t = e.frameElement;
                        for (; t; ) {
                            if ("none" === t.style.display)
                                return !0;
                            t = t.parent
                        }
                    } catch (e) {
                        O.notify(O.EXCEPTION_40)
                    }
                    return !1
                }
                static isCompatMode(e) {
                    return "CSS1Compat" !== e.document.compatMode
                }
                static getDocument(e) {
                    return e.document
                }
                shouldFlushOnPageHide() {
                    return !1
                }
                getSingleFlushSpecificDelay() {
                    return 0
                }
                static getScreenX() {
                    return screenX
                }
                static getScreenY() {
                    return screenY
                }
                static getWindowSize(e) {
                    const t = e.innerWidth
                      , i = e.innerHeight;
                    return new E(t,i)
                }
                static getScreenPosition() {
                    return new E(this.getScreenX(),this.getScreenY())
                }
                static getWindow() {
                    return o.getNamespace().$wnd
                }
                static getJSNaminglnt() {
                    return "_lntapp"
                }
                static getNamespace() {
                    return window[o.getJSNaminglnt()]
                }
                static getTopAccessibleWindow() {
                    return this.topAccessibleWindow
                }
                static setTopAccessibleWindow(e) {
                    this.topAccessibleWindow = e
                }
                static getVisibilityChangeEventName() {
                    return this.visibilityChangeEventName
                }
                static isAppUserAgent() {
                    const e = this.isSpotify();
                    return e && O.notify(O.EXCEPTION_1312),
                    e
                }
                static isSpotify() {
                    return -1 !== navigator.userAgent.toLowerCase().indexOf("spotify")
                }
            }
            o = c,
            r() || o.initVisibilityAPI();
            class l {
                static debug(e) {
                    l.debugNative(this.getTimeStamp(h.getCurrentTime()) + " " + e)
                }
                static debugNative(e) {
                    const t = c.getNamespace();
                    t.debug ? t.debug += "\n" : t.debug = "",
                    t.debug += e,
                    "undefined" != typeof console && console.log(e)
                }
                static getTimeStamp(e) {
                    const t = c.getWindow();
                    if (t.performance && t.performance.now) {
                        let e = "[" + t.performance.now();
                        return e = e.substring(0, e.indexOf(".") + 4),
                        e + "]"
                    }
                    const i = new Date(e);
                    let n = "[";
                    const s = i.getHours()
                      , r = i.getMinutes()
                      , o = i.getSeconds()
                      , a = i.getMilliseconds();
                    return n += (s < 10 ? "0" : "") + s + ":",
                    n += (r < 10 ? "0" : "") + r + ":",
                    n += (o < 10 ? "0" : "") + o + ".",
                    n += (a < 10 ? "00" : a < 100 ? "0" : "") + a + "]",
                    n
                }
                static debugDelayed(e) {
                    l.delayedDebug || (l.delayedDebug = []),
                    l.delayedDebug.push(e)
                }
                static flushDelayedDebug() {
                    for (let e = 0; e < l.delayedDebug.length; e++)
                        l.debug(l.delayedDebug[e]);
                    l.delayedDebug.length = 0
                }
            }
            class d {
                constructor(e, t) {
                    this.exceptionCode = e,
                    this.cb = t
                }
                execute() {
                    try {
                        this.callback()
                    } catch (e) {
                        O.notify(this.exceptionCode)
                    }
                }
                callback() {
                    "function" == typeof this.cb && this.cb()
                }
            }
            class u {
                static isSafariMobile() {
                    return "iOS" === h.getPlatform()
                }
                static isAndroidMobile() {
                    return "android" === h.getPlatform()
                }
                static isIEMobile() {
                    return "winphone" === h.getPlatform()
                }
                static isMobile() {
                    return r() || u.isSafariMobile() || u.isAndroidMobile() || u.isIEMobile()
                }
                static isSafari() {
                    return -1 !== h.getUserAgent().indexOf("safari")
                }
                static getSecondsFromMillisWith1Decimal(e) {
                    return "" + Math.round(e / 100) / 10
                }
                static getSecondsFromMillisWith2Decimal(e) {
                    return "" + Math.round(e / 10) / 100
                }
                static collectionToArray(e) {
                    const t = [];
                    for (let i = 0, n = e.length; i < n; i++)
                        t.push(e[i]);
                    return t
                }
                static percent(e) {
                    const t = "number" == typeof e ? String(e) : e;
                    let i = "00"
                      , n = t;
                    const s = t.indexOf(".");
                    return -1 !== s && (i = t.substring(s + 1, s + 3),
                    1 === i.length && (i += "0"),
                    n = t.substring(0, s)),
                    "0" === n ? "00" === i ? "0%" : i + "%" : n + i + "%"
                }
                static rounded2Decimals(e) {
                    return Math.round(100 * e) / 100
                }
                static decodeURIComponent(e) {
                    return decodeURIComponent(e)
                }
                static createJsMapFromStringToString() {
                    return new Map
                }
                static splitString(e, t, i) {
                    const n = e.split(t);
                    if (n.length <= i)
                        return n;
                    const s = n.splice(0, i - 1);
                    return s.push(n.join(t)),
                    s
                }
                static splitStringByRegexp(e, t) {
                    return e.split(new RegExp(t))
                }
                static getRandomId() {
                    return Math.floor(82e7 * Math.random() + 1e8) + ""
                }
                static getRandom() {
                    return Math.random()
                }
                static parseInt(e) {
                    try {
                        return parseInt(e, 10)
                    } catch (e) {
                        return O.notify(O.EXCEPTION_6),
                        0
                    }
                }
                static isNumeric(e) {
                    try {
                        const t = parseFloat(e);
                        return !isNaN(t) && isFinite(t)
                    } catch (e) {
                        return !1
                    }
                }
                static parseFloat(e) {
                    return parseFloat(e)
                }
                static elementHasDefined(e, t) {
                    return void 0 !== e[t]
                }
                static isSupOrEqualVersion(e, t) {
                    if ("" === e || "" === t)
                        return !1;
                    const i = e.split(".")
                      , n = t.split(".")
                      , s = Math.max(i.length, n.length);
                    for (let e = 0; e < s; e++) {
                        const t = i.length > e ? u.parseInt(i[e]) : 0
                          , s = n.length > e ? u.parseInt(n[e]) : 0;
                        if (t > s)
                            return !0;
                        if (t < s)
                            return !1
                    }
                    return n.length >= i.length
                }
                static isStrictlyInferiorVersion(e, t) {
                    return !u.isSupOrEqualVersion(e, t)
                }
            }
            class m {
                constructor(e, t) {
                    this.isRepeating = !1,
                    this.timerId = 0,
                    this.millis = 0,
                    this.timerCallback = e,
                    this.exceptionCode = t
                }
                static getDefaultTimerNamespace() {
                    return c.getWindow()
                }
                static setTimerNamespace(e) {
                    m.timerNamespace = e,
                    m.recreateTimers()
                }
                static clearInterval(e) {
                    m.timerNamespace.clearInterval(e)
                }
                static clearTimeout(e) {
                    m.timerNamespace.clearTimeout(e)
                }
                static createInterval(e, t) {
                    return m.timerNamespace.setInterval(( () => {
                        e.fire()
                    }
                    ), t)
                }
                static createTimeout(e, t) {
                    return m.timerNamespace.setTimeout(( () => {
                        e.fire()
                    }
                    ), t)
                }
                cancel() {
                    this.isRepeating ? m.clearInterval(this.timerId) : m.clearTimeout(this.timerId),
                    m.timers = m.timers.filter((e => e !== this))
                }
                schedule(e) {
                    if (e <= 0)
                        throw new Error("Cannot schedule a repeating timer with a period of zero or less.");
                    this.cancel(),
                    this.millis = e,
                    this.isRepeating = !1,
                    this.timerId = m.createTimeout(this, e),
                    m.timers.push(this)
                }
                scheduleRepeating(e) {
                    if (e <= 0)
                        throw new Error("Cannot schedule a repeating timer with a period of zero or less.");
                    this.cancel(),
                    this.millis = e,
                    this.isRepeating = !0,
                    this.timerId = m.createInterval(this, e),
                    m.timers.push(this)
                }
                fire() {
                    this.isRepeating || (m.timers = m.timers.filter((e => e !== this)));
                    try {
                        this.timerCallback()
                    } catch (e) {
                        this.exceptionCode && O.notify(this.exceptionCode)
                    }
                }
                static closeRemainingTimers() {
                    for (; m.timers.length > 0; )
                        m.timers[0].cancel()
                }
                static recreateTimers() {
                    for (let e = 0; e < m.timers.length; e++)
                        m.timers[e].recreateTimer()
                }
                recreateTimer() {
                    this.isRepeating ? this.scheduleRepeating(this.millis) : this.schedule(this.millis)
                }
            }
            m.timers = [],
            m.timerNamespace = m.getDefaultTimerNamespace();
            class h {
                static getScriptId() {
                    return c.getNamespace().si
                }
                static getPlatform() {
                    return c.getNamespace().plt
                }
                static getInitializationTime() {
                    return c.getNamespace().it
                }
                static getUserAgent() {
                    return c.getNamespace().ua
                }
                static getRequestSentList() {
                    return c.getNamespace().rqs
                }
                static getTagList() {
                    return c.getNamespace().ts
                }
                static getScriptVersion() {
                    return "5025"
                }
                static isInSecureProtocol() {
                    return "https:" === c.getWindow().document.location.protocol
                }
                static getProtocol() {
                    return h.isInSecureProtocol() ? "https" : "http"
                }
                static getCurrentTime() {
                    return (new Date).getTime()
                }
                static getBaseURL() {
                    return `${h.getProtocol()}:${c.getNamespace().base}`
                }
                static getBrowserIdentifier() {
                    return `${h.getScriptVersion()}-${h.getPlatform()}-${h.getOSVersion()}-${h.getUserAgent()}`
                }
                static getOSVersion() {
                    const e = new RegExp("Windows NT ([0-9]+)","ig").exec(navigator.userAgent);
                    return e && 2 === e.length ? e[1] : "-"
                }
            }
            class g {
                static registerOrUpdateSessionId() {
                    try {
                        if (!r()) {
                            const e = c.getWindow().top;
                            g.scanWindowsForSharedSession(e)
                        }
                        g.sessionId || (g.sessionId = g.genSessionId()),
                        g.setSessionIdInNamespace(g.sessionId);
                        for (let e = 0; e < g.allSeenWindows.length; ++e)
                            g.updateLocalWindowSessionId(g.allSeenWindows[e], g.sessionId)
                    } catch (e) {
                        O.notify(O.EXCEPTION_166)
                    }
                    g.allSeenWindows = []
                }
                static pushWindow(e) {
                    g.allSeenWindows.push(e);
                    const t = g.getOrCreateNullSharedIdSession(e);
                    t && (g.sessionId = t)
                }
                static getOrCreateNullSharedIdSession(e) {
                    const t = e.document._lntsh;
                    return void 0 !== t ? void 0 === t.ids && (e.document._lntsh.ids = null) : e.document._lntsh = {
                        ids: null
                    },
                    e.document._lntsh.ids
                }
                static scanWindowsForSharedSession(e) {
                    R.isWindowDocumentAccessible(e) && g.pushWindow(e),
                    g.scanFramesForSharedSession(e)
                }
                static scanFramesForSharedSession(e) {
                    const t = e.frames;
                    for (let e = 0; e < t.length; e++)
                        g.scanWindowsForSharedSession(t[e])
                }
                static genSessionId() {
                    return Math.floor(82e7 * Math.random() + 1e8) + "" + Math.floor(1e9 * Math.random() + 1e9)
                }
                static setSessionIdInNamespace(e) {
                    c.getNamespace().idSession = e
                }
                static updateLocalWindowSessionId(e, t) {
                    e.document._lntsh.ids = t
                }
                static getSessionId() {
                    return g.sessionId ? g.sessionId : ""
                }
            }
            g.sessionId = null,
            g.allSeenWindows = [];
            class E {
                constructor(e, t) {
                    this.x = e,
                    this.y = t
                }
                div(e) {
                    return new E(this.x / e.x,this.y / e.y)
                }
                equals(e) {
                    if (!(e instanceof E))
                        return !1;
                    const t = e;
                    return this.x === t.x && this.y === t.y
                }
                getX() {
                    return this.x
                }
                getY() {
                    return this.y
                }
                minus(e) {
                    return new E(this.x - e.x,this.y - e.y)
                }
                mult(e) {
                    return new E(this.x * e.x,this.y * e.y)
                }
                plus(e) {
                    return new E(this.x + e.x,this.y + e.y)
                }
                toString() {
                    return `Point(${this.x},${this.y})`
                }
                middle(e) {
                    return new E((this.x + e.x) / 2,(this.y + e.y) / 2)
                }
                opposite() {
                    return new E(-this.x,-this.y)
                }
                surface() {
                    return this.x * this.y
                }
                max(e) {
                    return new E(this.x > e.x ? this.x : e.x,this.y > e.y ? this.y : e.y)
                }
                min(e) {
                    return new E(this.x < e.x ? this.x : e.x,this.y < e.y ? this.y : e.y)
                }
            }
            E.zero = new E(0,0),
            E.minusOne = new E(-1,-1);
            class p {
                static getJsModule(e) {
                    return "OmidVerificationClient" === e ? this.getOmidVerificationClientModule() : this.getJsModuleNative(e)
                }
                static getOmidVerificationClientModule() {
                    return "undefined" != typeof OmidVerificationClient ? OmidVerificationClient : null
                }
                static getJsModuleNative(e) {
                    return c.getNamespace().myo[e]
                }
            }
            function T() {
                const e = c.getNamespace();
                if (e.isJsContext)
                    return e.ua = "safari9",
                    e.plt = "iOS",
                    e.ua;
                const t = navigator.userAgent.toLowerCase();
                let i, n = "unknown";
                return -1 !== t.indexOf("edge") ? n = "edge15" : -1 !== t.indexOf("msie") || -1 !== t.indexOf("trident") ? n = "function" == typeof IntersectionObserver && -1 !== (IntersectionObserver + "").indexOf("native") ? "edge15" : "ie11" : -1 !== t.indexOf("webkit") ? -1 !== t.indexOf("chrome") ? n = "chrome52" : -1 !== t.indexOf("safari") && (n = "safari9") : -1 !== t.indexOf("gecko") && (n = "gecko40"),
                i = -1 !== t.indexOf("android") ? "android" : -1 !== t.indexOf("linux") ? "linux" : -1 !== t.indexOf("ipod") || -1 !== t.indexOf("iphone") || -1 !== t.indexOf("ipad") ? "iOS" : -1 !== t.indexOf("macintosh") ? "mac" : -1 !== t.indexOf("windows") ? "win" : -1 !== navigator.userAgent.indexOf("CrOS") ? "chromeos" : "unknown",
                e.ua = n,
                e.plt = i,
                n
            }
            class _ extends d {
                constructor(e, t) {
                    super(e),
                    this.callbackFun = t
                }
                getEvent() {
                    return this.event
                }
                callback() {
                    this.handleEvent(this.event)
                }
                handleEvent(e) {
                    "function" == typeof this.callbackFun && this.callbackFun(e)
                }
                setEvent(e) {
                    this.event = e
                }
            }
            class I {
                static getContainerType() {
                    const e = F.getContainer();
                    if (!e)
                        return I.REGULAR_WEB;
                    {
                        const t = e.getContainerType();
                        switch (t) {
                        case I.NOT_INITIALIZED_SDK:
                            return I.REGULAR_WEB;
                        case I.APPNEXUS_SDK:
                        case I.MICROSOFT_SDK:
                        case I.NOT_SUPPORTED_SDK:
                        case I.HYBRID_APP:
                        case I.SMAATO_SDK:
                        case I.MOPUB_SDK:
                        case I.OM_SDK_UNKNOWN:
                        case I.OM_SDK_FULL:
                        case I.OM_SDK_LIMITED:
                            return t;
                        default:
                            return I.OTHER_SDK
                        }
                    }
                }
                static canUseBeforeUnloadCallback() {
                    return !u.isAndroidMobile() || !pe.hasAnjamNamespaceNative(c.getTopAccessibleWindow()) && (I.isOmidSdk() ? !F.getContainer().isAppnexusPartner() : !(Ce.isInAppSupplyType() && R.isCrossDomain() && F.trackingLoader.isTrackingSupported()))
                }
                static isOmidSdk() {
                    return I.OM_SDK_UNKNOWN === I.getContainerType() || I.OM_SDK_FULL === I.getContainerType() || I.OM_SDK_LIMITED === I.getContainerType()
                }
                static isOMIDContextWithoutCreativeAccess() {
                    return !!I.isOmidSdk() && F.getContainer().isOMIDContextWithoutCreativeAccess()
                }
                static cleanPartnerNameCharacters(e) {
                    return e.replace(/[^a-zA-Z0-9._-]/g, "_").substring(0, 50)
                }
                static isAsync(e) {
                    return !!I.isOmidSdk() && F.getContainer().isAsync(e)
                }
                static registerNewTag(e) {
                    I.isOmidSdk() && F.getContainer().registerNewTag(e)
                }
            }
            I.REGULAR_WEB = 0,
            I.NOT_SUPPORTED_SDK = 1,
            I.NOT_INITIALIZED_SDK = 2,
            I.OTHER_SDK = 3,
            I.APPNEXUS_SDK = 4,
            I.MICROSOFT_SDK = 5,
            I.HYBRID_APP = 6,
            I.SMAATO_SDK = 7,
            I.MOPUB_SDK = 8,
            I.OM_SDK_UNKNOWN = 10,
            I.OM_SDK_FULL = 11,
            I.OM_SDK_LIMITED = 12;
            class O {
                static init() {
                    O.exceptions = [],
                    O.createJSO(O.exceptions)
                }
                static createJSO(e) {
                    c.getNamespace().e = e
                }
                static notify(e) {
                    console.log("notify:::", e);
                    const t = e.toString();
                    -1 === O.exceptions.indexOf(t) && O.exceptions.push(t)
                }
                static getRequestPart() {
                    return O.exceptions.length > 0 ? O.exceptions.join("|") : ""
                }
                static notifyWithException(e, t) {
                    console.log("notifyWithException:::", e, t),
                    O.notify(e)
                }
            }
            O.EXCEPTION_2 = 2,
            O.EXCEPTION_3 = 3,
            O.EXCEPTION_4 = 4,
            O.EXCEPTION_5 = 5,
            O.EXCEPTION_6 = 6,
            O.EXCEPTION_9 = 9,
            O.EXCEPTION_11 = 11,
            O.EXCEPTION_13 = 13,
            O.EXCEPTION_16 = 16,
            O.EXCEPTION_19 = 19,
            O.EXCEPTION_21 = 21,
            O.EXCEPTION_23 = 23,
            O.EXCEPTION_24 = 24,
            O.EXCEPTION_28 = 28,
            O.EXCEPTION_32 = 32,
            O.EXCEPTION_33 = 33,
            O.EXCEPTION_36 = 36,
            O.EXCEPTION_37 = 37,
            O.EXCEPTION_38 = 38,
            O.EXCEPTION_39 = 39,
            O.EXCEPTION_40 = 40,
            O.EXCEPTION_41 = 41,
            O.EXCEPTION_53 = 53,
            O.EXCEPTION_57 = 57,
            O.EXCEPTION_61 = 61,
            O.EXCEPTION_72 = 72,
            O.EXCEPTION_73 = 73,
            O.EXCEPTION_75 = 75,
            O.EXCEPTION_76 = 76,
            O.EXCEPTION_79 = 79,
            O.EXCEPTION_80 = 80,
            O.EXCEPTION_81 = 81,
            O.EXCEPTION_82 = 82,
            O.EXCEPTION_83 = 83,
            O.EXCEPTION_84 = 84,
            O.EXCEPTION_85 = 85,
            O.EXCEPTION_86 = 86,
            O.EXCEPTION_88 = 88,
            O.EXCEPTION_90 = 90,
            O.EXCEPTION_93 = 93,
            O.EXCEPTION_95 = 95,
            O.EXCEPTION_99 = 99,
            O.EXCEPTION_100 = 100,
            O.EXCEPTION_103 = 103,
            O.EXCEPTION_104 = 104,
            O.EXCEPTION_107 = 107,
            O.EXCEPTION_109 = 109,
            O.EXCEPTION_110 = 110,
            O.EXCEPTION_111 = 111,
            O.EXCEPTION_112 = 112,
            O.EXCEPTION_113 = 113,
            O.EXCEPTION_114 = 114,
            O.EXCEPTION_120 = 120,
            O.EXCEPTION_121 = 121,
            O.EXCEPTION_122 = 122,
            O.EXCEPTION_124 = 124,
            O.EXCEPTION_125 = 125,
            O.EXCEPTION_126 = 126,
            O.EXCEPTION_127 = 127,
            O.EXCEPTION_128 = 128,
            O.EXCEPTION_129 = 129,
            O.EXCEPTION_142 = 142,
            O.EXCEPTION_147 = 147,
            O.EXCEPTION_148 = 148,
            O.EXCEPTION_152 = 152,
            O.EXCEPTION_153 = 153,
            O.EXCEPTION_154 = 154,
            O.EXCEPTION_155 = 155,
            O.EXCEPTION_161 = 161,
            O.EXCEPTION_162 = 162,
            O.EXCEPTION_163 = 163,
            O.EXCEPTION_166 = 166,
            O.EXCEPTION_167 = 167,
            O.EXCEPTION_168 = 168,
            O.EXCEPTION_169 = 169,
            O.EXCEPTION_171 = 171,
            O.EXCEPTION_172 = 172,
            O.EXCEPTION_173 = 173,
            O.EXCEPTION_174 = 174,
            O.EXCEPTION_175 = 175,
            O.EXCEPTION_176 = 176,
            O.EXCEPTION_180 = 180,
            O.EXCEPTION_181 = 181,
            O.EXCEPTION_182 = 182,
            O.EXCEPTION_183 = 183,
            O.EXCEPTION_185 = 185,
            O.EXCEPTION_186 = 186,
            O.EXCEPTION_187 = 187,
            O.EXCEPTION_188 = 188,
            O.EXCEPTION_189 = 189,
            O.EXCEPTION_190 = 190,
            O.EXCEPTION_191 = 191,
            O.EXCEPTION_192 = 192,
            O.EXCEPTION_200 = 200,
            O.EXCEPTION_201 = 201,
            O.EXCEPTION_202 = 202,
            O.EXCEPTION_401 = 401,
            O.EXCEPTION_402 = 402,
            O.EXCEPTION_403 = 403,
            O.EXCEPTION_404 = 404,
            O.EXCEPTION_405 = 405,
            O.EXCEPTION_406 = 406,
            O.EXCEPTION_407 = 407,
            O.EXCEPTION_408 = 408,
            O.EXCEPTION_409 = 409,
            O.EXCEPTION_204 = 204,
            O.EXCEPTION_205 = 205,
            O.EXCEPTION_206 = 206,
            O.EXCEPTION_207 = 207,
            O.EXCEPTION_1001 = 1001,
            O.EXCEPTION_1003 = 1003,
            O.EXCEPTION_1005 = 1005,
            O.EXCEPTION_1006 = 1006,
            O.EXCEPTION_1008 = 1008,
            O.EXCEPTION_1009 = 1009,
            O.EXCEPTION_1010 = 1010,
            O.EXCEPTION_1012 = 1012,
            O.EXCEPTION_1013 = 1013,
            O.EXCEPTION_1014 = 1014,
            O.EXCEPTION_1015 = 1015,
            O.EXCEPTION_1016 = 1016,
            O.EXCEPTION_1017 = 1017,
            O.EXCEPTION_1018 = 1018,
            O.EXCEPTION_1019 = 1019,
            O.EXCEPTION_1020 = 1020,
            O.EXCEPTION_1021 = 1021,
            O.EXCEPTION_1022 = 1022,
            O.EXCEPTION_1035 = 1035,
            O.EXCEPTION_1030 = 1030,
            O.EXCEPTION_1097 = 1097,
            O.EXCEPTION_1135 = 1135,
            O.EXCEPTION_1134 = 1134,
            O.EXCEPTION_1140 = 1140,
            O.EXCEPTION_1141 = 1141,
            O.EXCEPTION_1143 = 1143,
            O.EXCEPTION_1144 = 1144,
            O.EXCEPTION_1145 = 1145,
            O.EXCEPTION_1146 = 1146,
            O.EXCEPTION_1150 = 1150,
            O.EXCEPTION_1151 = 1151,
            O.EXCEPTION_1160 = 1160,
            O.EXCEPTION_1161 = 1161,
            O.EXCEPTION_1162 = 1162,
            O.EXCEPTION_1165 = 1165,
            O.EXCEPTION_1170 = 1170,
            O.EXCEPTION_1171 = 1171,
            O.EXCEPTION_1172 = 1172,
            O.EXCEPTION_1173 = 1173,
            O.EXCEPTION_1174 = 1174,
            O.EXCEPTION_1175 = 1175,
            O.EXCEPTION_1179 = 1179,
            O.EXCEPTION_1180 = 1180,
            O.EXCEPTION_1181 = 1181,
            O.EXCEPTION_1182 = 1182,
            O.EXCEPTION_1184 = 1184,
            O.EXCEPTION_1185 = 1185,
            O.EXCEPTION_1186 = 1186,
            O.EXCEPTION_1187 = 1187,
            O.EXCEPTION_1190 = 1190,
            O.EXCEPTION_1201 = 1201,
            O.EXCEPTION_1202 = 1202,
            O.EXCEPTION_1203 = 1203,
            O.EXCEPTION_1205 = 1205,
            O.EXCEPTION_1206 = 1206,
            O.EXCEPTION_1207 = 1207,
            O.EXCEPTION_1208 = 1208,
            O.EXCEPTION_1209 = 1209,
            O.EXCEPTION_1210 = 1210,
            O.EXCEPTION_1211 = 1211,
            O.EXCEPTION_1212 = 1212,
            O.EXCEPTION_1213 = 1213,
            O.EXCEPTION_1214 = 1214,
            O.EXCEPTION_1215 = 1215,
            O.EXCEPTION_1300 = 1300,
            O.EXCEPTION_1304 = 1304,
            O.EXCEPTION_1305 = 1305,
            O.EXCEPTION_1306 = 1306,
            O.EXCEPTION_1307 = 1307,
            O.EXCEPTION_1308 = 1308,
            O.EXCEPTION_1309 = 1309,
            O.EXCEPTION_1310 = 1310,
            O.EXCEPTION_1311 = 1311,
            O.EXCEPTION_1312 = 1312,
            O.EXCEPTION_1313 = 1313,
            O.EXCEPTION_1314 = 1314,
            O.EXCEPTION_1315 = 1315,
            O.EXCEPTION_1316 = 1316,
            O.EXCEPTION_1317 = 1317,
            O.EXCEPTION_1318 = 1318,
            O.EXCEPTION_1320 = 1320,
            O.EXCEPTION_1330 = 1330,
            O.EXCEPTION_1340 = 1340,
            O.EXCEPTION_1341 = 1341,
            O.EXCEPTION_1400 = 1400,
            O.EXCEPTION_1420 = 1420,
            O.EXCEPTION_1421 = 1421,
            O.EXCEPTION_1422 = 1422,
            O.EXCEPTION_1423 = 1423,
            O.EXCEPTION_1500 = 1500,
            O.EXCEPTION_1501 = 1501,
            O.EXCEPTION_1502 = 1502;
            class f {
                registerActivity(e) {
                    this.scanNregisterFocusHandlerOnWindows(e);
                    const t = c.getDocument(e)
                      , i = c.getVisibilityChangeEventName();
                    i && se.addEventListenerWithExceptionSafeCommand(t, i, new $(e)),
                    R.isInIframe() || se.addEventListenerWithEventListenerWrapper(e, t, "keydown", new _(O.EXCEPTION_80,(e => {
                        this.isKeyCodeFromHuman(e) && N.onActiveEvent()
                    }
                    )))
                }
                scanNregisterFocusHandlerOnWindows(e) {
                    if (R.isWindowDocumentAccessible(e))
                        if (c.getBodyElementTagNameChecked(e))
                            this.registerHandlerOnWindow(e);
                        else {
                            const t = new m(( () => {
                                const i = c.getBodyElement(e);
                                i && (t.cancel(),
                                "BODY" === se.getAttribute(i, "nodeName") && this.registerHandlerOnWindow(e))
                            }
                            ),O.EXCEPTION_84);
                            t.scheduleRepeating(80)
                        }
                    try {
                        this.scanFrames(e)
                    } catch (e) {
                        O.notify(O.EXCEPTION_167)
                    }
                }
                scanFrames(e) {
                    const t = e.frames;
                    for (let e = 0; e < t.length; e++)
                        this.scanNregisterFocusHandlerOnWindows(t[e])
                }
                registerWindowUnloadHandler() {
                    const e = c.getWindow()
                      , t = new d(O.EXCEPTION_93,( () => {
                        N.isUnloadEventCatched() || (N.setUnloadEventCatched(!0),
                        F.trkFinalize(Ze.RR_BEFORE_UNLOAD_REQUEST))
                    }
                    ));
                    I.canUseBeforeUnloadCallback() && se.addEventListenerWithExceptionSafeCommand(e, "beforeunload", t);
                    const i = new d(O.EXCEPTION_93,( () => {
                        N.isUnloadEventCatched() || (N.setUnloadEventCatched(!0),
                        F.trkFinalize(Ze.RR_UNLOAD_REQUEST))
                    }
                    ));
                    se.addEventListenerWithExceptionSafeCommand(e, "unload", i);
                    const n = new d(O.EXCEPTION_93,( () => {
                        N.isUnloadEventCatched() || (N.setUnloadEventCatched(!0),
                        F.trkFinalize(Ze.RR_PAGE_HIDE_REQUEST))
                    }
                    ));
                    se.addEventListenerWithExceptionSafeCommand(e, "pagehide", n)
                }
                registerHandlerOnWindow(e) {
                    try {
                        const t = c.getDocument(e)
                          , i = new A
                          , n = F.trackingLoader.getMousePositionTracker();
                        se.addEventListenerWithEventListenerWrapper(e, t, "mousemove", n),
                        se.addEventListenerWithExceptionSafeCommand(t, "click", i),
                        se.addEventListenerWithExceptionSafeCommand(e, "scroll", i),
                        se.addEventListenerWithExceptionSafeCommand(e, "focus", new b)
                    } catch (e) {
                        O.notify(O.EXCEPTION_168)
                    }
                }
                isKeyCodeFromHuman(e) {
                    const t = e;
                    return (t.charCode || t.keyCode) > 31
                }
            }
            class C extends f {
                registerHandlerOnWindow(e) {
                    super.registerHandlerOnWindow(e),
                    this.addBlurEventHandler(e, new y)
                }
                addBlurEventHandler(e, t) {
                    e.addEventListener("blur", (e => {
                        "object" == typeof e.target && t.execute()
                    }
                    ), !1)
                }
            }
            class S extends f {
                registerActivity(e) {
                    super.registerActivity(e),
                    this.registerFocusEvents(e)
                }
                registerFocusEvents(e) {
                    se.addEventListenerWithExceptionSafeCommand(e, "focus", new d(O.EXCEPTION_95,( () => {
                        c.hasFocus(c.getTopAccessibleWindow()) && N.onPageShowEvent()
                    }
                    )));
                    const t = c.getDocument(e);
                    se.addEventListenerWithExceptionSafeCommand(t, "focusout", new y)
                }
            }
            class v extends f {
                registerHandlerOnWindow(e) {
                    super.registerHandlerOnWindow(e);
                    const t = c.getDocument(e);
                    this.addBlurEventHandler(t, new y)
                }
                addBlurEventHandler(e, t) {
                    e.addEventListener("blur", (e => {
                        "object" == typeof e.target && t.execute()
                    }
                    ), !1)
                }
            }
            class N {
                constructor() {
                    const e = T();
                    N.impl = "ie11" === e || "edge15" === e ? new S : "gecko40" === e ? new v : new C,
                    N.registerActivity(c.getTopAccessibleWindow()),
                    r() || N.impl.registerWindowUnloadHandler()
                }
                static registerActivity(e) {
                    try {
                        r() || N.impl.registerActivity(e)
                    } catch (e) {
                        O.notify(O.EXCEPTION_82)
                    }
                }
                static registerHandlers() {
                    try {
                        new N
                    } catch (e) {
                        O.notify(O.EXCEPTION_83)
                    }
                }
                static isUnloadEventCatched() {
                    return N.unloadEventCatched
                }
                static setUnloadEventCatched(e) {
                    N.unloadEventCatched = e
                }
                static onActiveEvent() {
                    N.focusOutDelayTimer.cancel(),
                    F.trackingLoader.onBrowserActiveEvent()
                }
                static onPageShowEvent() {
                    N.focusOutDelayTimer.cancel(),
                    F.trackingLoader.onBrowserActiveEvent()
                }
                static onFocusoutEvent() {
                    N.focusOutDelayTimer.schedule(N.INACTIVITY_THREADHOLD)
                }
                static onPageHideEvent() {
                    N.focusOutDelayTimer.cancel(),
                    N.unloadEventCatched || F.trackingLoader.onBrowserInactiveEvent()
                }
            }
            N.unloadEventCatched = !1,
            N.INACTIVITY_THREADHOLD = 100,
            N.focusOutDelayTimer = new m(( () => {
                F.trackingLoader && F.trackingLoader.onBrowserInactiveEvent()
            }
            ),O.EXCEPTION_86);
            class A extends d {
                constructor() {
                    super(O.EXCEPTION_88)
                }
                callback() {
                    N.onActiveEvent()
                }
            }
            class $ extends d {
                constructor(e) {
                    super(O.EXCEPTION_99),
                    this.window = e
                }
                callback() {
                    c.isHiddenWithWindow(this.window) ? (N.onPageHideEvent(),
                    u.isMobile() && F.sendIntermediateRequest()) : N.onPageShowEvent()
                }
            }
            class b extends d {
                constructor() {
                    super(O.EXCEPTION_104)
                }
                callback() {
                    N.onPageShowEvent()
                }
            }
            class P extends _ {
                constructor() {
                    super(O.EXCEPTION_75),
                    this.lastMousePosition = null,
                    this.lastMousePositionOnScreen = null
                }
                handleEvent(e) {
                    if (e) {
                        let t, i, n = 0, s = 0, r = null, o = null;
                        try {
                            const a = e;
                            t = a.screenX,
                            i = a.screenY,
                            n = a.clientX,
                            s = a.clientY,
                            r = a.target,
                            r || (r = a.srcElement),
                            o = a.view
                        } catch (e) {
                            t = 0,
                            i = 0
                        }
                        !this.lastMousePositionOnScreen || this.lastMousePositionOnScreen.getX() === t && this.lastMousePositionOnScreen.getY() === i || N.onActiveEvent(),
                        this.lastMousePositionOnScreen = new E(t,i),
                        R.isCrossDomain() || (!o && r && r.ownerDocument && (o = se.getElementWindow(r)),
                        o && (this.lastMousePosition = new E(n,s),
                        this.lastMousePosition = R.getPositionRelativeToViewport(this.lastMousePosition, o)))
                    }
                }
            }
            class y extends d {
                constructor() {
                    super(O.EXCEPTION_103)
                }
                callback() {
                    c.hasFocus(c.getTopAccessibleWindow()) || N.onFocusoutEvent()
                }
            }
            class D {
                constructor(e) {
                    this.active = !c.isHidden() && D.hasFocus(),
                    this.lastShotTime = h.getInitializationTime(),
                    this.lastEventTime = h.getInitializationTime()
                }
                static hasFocus() {
                    return !(!R.isCrossDomain() && !F.getContainer()) || c.hasFocus(c.getTopAccessibleWindow())
                }
                onActiveEvent() {
                    this.setLastEventTime(h.getCurrentTime()),
                    this.active || (this.setActive(!0),
                    this.setLastShotTime(this.lastEventTime))
                }
                setLastShotTime(e) {
                    this.lastShotTime = e
                }
                setLastEventTime(e) {
                    this.lastEventTime = e
                }
                setActive(e) {
                    this.active = e
                }
                onInactiveEvent() {
                    this.isActive() && this._onInactiveEvent(h.getCurrentTime())
                }
                _onInactiveEvent(e) {
                    this.setActive(!1),
                    this.setLastEventTime(e)
                }
                isActive() {
                    return I.isOMIDContextWithoutCreativeAccess() || this.active
                }
                updateActivity() {
                    const e = h.getCurrentTime();
                    this.setLastShotTime(e)
                }
                getLastEventTime() {
                    return this.lastEventTime
                }
                getLastShotTime() {
                    return this.lastShotTime
                }
            }
            class w {
                static init(e) {
                    w.windows = e;
                    for (let e = 0; e < w.windows.length; e++)
                        w.windows[e][w.INDEX_KEY] = w.windows.length - e
                }
                static isReliable() {
                    try {
                        let e = 0;
                        for (; e < w.windows.length - 1; ) {
                            const t = w.windows[e];
                            if (!t || !w.getFrameElement(this.getAccessibleParentWindow(t), t))
                                return !1;
                            e++
                        }
                        return !!w.windows[e]
                    } catch (e) {
                        return !1
                    }
                }
                static getTagWindow() {
                    return w.windows[0]
                }
                static debug() {
                    for (let e = 0; e < w.windows.length; e++) {
                        const t = w.windows[e];
                        l.debug(`Lvl ${e}: ${c.getLocation(t)}`)
                    }
                }
                static getAccessibleParentWindow(e) {
                    const t = w.windows.indexOf(e) + 1;
                    return t < w.windows.length ? w.windows[t] : null
                }
                static indexOf(e) {
                    if (!e)
                        return -1;
                    let t;
                    return t = e[w.INDEX_KEY] || 0,
                    w.windows.length - t
                }
                static getAccessibleChildWindow(e) {
                    const t = w.windows.indexOf(e) - 1;
                    return t >= 0 ? w.windows[t] : null
                }
                static getFrameElement(e, t) {
                    return w.getFrameElementNative(e, t)
                }
                static getFrameElementNative(e, t) {
                    if (t.parent === e)
                        return t.frameElement;
                    const i = e.document.getElementsByTagName("IFRAME");
                    for (let e = 0; e < i.length; e++)
                        if (w.isFrameWindowContainingWindow(i[e].contentWindow, t))
                            return i[e];
                    return null
                }
                static isFrameWindowContainingWindow(e, t) {
                    for (let i = 0; i < e.frames.length; i++)
                        return e.frames[i] === t || w.isFrameWindowContainingWindow(e.frames[i], t);
                    return !1
                }
                static isTop(e) {
                    const t = w.indexOf(e);
                    return -1 === t || t === w.windows.length - 1
                }
                static getTopAccessibleWindow() {
                    return w.windows[w.windows.length - 1]
                }
            }
            w.INDEX_KEY = "lnt_z",
            w.windows = [];
            class R {
                static init() {
                    const e = [];
                    let t = c.getWindow();
                    if (e.push(t),
                    R.frameType = R.SIMPLE_PAGE,
                    R.isInAFrame())
                        for (; t !== t.parent; )
                            t = t.parent,
                            R.isWindowDocumentAccessible(t) ? (e.push(t),
                            c.getBodyElementTagNameChecked(t) ? R.frameType = R.IFRAME_WITH_PARENT_ACCESS : R.frameType = R.FRAME_WITH_PARENT_ACCESS) : R.frameType = R.FRAME_OR_IFRAME_WITH_NO_PARENT_ACCESS;
                    w.init(e),
                    c.setTopAccessibleWindow(w.getTopAccessibleWindow())
                }
                static getFrameType() {
                    return R.frameType
                }
                static getWindowFrameOffset(e, t) {
                    try {
                        const i = w.getFrameElement(e, t);
                        return re.getWindowAbsolutePosition(e, i)
                    } catch (e) {
                        return O.notify(O.EXCEPTION_72),
                        E.zero
                    }
                }
                static isInHead(e) {
                    return e ? !(!e.parentNode || "HEAD" !== e.parentNode.tagName) : (O.notify(O.EXCEPTION_1317),
                    !1)
                }
                static isInAFrame() {
                    try {
                        return document.location !== window.parent.location
                    } catch (e) {
                        return !0
                    }
                }
                static isWindowDocumentAccessible(e) {
                    try {
                        return void 0 !== e.location.href
                    } catch (e) {
                        return !1
                    }
                }
                static searchByIdInAllFrames(e, t, i) {
                    const n = oe.getWindowElementsById(e, i);
                    return n.length > 0 ? n : R.recursiveDomIdSearch(t, i)
                }
                static recursiveDomIdSearch(e, t) {
                    const i = oe.getWindowElementsById(e, t);
                    return i.length > 0 ? i : R.scanFrames(e, t)
                }
                static scanFrames(e, t) {
                    const i = e.frames;
                    for (let e = 0; e < i.length; e++)
                        if (R.isWindowDocumentAccessible(i[e])) {
                            const n = R.recursiveDomIdSearch(i[e], t);
                            if (n.length > 0)
                                return n
                        }
                    return []
                }
                static searchByCssSelectorInAllFrames(e, t, i) {
                    return oe.querySelector(e, i) || R.recursiveCssSelectorSearch(t, i)
                }
                static recursiveCssSelectorSearch(e, t) {
                    return oe.querySelector(e, t) || R.scanFramesCssSelector(e, t)
                }
                static scanFramesCssSelector(e, t) {
                    const i = e.frames;
                    for (let e = 0; e < i.length; e++)
                        if (R.isWindowDocumentAccessible(i[e])) {
                            const n = R.recursiveCssSelectorSearch(i[e], t);
                            if (n)
                                return n
                        }
                    return null
                }
                static isCrossDomain() {
                    return R.frameType === R.FRAME_OR_IFRAME_WITH_NO_PARENT_ACCESS
                }
                static isInIframeSameDomain() {
                    return R.frameType === R.IFRAME_WITH_PARENT_ACCESS
                }
                static isInIframe() {
                    return R.isInIframeSameDomain() || R.isCrossDomain()
                }
                static isSimplePage() {
                    return R.frameType === R.SIMPLE_PAGE
                }
                static getContentWindow(e) {
                    return e.contentWindow
                }
                static getPositionRelativeToViewport(e, t) {
                    let i = t
                      , n = i.parent;
                    if (!R.isWindowDocumentAccessible(n))
                        return null;
                    let s = 0;
                    for (; n && n !== i; ) {
                        const t = R.getWindowFrameOffset(n, i).minus(c.getWindowScroll(n));
                        if (e = e.plus(t),
                        i = n,
                        n = i.parent,
                        !R.isWindowDocumentAccessible(n))
                            return null;
                        if (s++,
                        s > 10)
                            return O.notify(O.EXCEPTION_61),
                            null
                    }
                    return e
                }
            }
            R.SIMPLE_PAGE = 0,
            R.FRAME_WITH_PARENT_ACCESS = 1,
            R.IFRAME_WITH_PARENT_ACCESS = 2,
            R.FRAME_OR_IFRAME_WITH_NO_PARENT_ACCESS = 3,
            R.frameType = 0;
            class M {
                static getCurrentScroll(e) {
                    const t = e.document.createEvent("MouseEvents")
                      , i = e.top;
                    return t.initMouseEvent("mouseover", !0, !0, i),
                    new E(t.pageX,t.pageY)
                }
            }
            class V {
                static getScreenLeft() {
                    return c.getWindow().screenLeft
                }
                static hasScreenLeft() {
                    const e = c.getWindow().screenLeft;
                    return void 0 !== e && "unknown" != typeof e
                }
                static getScreenTop() {
                    return c.getWindow().screenTop
                }
                static hasScreenTop() {
                    const e = c.getWindow().screenTop;
                    return void 0 !== e && "unknown" != typeof e
                }
                static getScreenX() {
                    return c.getWindow().screenX
                }
                static getScreenY() {
                    return c.getWindow().screenY
                }
            }
            class L {
                static getIframePosition(e) {
                    const t = Math.round(e.mozInnerScreenX - e.screen.left)
                      , i = Math.round(e.mozInnerScreenY - e.screen.top);
                    return new E(t,i)
                }
            }
            class x {
                createTrackingLoader() {
                    return new F
                }
                createTrackingLoaderXD() {
                    return this.createTrackingLoader()
                }
            }
            class k extends x {
            }
            class X {
                constructor() {
                    this.durationDelayed = 0
                }
                createViewPortFromTop(e) {
                    return null
                }
                getPercentVisible() {
                    const e = F.getContainer();
                    return e ? e.getVisibleRatio() : 1
                }
                static isRealEvent() {
                    return X._isRealEvent
                }
                beforeShotCheck(e) {
                    return e += this.durationDelayed,
                    this.isTrackingInitialized() ? this.durationDelayed = 0 : (this.durationDelayed = e,
                    e = 0),
                    e
                }
                afterCheckDuration() {}
                isTrackingInitialized() {
                    const e = F.getContainer();
                    return !e || e.isTrackingInitialized()
                }
                isTrackingSupported() {
                    return !0
                }
            }
            X._isRealEvent = !0;
            class F {
                getContentPanel() {
                    return this.contentPanel
                }
                constructor() {
                    this.contentPanel = null,
                    this.shotTimer = new m(( () => {
                        this.checkDurationAfterShot()
                    }
                    ),O.EXCEPTION_2),
                    this.shotTimerInterval = bt.getUseIntersectionObserver() ? F.SHOT_TIMER_INTERVAL : F.SHOT_TIMER_INTERVAL_FAST,
                    this._isActiveAtLeastOne = !1,
                    this.mousePositionTracker = new P,
                    F.trackingLoader = this
                }
                start() {
                    g.registerOrUpdateSessionId(),
                    this.initInAppContext(),
                    this.activityHolder = new D(c.getTopAccessibleWindow()),
                    N.registerHandlers(),
                    this.initTrackDisplay(),
                    $t.processTags(),
                    this.checkDuration(),
                    this.shotTimer.scheduleRepeating(this.shotTimerInterval);
                    const e = c.getWindow();
                    Ge.registerNewScript(),
                    Ge.registerScriptStatusFunction(e),
                    Ge.registerActivityStatusFunction(e),
                    Ge.registerTrkFinalize(),
                    Ge.registerTrkForceIntermediateRequest(),
                    r() ? O.notify(O.EXCEPTION_1309) : Ge.checkJsSignals()
                }
                initTrackDisplay() {
                    this.trackDisplay = new X
                }
                checkDurationAfterShot() {
                    $t.refreshContent(),
                    this.searchElements(),
                    this.checkDuration()
                }
                searchElements() {
                    for (let e = 0; e < Pe.getTagCount(); e++) {
                        const t = Pe.getTagAtIndex(e);
                        try {
                            t.searchElements()
                        } catch (e) {
                            O.notify(O.EXCEPTION_4)
                        }
                    }
                }
                checkDuration() {
                    try {
                        const e = F.isActive();
                        e && (this._isActiveAtLeastOne = !0);
                        const t = this.activityHolder.getLastShotTime();
                        this.activityHolder.updateActivity();
                        const i = this.activityHolder.getLastShotTime();
                        F.container && F.container.refreshSdkStatus();
                        for (let n = 0; n < Pe.getTagCount(); n++) {
                            const s = Pe.getTagAtIndex(n);
                            if (e) {
                                let e = i - t;
                                e < 0 && (e = this.shotTimerInterval,
                                O.notify(O.EXCEPTION_53)),
                                this.shotOnTag(s, e)
                            } else if (!s.isFlushed()) {
                                let e = this.activityHolder.getLastEventTime() - t;
                                e < 0 && (e = 0),
                                this.shotOnTag(s, e)
                            }
                        }
                        for (let e = 0; e < Pe.getTagCount(); e++)
                            Pe.getTagAtIndex(e).flushContentIfNeeded();
                        Pe.postFlushCleanup(),
                        this.contentPanel && this.contentPanel.updatePanel(),
                        this.trackDisplay.afterCheckDuration()
                    } catch (e) {
                        O.notify(O.EXCEPTION_32)
                    }
                }
                shotOnTag(e, t) {
                    t = this.trackDisplay.beforeShotCheck(t),
                    e.shot(),
                    e.commitDuration(t)
                }
                onBrowserActiveEvent() {
                    this.activityHolder.onActiveEvent()
                }
                onBrowserInactiveEvent() {
                    this.activityHolder.onInactiveEvent(),
                    this.checkDuration()
                }
                static sendIntermediateRequest() {
                    if (!F.softRequestSent) {
                        F.softRequestSent = !0,
                        F.trackingLoader.checkDuration();
                        for (let e = Pe.getTagCount() - 1; e >= 0; e--)
                            Pe.getTagAtIndex(e).sendIntermediateRequest(Ze.RR_MOBILE_INTERMEDIATE_REQUEST)
                    }
                }
                static sendNonMeasurableWebviewRequest() {
                    F.trackingLoader.checkDuration();
                    for (let e = Pe.getTagCount() - 1; e >= 0; e--)
                        Pe.getTagAtIndex(e).sendIntermediateRequest(Ze.RR_NM_REQUEST)
                }
                static trkFinalize(e) {
                    F.trackingLoader.checkDuration();
                    for (let t = Pe.getTagCount() - 1; t >= 0; t--)
                        Pe.getTagAtIndex(t).shutdown(e);
                    try {
                        m.closeRemainingTimers()
                    } catch (e) {
                        O.notify(O.EXCEPTION_11)
                    }
                }
                getLastShotTime() {
                    return this.activityHolder.getLastShotTime()
                }
                refreshActivity() {
                    c.isHiddenWithWindow(c.getWindow()) || this.onBrowserActiveEvent()
                }
                static isActive() {
                    return F.trackingLoader.activityHolder.isActive()
                }
                static inactiveEvent() {
                    F.trackingLoader.onBrowserInactiveEvent()
                }
                isTrackingSupported() {
                    return (!F.container || F.container.isAppSupported()) && (!this.trackDisplay || this.trackDisplay.isTrackingSupported())
                }
                isActiveAtLeastOne() {
                    return this._isActiveAtLeastOne
                }
                getCrossDomainIframePosition() {
                    return E.minusOne
                }
                getMousePositionTracker() {
                    return this.mousePositionTracker
                }
                static getContainer() {
                    return F.container
                }
                static setContainer(e) {
                    F.container = e
                }
                static checkDurationStatic() {
                    F.trackingLoader.checkDurationUnplanned()
                }
                checkDurationUnplanned() {
                    this.shotTimer.cancel(),
                    this.shotTimer.scheduleRepeating(this.shotTimerInterval),
                    this.checkDuration()
                }
                initInAppContext() {
                    try {
                        const e = c.getTopAccessibleWindow();
                        if (ge.isMicrosoftSDK(e)) {
                            const e = new ge;
                            e.init(),
                            F.setContainer(e)
                        } else if (ue.isOmidSupported()) {
                            const e = new ue;
                            F.setContainer(e),
                            e.init()
                        } else if (pe.hasAnjamNamespaceNative(e))
                            pe.initAppNexusSDKMraidContainer();
                        else if (de.isAvailable(e))
                            F.setContainer(new de);
                        else if (he.isAvailable(e)) {
                            const e = new he;
                            e.init(),
                            F.setContainer(e)
                        } else if (Ce.isInAppSupplyType() || c.isAppUserAgent()) {
                            const e = Ie.getHybridAppContainerIfAvailable();
                            if (e)
                                F.setContainer(e);
                            else if (R.isCrossDomain() && this.isTrackingSupported())
                                pe.checkAppNexusSDKContext();
                            else {
                                const e = new ce;
                                F.setContainer(e)
                            }
                        }
                    } catch (e) {
                        O.notify(O.EXCEPTION_176)
                    }
                }
                static getLastReferenceElement() {
                    return F.lastReferenceElement
                }
                static setLastReferenceElement(e) {
                    F.lastReferenceElement = e
                }
            }
            F.softRequestSent = !1,
            F.SHOT_TIMER_INTERVAL = 1e3,
            F.SHOT_TIMER_INTERVAL_FAST = 100,
            F.lastReferenceElement = null,
            F.container = null;
            class U extends x {
                createTrackingLoaderXD() {
                    return new z
                }
            }
            class W extends x {
                createTrackingLoaderXD() {
                    return new G
                }
            }
            class B extends x {
                createTrackingLoaderXD() {
                    return new q
                }
            }
            class H extends x {
                createTrackingLoaderXD() {
                    return new K
                }
            }
            class j extends X {
                constructor() {
                    super(),
                    this.lastScroll = E.zero,
                    this.hasReceivedOneEventAtLeast = !1;
                    const e = c.getTopAccessibleWindow();
                    this.divElement = this.getOrCreateReferenceElement(e),
                    se.addEventListenerWithEventListenerWrapper(e, this.divElement, "click", new _(O.EXCEPTION_180,(e => {
                        e && this.refreshScrollPosition(e)
                    }
                    )));
                    try {
                        this.doClick(this.divElement)
                    } catch (e) {
                        O.notify(O.EXCEPTION_181)
                    }
                }
                getOrCreateReferenceElement(e) {
                    let t = F.getLastReferenceElement();
                    return t || (t = ye.createFakeImageElementNative(e, null, !0)),
                    t
                }
                getAvailableScreenSize(e) {
                    return new E(e.outerWidth,e.outerHeight)
                }
                refreshScrollPosition(e) {
                    let t = null;
                    V.hasScreenLeft() && V.hasScreenTop() && (t = new E(e.x + V.getScreenLeft(),e.y + V.getScreenTop()),
                    t.equals(this.lastScroll) || (N.onActiveEvent(),
                    this.lastScroll = t)),
                    e.stopPropagation(),
                    e.preventDefault(),
                    this.hasReceivedOneEventAtLeast = !0
                }
                doClick(e) {
                    e.click()
                }
                getPercentVisible() {
                    try {
                        this.doClick(this.divElement)
                    } catch (e) {
                        O.notify(O.EXCEPTION_181)
                    }
                    let e = this.getAvailableScreenSize(c.getTopAccessibleWindow());
                    e = e.minus(new E(j.SCREEN_MARGIN_RIGHT,j.SCREEN_MARGIN_BOTTOM));
                    const t = c.getWindowSize(c.getTopAccessibleWindow());
                    let i = null;
                    if (!V.hasScreenLeft() || !V.hasScreenTop())
                        return 0;
                    i = new E(V.getScreenLeft() - j.IFRAME_MARGIN_LEFT - V.getScreenX(),V.getScreenTop() - j.IFRAME_MARGIN_TOP - V.getScreenY());
                    const n = E.zero.max(i.plus(t).min(e.plus(this.lastScroll)).minus(i.max(this.lastScroll)))
                      , s = t.getX() * t.getY()
                      , r = s > 0 ? n.getX() * n.getY() / s : 0;
                    return super.getPercentVisible() * r
                }
                isTrackingInitialized() {
                    return this.hasReceivedOneEventAtLeast && super.isTrackingInitialized()
                }
            }
            j.IFRAME_MARGIN_LEFT = 8,
            j.IFRAME_MARGIN_TOP = 92,
            j.SCREEN_MARGIN_RIGHT = 33,
            j.SCREEN_MARGIN_BOTTOM = 102;
            class z extends F {
                constructor() {
                    super(...arguments),
                    this.scrollPosition = E.zero
                }
                checkDuration() {
                    try {
                        const e = M.getCurrentScroll(c.getTopAccessibleWindow());
                        e.equals(this.scrollPosition) || (this.scrollPosition = e,
                        N.onActiveEvent())
                    } catch (e) {
                        O.notify(O.EXCEPTION_109)
                    }
                    super.checkDuration()
                }
            }
            class G extends F {
                initTrackDisplay() {
                    this.trackDisplay = new j
                }
                getCrossDomainIframePosition() {
                    if (V.hasScreenLeft() && V.hasScreenTop()) {
                        const e = V.getScreenTop()
                          , t = V.getScreenLeft();
                        return new E(t,e)
                    }
                    return E.minusOne
                }
            }
            class q extends F {
                constructor() {
                    super(...arguments),
                    this.iframePosition = L.getIframePosition(c.getTopAccessibleWindow())
                }
                initTrackDisplay() {
                    super.initTrackDisplay(),
                    this.originalIframePosition = L.getIframePosition(c.getTopAccessibleWindow()),
                    this.iframePosition = this.originalIframePosition
                }
                getCrossDomainIframePosition() {
                    return this.originalIframePosition
                }
                checkDuration() {
                    const e = L.getIframePosition(c.getTopAccessibleWindow());
                    this.iframePosition.equals(e) || (this.iframePosition = e,
                    N.onActiveEvent()),
                    super.checkDuration()
                }
            }
            class K extends F {
                getCrossDomainIframePosition() {
                    const e = V.getScreenTop()
                      , t = V.getScreenLeft();
                    return new E(t,e)
                }
            }
            class Y {
                isCSSvisible(e, t) {
                    try {
                        const i = e.getComputedStyle;
                        if (se.isFunctionNative(i)) {
                            const e = i(t, "");
                            return !(!e || !e.visibility) && "visible" === e.visibility
                        }
                        O.notify(O.EXCEPTION_1035)
                    } catch (e) {
                        return O.notify(O.EXCEPTION_23),
                        !1
                    }
                    return !0
                }
                getElementWindow(e) {
                    return e.ownerDocument.defaultView
                }
                addEventListenerActive(e, t, i) {
                    e.addEventListener(t, (e => {
                        i.setEvent(e),
                        i.execute()
                    }
                    ))
                }
                addEventListenerWithEventListenerWrapper(e, t, i, n) {
                    t.addEventListener(i, (e => {
                        n.setEvent(e),
                        n.execute()
                    }
                    ), {
                        passive: !0
                    })
                }
                addEventListenerWithExceptionSafeCommand(e, t, i) {
                    e.addEventListener(t, (e => {
                        i.execute()
                    }
                    ), {
                        passive: !0
                    })
                }
            }
            class J extends Y {
            }
            class Q extends J {
                addEventListenerWithEventListenerWrapper(e, t, i, n) {
                    t.addEventListener(i, (e => {
                        n.setEvent(e),
                        n.execute()
                    }
                    ))
                }
                addEventListenerWithExceptionSafeCommand(e, t, i) {
                    e.addEventListener(t, ( () => {
                        i.execute()
                    }
                    ))
                }
            }
            class Z {
                getElementAttribute(e, t) {
                    return e.getAttribute(t) || null
                }
                getWindowElementsById(e, t) {
                    const i = []
                      , n = e.document.getElementsByTagName("*");
                    for (let e = 0; e < n.length; e++)
                        n[e].id === t && i.push(n[e]);
                    return i
                }
                getWindowElementById(e, t) {
                    return e.document.getElementById(t) || null
                }
                getElementProperty(e, t) {
                    const i = e[t];
                    return i ? String(i) : null
                }
                getFirstChild(e) {
                    return e.firstElementChild
                }
                getLastChild(e) {
                    return e.lastElementChild
                }
                getNextSibling(e) {
                    return e.nextElementSibling
                }
                getPreviousSibling(e) {
                    return e.previousElementSibling
                }
                getParent(e) {
                    let t = e.parentNode;
                    return t ? (1 !== t.nodeType && (t = null),
                    t || null) : null
                }
                querySelector(e, t) {
                    return e.document.querySelector(t)
                }
            }
            class ee extends Z {
            }
            class te {
                getWindowAbsolutePosition(e, t) {
                    let i = 0
                      , n = 0
                      , s = t;
                    for (; s.offsetParent; )
                        i -= s.scrollLeft,
                        n -= s.scrollTop,
                        s = s.parentNode;
                    for (; t; )
                        i += t.offsetLeft,
                        n += t.offsetTop,
                        t = t.offsetParent;
                    return new E(Math.round(i),Math.round(n))
                }
            }
            class ie extends te {
                getWindowAbsolutePosition(e, t) {
                    if (null === t.offsetLeft || void 0 === t.offsetLeft)
                        return new E(0,0);
                    let i = 0
                      , n = t.parentNode;
                    if (n)
                        for (; n.offsetParent; )
                            i -= n.scrollLeft,
                            n = n.parentNode;
                    let s = t;
                    for (; s; ) {
                        i += s.offsetLeft;
                        const e = s.offsetParent;
                        if (e && "BODY" === e.tagName && "absolute" === s.style.position)
                            break;
                        s = e
                    }
                    const r = e.getComputedStyle(e.document.documentElement, "")
                      , o = Math.round(t.getBoundingClientRect().top + parseInt(r.borderTopWidth, 10) + e.scrollY);
                    return new E(Math.round(i),Math.round(o))
                }
            }
            class ne extends te {
                getWindowAbsolutePosition(e, t) {
                    const i = e.document.documentElement
                      , n = e.getComputedStyle(i, "");
                    let s = 0
                      , r = 0;
                    if (n) {
                        const e = t.getBoundingClientRect();
                        s = Math.round(e.left + parseInt(n.borderLeftWidth, 10) + i.scrollLeft),
                        r = Math.round(e.top + parseInt(n.borderTopWidth, 10) + i.scrollTop)
                    }
                    return new E(s,r)
                }
            }
            class se {
                static setAttribute(e, t, i) {
                    e[t] = i
                }
                static getAttribute(e, t) {
                    return e[t] ? e[t] : ""
                }
                static getElementsByTagName(e, t) {
                    const i = []
                      , n = e.document.getElementsByTagName(t);
                    for (let e = 0; e < n.length; e++)
                        i.push(n.item(e));
                    return i
                }
                static isNullOrParentNull(e) {
                    if (!e)
                        return !0;
                    const t = se.getAttribute(e, "nodeName").toUpperCase();
                    if ("BODY" === t || "HEAD" === t)
                        return !1;
                    let i = s(e);
                    return i || (i = se.getWebComponentHostIfExist(e)),
                    se.isNullOrParentNull(i)
                }
                static getWebComponentHostIfExist(e) {
                    return e.parentNode && e.parentNode.host ? e.parentNode.host : null
                }
                static isCSSvisible(e, t) {
                    return se.impl.isCSSvisible(e, t)
                }
                static getElementWindow(e) {
                    return se.impl.getElementWindow(e)
                }
                static addEventListenerActive(e, t, i) {
                    se.impl.addEventListenerActive(e, t, i)
                }
                static addEventListenerWithEventListenerWrapper(e, t, i, n) {
                    se.impl.addEventListenerWithEventListenerWrapper(e, t, i, n)
                }
                static addEventListenerWithExceptionSafeCommand(e, t, i) {
                    se.impl.addEventListenerWithExceptionSafeCommand(e, t, i)
                }
                static isFunctionNative(e) {
                    return void 0 !== e && -1 !== ("" + e).indexOf("native")
                }
                static getOffsetSize(e) {
                    const t = e
                      , i = t.offsetWidth || 0
                      , n = t.offsetHeight || 0;
                    return new E(i,n)
                }
                static getSize(e) {
                    const t = parseInt(e.width, 10) || 0
                      , i = parseInt(e.height, 10) || 0;
                    return new E(t,i)
                }
                static getMaxSize(e) {
                    return se.getOffsetSize(e).max(se.getSize(e))
                }
                static getAccessibleParentWindow(e) {
                    let t = e;
                    for (; t !== t.parent; ) {
                        if (R.isWindowDocumentAccessible(t.parent))
                            return t.parent;
                        t = t.parent
                    }
                    return null
                }
            }
            ( () => {
                const e = T();
                se.impl = "ie11" === e ? new Q : new J
            }
            )();
            class re {
                static getWindowAbsolutePosition(e, t) {
                    return re.impl.getWindowAbsolutePosition(e, t)
                }
            }
            ( () => {
                const e = T();
                re.impl = "gecko40" === e || "ie11" === e ? new ne : new ie
            }
            )();
            class oe {
                static getElementAttribute(e, t) {
                    return oe.impl.getElementAttribute(e, t)
                }
                static getWindowElementById(e, t) {
                    return oe.impl.getWindowElementById(e, t)
                }
                static getWindowElementsById(e, t) {
                    return oe.impl.getWindowElementsById(e, t)
                }
                static getElementProperty(e, t) {
                    return oe.impl.getElementProperty(e, t)
                }
                static getFirstChild(e) {
                    return oe.impl.getFirstChild(e)
                }
                static getLastChild(e) {
                    return oe.impl.getLastChild(e)
                }
                static getNextSibling(e) {
                    return oe.impl.getNextSibling(e)
                }
                static getPreviousSibling(e) {
                    return oe.impl.getPreviousSibling(e)
                }
                static getParent(e) {
                    return oe.impl.getParent(e)
                }
                static querySelector(e, t) {
                    return oe.impl.querySelector(e, t)
                }
            }
            oe.impl = new ee;
            class ae {
                constructor() {
                    this.partnerName = null,
                    this.adSize = E.minusOne,
                    this.adPosition = E.minusOne,
                    this.isSdkContainerUsableCache = !1,
                    this.visibleRatio = 0
                }
                isTrackingInitialized() {
                    return this.isSdkContainerUsableCache
                }
                getVisibleRatio() {
                    return this.visibleRatio
                }
                shutDown() {
                    this.isAppSupported() && !this.isTrackingInitialized() && O.notify(O.EXCEPTION_1160)
                }
                static hasMraidNamespace(e) {
                    return void 0 !== e.mraid && "function" == typeof e.mraid.getState
                }
                getPartnerName() {
                    return this.partnerName
                }
                getAdSize() {
                    return this.adSize
                }
                getAdPosition() {
                    return this.adPosition
                }
                getDebugGeometricInfo(e) {
                    return []
                }
            }
            class ce extends ae {
                init() {}
                isAppSupported() {
                    return !1
                }
                isTrackingInitialized() {
                    return !1
                }
                getContainerType() {
                    return I.NOT_SUPPORTED_SDK
                }
                isUsable() {
                    return !1
                }
                getVisibleRatioRefreshed() {
                    return 0
                }
                refreshSdkStatus() {}
            }
            class le extends ae {
                init() {}
                isAppSupported() {
                    return !0
                }
                isTrackingInitialized() {
                    return !1
                }
                getContainerType() {
                    return I.NOT_INITIALIZED_SDK
                }
                isUsable() {
                    return !1
                }
                getVisibleRatioRefreshed() {
                    return 0
                }
                refreshSdkStatus() {}
            }
            class de extends ce {
                getContainerType() {
                    return I.SMAATO_SDK
                }
                static isAvailable(e) {
                    return u.elementHasDefined(e, "smaato_bridge")
                }
            }
            class ue extends ae {
                constructor() {
                    super(...arguments),
                    this.hasReceivedGeometryChangeEventAtLeastOnce = !1,
                    this.sessionStart = null,
                    this.verificationClient = null,
                    this.hasRegisteredNewTag = !1,
                    this.adLastObstructionSize = E.minusOne,
                    this.adLastObstructionPosition = E.minusOne,
                    this.nbObstruction = 0,
                    this.nonVisibleReasons = "",
                    this.callBackGeometryChange = new _(O.EXCEPTION_201,(e => {
                        if (this.hasEventTimestamp(e)) {
                            const t = this.extractEventTimestamp(e);
                            this.isPastEvent(t) || F.checkDurationStatic()
                        }
                        this.hasReceivedGeometryChangeEventAtLeastOnce = !0,
                        this.sessionStart && this.sessionStart.isOMSDKForWeb() && this.sessionStart.getCreativeElement() ? (this.visibleRatio = 1,
                        O.notify(O.EXCEPTION_1341)) : this.hasPercentageInView(e) && (this.visibleRatio = this.extractPercentageInView(e)),
                        this.refreshAdSizeAndPosition(e),
                        this.refreshObstruction(e),
                        this.refreshReasons(e)
                    }
                    )),
                    this.sessionObserverCallback = new _(O.EXCEPTION_202,(e => {
                        const t = this.getEventType(e);
                        if ("sessionStart" === t) {
                            if (this.sessionStart = new _e(e),
                            this.sessionStart.getOmidParameters().length > 0) {
                                const e = this.sessionStart.getOmidParameters().replace(h.getScriptId(), "");
                                $t.handleNewTagURL(this.sessionStart.getCreativeElement(), e)
                            }
                            if (Pe.getTagCount() > 0)
                                for (let e = 0; e < Pe.getTagCount(); e++)
                                    this.registerNewTag(Pe.getTagAtIndex(e))
                        } else
                            "sessionFinish" === t ? F.trkFinalize(Ze.RR_OMID_SESSION_FINISH) : "sessionError" === t && O.notify(O.EXCEPTION_207)
                    }
                    ))
                }
                isOMIDContextWithoutCreativeAccess() {
                    return !!this.sessionStart && this.sessionStart.isOMIDContextWithoutCreativeAccess()
                }
                getEventType(e) {
                    return void 0 !== e && void 0 !== e.type ? e.type : null
                }
                registerNewTag(e) {
                    this.sessionStart && !this.hasRegisteredNewTag && (this.hasRegisteredNewTag = !0,
                    this.sessionStart.isSupportedPartner() ? (se.addEventListenerActive(this.verificationClient, "geometryChange", this.callBackGeometryChange),
                    se.addEventListenerActive(this.verificationClient, "impression", this.callBackGeometryChange),
                    this.isSdkContainerUsableCache = !0) : (O.notify(O.EXCEPTION_1306),
                    e.sendIntermediateRequest(Ze.RR_NM_REQUEST)))
                }
                init() {
                    try {
                        this.verificationClient = this.initVerificationClient(ue.getOmidVerificationClientModule()),
                        this.registerSessionObserver(this.verificationClient, this.sessionObserverCallback, ue.VENDOR_KEY),
                        "iOS" === h.getPlatform() && this.registerTimerFunction(this.verificationClient)
                    } catch (e) {
                        O.notify(O.EXCEPTION_200)
                    }
                }
                refreshSdkStatus() {}
                registerTimerFunction(e) {
                    e && m.setTimerNamespace(e)
                }
                registerSessionObserver(e, t, i) {
                    e.registerSessionObserver((e => {
                        t.setEvent(e),
                        t.execute()
                    }
                    ), i)
                }
                static getOmidVerificationClientModule() {
                    return p.getJsModule("OmidVerificationClient")
                }
                initVerificationClient(e) {
                    const t = Object.keys(e)[0]
                      , i = c.getNamespace();
                    return i.omc = new e[t],
                    i.omc
                }
                hasPercentageInView(e) {
                    return void 0 !== e && void 0 !== e.data && void 0 !== e.data.adView && void 0 !== e.data.adView.percentageInView
                }
                hasEventTimestamp(e) {
                    return void 0 !== e && void 0 !== e.timestamp
                }
                extractEventTimestamp(e) {
                    return e.timestamp
                }
                isPastEvent(e) {
                    return (new Date).valueOf() - e > 100
                }
                extractPercentageInView(e) {
                    return .01 * e.data.adView.percentageInView
                }
                refreshAdSizeAndPosition(e) {
                    if (void 0 !== e && void 0 !== e.data && void 0 !== e.data.adView) {
                        const t = e.data.adView.geometry;
                        if (void 0 !== t) {
                            const e = t.width
                              , i = t.height
                              , n = t.x
                              , s = t.y;
                            void 0 !== e && void 0 !== i && (this.adSize = new E(Math.round(e),Math.round(i))),
                            void 0 !== n && void 0 !== s && (this.adPosition = new E(Math.round(n),Math.round(s)))
                        }
                    }
                }
                refreshReasons(e) {
                    if (void 0 !== e && void 0 !== e.data && void 0 !== e.data.adView) {
                        const t = e.data.adView.reasons;
                        if (void 0 !== t && t.length > 0) {
                            let e = "";
                            for (let i = 0; i < t.length; i++)
                                e += t[i],
                                i + 1 < t.length && (e += "-");
                            this.nonVisibleReasons = e
                        }
                    }
                }
                refreshObstruction(e) {
                    if (void 0 !== e && void 0 !== e.data && void 0 !== e.data.adView) {
                        const t = e.data.adView.onScreenGeometry;
                        if (void 0 !== t && void 0 !== t.obstructions) {
                            const e = t.obstructions
                              , i = e.length;
                            if (i > 0) {
                                const t = e[i - 1]
                                  , n = t.width
                                  , s = t.height
                                  , r = t.x
                                  , o = t.y;
                                void 0 !== n && void 0 !== s && (this.adLastObstructionSize = new E(Math.round(n),Math.round(s))),
                                void 0 !== r && void 0 !== o && (this.adLastObstructionPosition = new E(Math.round(r),Math.round(o))),
                                this.nbObstruction = i
                            }
                        }
                    }
                }
                isAppSupported() {
                    return !this.sessionStart || this.sessionStart.isSupportedPartner()
                }
                static isOmidSupported() {
                    return !!ue.getOmidVerificationClientModule() && (r() ? ue.isOmidSupportedNativeJSContext() : !(Ot.isXdrViewApiHasBeenUsedAlready() && !$t.isBannerOrNativeCreative()) && (!!$t.isOmidByDefault() || !!ue.isOmidAvailableNative(c.getTopAccessibleWindow()) && $t.canHandleOmsdk()))
                }
                static isOmidSupportedNativeJSContext() {
                    return void 0 !== window.omid
                }
                static isOmidAvailableNative(e) {
                    return void 0 !== e.omid || void 0 !== window.omidVerificationProperties
                }
                isUsable() {
                    return !0
                }
                getPartnerName() {
                    return this.sessionStart ? this.sessionStart.getPartnerName() : null
                }
                getContainerType() {
                    return this.sessionStart ? this.sessionStart.isOMIDContextWithoutCreativeAccess() ? I.OM_SDK_LIMITED : I.OM_SDK_FULL : I.OM_SDK_UNKNOWN
                }
                getVisibleRatioRefreshed() {
                    return this.visibleRatio
                }
                shutDown() {
                    super.shutDown(),
                    this.sessionStart || O.notify(O.EXCEPTION_1304),
                    this.hasReceivedGeometryChangeEventAtLeastOnce || O.notify(O.EXCEPTION_1305)
                }
                isAppnexusPartner() {
                    return !!this.sessionStart && this.sessionStart.isAppnexusPartner()
                }
                setVideoListener(e) {
                    se.addEventListenerActive(this.verificationClient, "video", e)
                }
                isAsync(e) {
                    return !!this.sessionStart && this.sessionStart.isAsync(e)
                }
                getLastAdObstructionSize() {
                    return this.adLastObstructionSize
                }
                getLastAdObstructionPosition() {
                    return this.adLastObstructionPosition
                }
                getNbObstruction() {
                    return this.nbObstruction
                }
                getNonVisibleOmsdkReason() {
                    return this.nonVisibleReasons
                }
                getDebugGeometricInfo(e) {
                    const t = [];
                    return t.push("obsn" + e + this.nbObstruction),
                    this.nbObstruction > 0 && (t.push("obsx" + e + this.adLastObstructionPosition.getX()),
                    t.push("obsy" + e + this.adLastObstructionPosition.getY()),
                    t.push("obsw" + e + this.adLastObstructionSize.getX()),
                    t.push("obsh" + e + this.adLastObstructionSize.getY())),
                    t.push("adx" + e + this.adPosition.getX()),
                    t.push("ady" + e + this.adPosition.getY()),
                    t.push("adw" + e + this.adSize.getY()),
                    t.push("adh" + e + this.adSize.getY()),
                    "" !== this.getNonVisibleOmsdkReason() && t.push("nvomr" + e + this.getNonVisibleOmsdkReason()),
                    t
                }
            }
            ue.VENDOR_KEY = "appnexus.com-omid";
            class me {
                static addMraidEventListenerNative(e, t, i) {
                    const n = e => {
                        i.execute()
                    }
                    ;
                    return e.mraid.addEventListener(t, n),
                    n
                }
                static addMraidEventListenerNativeWithEvent(e, t, i) {
                    const n = e => {
                        i.setEvent(e),
                        i.execute()
                    }
                    ;
                    return e.mraid.addEventListener(t, n),
                    n
                }
                static isLoadingState(e) {
                    return "loading" === e.mraid.getState()
                }
                static hasPositionUsableNative(e) {
                    if (!me.isUsableNative(e))
                        return !1;
                    const t = e.mraid.getCurrentPosition()
                      , i = e.mraid.getScreenSize();
                    return !!t && !!i && void 0 !== t.x && void 0 !== t.y && void 0 !== t.width && void 0 !== t.height && void 0 !== i.width && void 0 !== i.height
                }
                static isUsableNative(e) {
                    return void 0 !== e.mraid && "function" == typeof e.mraid.getState && "function" == typeof e.mraid.getCurrentPosition && "function" == typeof e.mraid.getScreenSize && "function" == typeof e.mraid.isViewable && !me.isLoadingState(e)
                }
                static isMraidViewable(e) {
                    return e.mraid.isViewable()
                }
                static getVisibleRatioRefreshed() {
                    const e = c.getTopAccessibleWindow();
                    if ("hidden" === e.mraid.getState())
                        return 0;
                    if (!me.isMraidViewable(e))
                        return 0;
                    if (!me.hasPositionUsableNative(e))
                        return 0;
                    const t = e.mraid.getCurrentPosition()
                      , i = e.mraid.getScreenSize();
                    return Math.max(0, Math.min(t.x + t.width, i.width) - Math.max(t.x, 0)) * Math.max(0, Math.min(t.y + t.height, i.height) - Math.max(t.y, 0)) / (t.width * t.height)
                }
            }
            class he extends ae {
                constructor() {
                    super(...arguments),
                    this.callBackMraidReady = new d(O.EXCEPTION_169,( () => {
                        this.onReadyEvent()
                    }
                    )),
                    this.callBackViewableDataChange = new d(O.EXCEPTION_174,( () => {
                        this.refreshSdkStatus(),
                        F.checkDurationStatic()
                    }
                    ))
                }
                init() {
                    if (this.isAppSupported()) {
                        const e = c.getTopAccessibleWindow();
                        me.isLoadingState(e) ? me.addMraidEventListenerNative(e, "ready", this.callBackMraidReady) : me.addMraidEventListenerNative(e, "viewableDataChange", this.callBackViewableDataChange)
                    }
                }
                onReadyEvent() {
                    me.addMraidEventListenerNative(c.getTopAccessibleWindow(), "viewableDataChange", this.callBackViewableDataChange)
                }
                getContainerType() {
                    return I.MOPUB_SDK
                }
                isAppSupported() {
                    return u.isSafariMobile() && he.hasMraidNamespace(c.getTopAccessibleWindow())
                }
                static isAvailable(e) {
                    return !!u.elementHasDefined(e, "mopubFinishLoad") || !R.isCrossDomain() && -1 !== e.location.href.indexOf("//ads.mopub.com/")
                }
                refreshSdkStatus() {
                    if (this.isSdkContainerUsableCache || this.isAppSupported() && (R.isCrossDomain() || this.isUsable() && (this.isSdkContainerUsableCache = !0)),
                    this.isSdkContainerUsableCache)
                        try {
                            this.visibleRatio = this.getVisibleRatioRefreshed()
                        } catch (e) {
                            O.notify(O.EXCEPTION_161),
                            this.visibleRatio = 0
                        }
                }
                isUsable() {
                    return me.isUsableNative(c.getTopAccessibleWindow())
                }
                getVisibleRatioRefreshed() {
                    return me.getVisibleRatioRefreshed()
                }
            }
            class ge extends ae {
                constructor() {
                    super(...arguments),
                    this.appHasFocus = !1,
                    this.adOccluded = !1,
                    this.adOnScreenPercentage = 0,
                    this.adOpacity = 0,
                    this.hasBeenVisibleOnce = !1,
                    this.hasBeenInFocusOnce = !1,
                    this.hasReceivedViewableDataChangeEventOnce = !1,
                    this.callBackOnReady = new d(O.EXCEPTION_173,( () => {
                        this.onReadyEvent()
                    }
                    )),
                    this.callBackViewableDataChange = new _(O.EXCEPTION_175,(e => {
                        O.notify(O.EXCEPTION_1174),
                        this.hasReceivedViewableDataChangeEventOnce = !0,
                        this.refreshMicrosoftMraidStatus(e, c.getTopAccessibleWindow())
                    }
                    ))
                }
                init() {
                    if (this.isAppSupported()) {
                        const e = c.getTopAccessibleWindow();
                        if (me.isLoadingState(e))
                            try {
                                me.addMraidEventListenerNative(e, "ready", this.callBackOnReady)
                            } catch (e) {
                                O.notify(O.EXCEPTION_169)
                            }
                        else
                            this.onReadyEvent()
                    }
                }
                refreshSdkStatus() {
                    if (!this.isSdkContainerUsableCache && this.isAppSupported() && (this.isSdkContainerUsableCache = !0),
                    this.isSdkContainerUsableCache)
                        try {
                            !this.hasBeenVisibleOnce && this.adOnScreenPercentage > 0 && (this.hasBeenVisibleOnce = !0,
                            O.notify(O.EXCEPTION_1172)),
                            !this.hasBeenInFocusOnce && this.appHasFocus && (this.hasBeenInFocusOnce = !0,
                            O.notify(O.EXCEPTION_1173)),
                            this.visibleRatio = this.getVisibleRatioRefreshed()
                        } catch (e) {
                            O.notify(O.EXCEPTION_161),
                            this.visibleRatio = 0
                        }
                }
                onReadyEvent() {
                    if (this.isSdkVersionSupported(c.getTopAccessibleWindow()))
                        try {
                            me.addMraidEventListenerNativeWithEvent(c.getTopAccessibleWindow(), "viewableDataChange", this.callBackViewableDataChange)
                        } catch (e) {
                            O.notify(O.EXCEPTION_174)
                        }
                    else
                        F.sendNonMeasurableWebviewRequest()
                }
                getMapleDataForDebug() {
                    return `appHasFocus=${this.appHasFocus}&adOccluded=${this.adOccluded}&adOnScreenPercentage=${this.adOnScreenPercentage}&adOpacity=${this.adOpacity}&is_basic_visi=${this.isMraidBasicVisible(c.getTopAccessibleWindow())}&get_perc=${this.getVisibleRatio()}`
                }
                refreshMicrosoftMraidStatus(e, t) {
                    const i = JSON.parse(e);
                    this.appHasFocus = i.appHasFocus,
                    this.adOccluded = i.adOccluded,
                    this.adOnScreenPercentage = i.adOnScreenPercentage,
                    this.adOpacity = i.adOpacity,
                    this.visibleRatio = this.getVisibleRatioRefreshed(),
                    F.checkDurationStatic()
                }
                isAppSupported() {
                    const e = c.getTopAccessibleWindow();
                    return !this.hasSdkVersionAvailable(e) || this.isSdkVersionSupported(e)
                }
                hasSdkVersionAvailable(e) {
                    try {
                        return void 0 !== e.maple.getSdkVersion()
                    } catch (e) {
                        return !1
                    }
                }
                isSdkVersionSupported(e) {
                    try {
                        return void 0 !== e.maple.getSdkVersion() && e.maple.getSdkVersion().sdkVersion.split(".")[0] >= 8
                    } catch (e) {
                        return !1
                    }
                }
                static isMicrosoftSDK(e) {
                    return void 0 !== e.maple && "function" == typeof e.maple.getSdkVersion && void 0 !== e.mraid && "function" == typeof e.mraid.getState && "function" == typeof e.mraid.addEventListener
                }
                getVisibleRatioRefreshed() {
                    return !this.adOccluded && this.appHasFocus && 0 !== this.adOpacity && this.isMraidBasicVisible(c.getTopAccessibleWindow()) ? this.adOnScreenPercentage : 0
                }
                isMraidBasicVisible(e) {
                    return "hidden" !== e.mraid.getState()
                }
                isUsable() {
                    return !0
                }
                getContainerType() {
                    return I.MICROSOFT_SDK
                }
                shutDown() {
                    super.shutDown(),
                    this.isAppSupported() && this.isTrackingInitialized() && !this.hasReceivedViewableDataChangeEventOnce && O.notify(O.EXCEPTION_1175)
                }
            }
            class Ee extends ae {
                init() {
                    this.visibleRatio = 1
                }
                isAppSupported() {
                    return !0
                }
                isTrackingInitialized() {
                    return !0
                }
                getContainerType() {
                    return I.HYBRID_APP
                }
                isUsable() {
                    return !0
                }
                refreshSdkStatus() {}
                getVisibleRatioRefreshed() {
                    return 1
                }
            }
            class pe extends ae {
                constructor() {
                    super(...arguments),
                    this.callBackInitWithMraidFrequencyUpdate = new d(O.EXCEPTION_186,( () => {
                        this.refreshSdkStatus(),
                        this.updateMraidRefreshFrequency(c.getTopAccessibleWindow(), pe.mraidRefreshFrequency)
                    }
                    )),
                    this.callBackInitWithoutMraidFrequencyUpdate = new d(O.EXCEPTION_186,( () => {
                        this.refreshSdkStatus()
                    }
                    )),
                    this.callbackReadyEvent = null,
                    this.callbackStateChangedEvent = null
                }
                static initAppNexusSDKMraidContainer() {
                    pe.setMraidRefreshFrequency(pe.DEFAULT_MRAID_REFRESH_FREQUENCY);
                    const e = new pe;
                    e.init(),
                    F.setContainer(e)
                }
                init() {
                    R.isCrossDomain() || this.insertMraid();
                    const e = c.getTopAccessibleWindow()
                      , t = pe.hasMraidNamespace(e) && me.isLoadingState(e);
                    0 !== pe.mraidRefreshFrequency && u.isSafariMobile() ? t ? (this.callbackReadyEvent = me.addMraidEventListenerNative(e, "ready", this.callBackInitWithMraidFrequencyUpdate),
                    this.callbackStateChangedEvent = me.addMraidEventListenerNative(e, "stateChange", this.callBackInitWithoutMraidFrequencyUpdate)) : pe.hasMraidNamespace(e) && (this.updateMraidRefreshFrequency(e, pe.mraidRefreshFrequency),
                    this.callbackStateChangedEvent = me.addMraidEventListenerNative(e, "stateChange", this.callBackInitWithoutMraidFrequencyUpdate)) : t && (this.callbackReadyEvent = me.addMraidEventListenerNative(e, "ready", this.callBackInitWithoutMraidFrequencyUpdate),
                    this.callbackStateChangedEvent = me.addMraidEventListenerNative(e, "stateChange", this.callBackInitWithoutMraidFrequencyUpdate))
                }
                refreshSdkStatus() {
                    if (this.isSdkContainerUsableCache || this.isAppSupported() && this.isUsable() && (this.isSdkContainerUsableCache = !0),
                    this.isSdkContainerUsableCache)
                        try {
                            this.visibleRatio = this.getVisibleRatioRefreshed()
                        } catch (e) {
                            O.notify(O.EXCEPTION_161),
                            this.visibleRatio = 0
                        }
                }
                static checkAppNexusSDKContext() {
                    const e = new le;
                    F.setContainer(e),
                    pe.randomKey = u.getRandomId();
                    const t = new _(O.EXCEPTION_172,(e => {
                        if (e) {
                            const t = e;
                            pe.processAppNexusSdkPostMessage(t)
                        }
                    }
                    ))
                      , i = c.getWindow();
                    se.addEventListenerWithEventListenerWrapper(i, i, "message", t);
                    try {
                        i.top.postMessage(`anjam:Ping?cb=${pe.randomKey}`, "*")
                    } catch (e) {
                        O.notify(O.EXCEPTION_171)
                    }
                    new m(( () => {
                        if (!pe.hasInsertedAnjam()) {
                            const e = new ce;
                            F.setContainer(e),
                            F.sendNonMeasurableWebviewRequest()
                        }
                    }
                    ),O.EXCEPTION_172).schedule(pe.MAXIMUM_INIT_TIME_FOR_ANJAM)
                }
                insertMraid() {
                    try {
                        this.isAppSupported() && this.shouldInsertMraid(c.getTopAccessibleWindow()) && (this.insertMraidNative(c.getTopAccessibleWindow()),
                        O.notify(O.EXCEPTION_1165))
                    } catch (e) {
                        O.notify(O.EXCEPTION_162)
                    }
                }
                insertMraidNative(e) {
                    const t = document.createElement("script");
                    t.setAttribute("src", this.getMraidUrl()),
                    t.async = !0,
                    (e.document.head || e.document.documentElement.childNodes[0]).appendChild(t)
                }
                shouldInsertMraid(e) {
                    return void 0 === e.mraid || void 0 === e.mraid.getState || "loading" === e.mraid.getState()
                }
                isAppSupported() {
                    const e = pe.hasAnjamNamespaceNative(c.getTopAccessibleWindow())
                      , t = R.isCrossDomain() && h.getCurrentTime() - h.getInitializationTime() < pe.MAXIMUM_INIT_TIME_FOR_ANJAM;
                    return e || t
                }
                isUsable() {
                    try {
                        return this.isUsableNative(c.getTopAccessibleWindow())
                    } catch (e) {
                        O.notify(O.EXCEPTION_163)
                    }
                    return !1
                }
                hasPositionUsableNative(e) {
                    if (!this.isUsableNative(e))
                        return !1;
                    const t = e.mraid.getCurrentPosition()
                      , i = e.mraid.getScreenSize();
                    return !!t && !!i && void 0 !== t.x && void 0 !== t.y && void 0 !== t.width && void 0 !== t.height && void 0 !== i.width && void 0 !== i.height
                }
                isUsableNative(e) {
                    return void 0 !== e.mraid && "function" == typeof e.mraid.getState && "function" == typeof e.mraid.getCurrentPosition && "function" == typeof e.mraid.getScreenSize && "function" == typeof e.mraid.isViewable && !me.isLoadingState(e)
                }
                getVisibleRatioRefreshed() {
                    const e = c.getTopAccessibleWindow();
                    if ("hidden" === e.mraid.getState())
                        return 0;
                    if (!e.mraid.isViewable())
                        return 0;
                    if (!this.hasPositionUsableNative(e))
                        return 0;
                    const t = e.mraid.getCurrentPosition()
                      , i = e.mraid.getScreenSize();
                    return Math.max(0, Math.min(t.x + t.width, i.width) - Math.max(t.x, 0)) * Math.max(0, Math.min(t.y + t.height, i.height) - Math.max(t.y, 0)) / (t.width * t.height)
                }
                static hasAnjamNamespaceNative(e) {
                    return void 0 !== e.anjam && "function" == typeof e.anjam.GetVersion
                }
                getMraidUrl() {
                    return `${h.getProtocol()}://acdn.adnxs-simple.com/ib/mraid.js`
                }
                static getAnjamUrl() {
                    return "https://acdn.adnxs.com/mobile/anjam/anjam.js"
                }
                static processAppNexusSdkPostMessage(e) {
                    `sdkjs:result?caller=Ping&answer=1&cb=${pe.randomKey}` === e.data ? pe.isAnjamInserted || pe.hasAnjamNamespaceNative(c.getTopAccessibleWindow()) || (pe.insertAnjamNative(),
                    pe.isAnjamInserted = !0,
                    O.notify(O.EXCEPTION_1170),
                    pe.initAppNexusSDKMraidContainer()) : "sdkjs:ready?" === e.data && F.checkDurationStatic()
                }
                static insertAnjamNative() {
                    const e = document.createElement("script");
                    e.setAttribute("src", this.getAnjamUrl()),
                    (document.head || document.documentElement.childNodes[0]).appendChild(e)
                }
                static hasInsertedAnjam() {
                    return pe.isAnjamInserted
                }
                getContainerType() {
                    return I.APPNEXUS_SDK
                }
                static setMraidRefreshFrequency(e) {
                    pe.mraidRefreshFrequency = e
                }
                updateMraidRefreshFrequency(e, t) {
                    void 0 !== e.anjam.SetMRAIDRefreshFrequency ? e.anjam.SetMRAIDRefreshFrequency(t) : O.notify(O.EXCEPTION_1171)
                }
                removeMraidListeners() {
                    const e = c.getTopAccessibleWindow();
                    this.callbackReadyEvent && this.removeMraidListenerNative(e, "ready", this.callbackReadyEvent),
                    this.callbackStateChangedEvent && this.removeMraidListenerNative(e, "stateChange", this.callbackStateChangedEvent)
                }
                removeMraidListenerNative(e, t, i) {
                    e.mraid.removeEventListener(t, i)
                }
                shutDown() {
                    super.shutDown();
                    try {
                        this.removeMraidListeners()
                    } catch (e) {
                        O.notify(O.EXCEPTION_189)
                    }
                }
            }
            pe.MAXIMUM_INIT_TIME_FOR_ANJAM = 500,
            pe.DEFAULT_MRAID_REFRESH_FREQUENCY = 100,
            pe.mraidRefreshFrequency = 0,
            pe.isAnjamInserted = !1,
            pe.randomKey = null;
            class Te {
                constructor(e) {
                    this.data = null,
                    this.eventType = "",
                    this.eventTimestamp = -1,
                    this.eventType = this.getNativeEventType(e),
                    this.eventTimestamp = this.getNativeEventTimestamp(e),
                    this.data = this.getNativeEventData(e)
                }
                getNativeEventData(e) {
                    return void 0 !== e && void 0 !== e.data ? e.data : null
                }
                getNativePlayerStateChange(e) {
                    return e && void 0 !== e.state ? e.state : ""
                }
                getNativeDuration(e) {
                    return e && void 0 !== e.duration ? e.duration : -1
                }
                getNativeInterationType(e) {
                    return e && void 0 !== e.interactionType ? e.interactionType : ""
                }
                getNativeVolume(e) {
                    return e && "undefined" !== e.deviceVolume && "undefined" !== e.videoPlayerVolume ? e.deviceVolume * e.videoPlayerVolume : -1
                }
                getNativeEventType(e) {
                    return e.type
                }
                getNativeEventTimestamp(e) {
                    return e.timestamp
                }
                getDuration() {
                    return this.getNativeDuration(this.data)
                }
                getPlayerStateChange() {
                    return this.getNativePlayerStateChange(this.data)
                }
                getInterationType() {
                    return this.getNativeInterationType(this.data)
                }
                getVolume() {
                    return this.getNativeVolume(this.data)
                }
                getType() {
                    return this.eventType
                }
                getTimestamp() {
                    return this.eventTimestamp
                }
            }
            class _e {
                constructor(e) {
                    if (this.partnerName = "",
                    this.adSessionType = "",
                    this.accessMode = "",
                    this.omidParameters = "",
                    this.sessionStartTimestampReal = -1,
                    this.creativeElement = null,
                    this._isOMSDKForWeb = !1,
                    this.partnerVersion = "",
                    this.isValidSessionEvent(e)) {
                        this.setPartnerName(e),
                        this.setPartnerVersion(e),
                        this.setAdSessionType(e),
                        this.setOmidParameters(e),
                        this.accessMode = this.getAccessMode(e),
                        this.sessionStartTimestampReal = h.getCurrentTime(),
                        "limited" === this.accessMode && O.notify(O.EXCEPTION_1308),
                        "native" === this.adSessionType && O.notify(O.EXCEPTION_1313);
                        const t = this.getVideoElement(e);
                        t && (this.creativeElement = t),
                        this.isOMIDContextWithoutCreativeAccess() && O.notify(O.EXCEPTION_1307)
                    } else
                        O.notify(O.EXCEPTION_204)
                }
                getPartnerName() {
                    return this.partnerName
                }
                getAdSessionType() {
                    return this.adSessionType
                }
                getOmidParameters() {
                    return this.omidParameters
                }
                isValidSessionEvent(e) {
                    return void 0 !== e && void 0 !== e.data && void 0 !== e.data.context && void 0 !== e.data.context.accessMode && void 0 !== e.data.context.adSessionType && (void 0 !== e.data.context.omidNativeInfo && void 0 !== e.data.context.omidNativeInfo.partnerName || void 0 !== e.data.context.omidJsInfo && void 0 !== e.data.context.omidJsInfo.partnerName)
                }
                setPartnerName(e) {
                    let t = e.data.context.omidNativeInfo;
                    void 0 === t && (t = e.data.context.omidJsInfo,
                    void 0 !== t && (this._isOMSDKForWeb = !0)),
                    this.partnerName = t.partnerName
                }
                setPartnerVersion(e) {
                    let t = e.data.context.omidNativeInfo;
                    void 0 === t && (t = e.data.context.omidJsInfo);
                    const i = t.partnerVersion;
                    this.partnerVersion = void 0 !== i ? i : ""
                }
                setAdSessionType(e) {
                    this.adSessionType = e.data.context.adSessionType
                }
                getAccessMode(e) {
                    return e.data.context.accessMode
                }
                setOmidParameters(e) {
                    const t = e.data.verificationParameters;
                    this.omidParameters = void 0 === t ? "" : t
                }
                isSupportedPartner() {
                    return !(this.isInvalidAppnexusAndroidSdk() || this.isInvalidAppnexusIosSdk())
                }
                isAppnexusPartner() {
                    return "Appnexus" === this.partnerName || "appnexus.com-omios" === this.partnerName || "appnexus.com-omandroid" === this.partnerName || "Xandr" === this.partnerName || "Microsoft" === this.partnerName
                }
                isInvalidAppnexusIosSdk() {
                    return !("appnexus.com-omios" !== this.partnerName || !this.creativeElement || !u.isStrictlyInferiorVersion(this.partnerVersion, _e.MIN_IOS_APPNEXUS_SDK_VERSION_SUPPORTED) || (O.notify(O.EXCEPTION_1310),
                    0))
                }
                isInvalidAppnexusAndroidSdk() {
                    return !("appnexus.com-omandroid" !== this.partnerName || !this.creativeElement || !u.isStrictlyInferiorVersion(this.partnerVersion, _e.MIN_ANDROID_APPNEXUS_SDK_VERSION_SUPPORTED) || (O.notify(O.EXCEPTION_1311),
                    0))
                }
                isOMIDContextWithoutCreativeAccess() {
                    return $t.isBannerOrNativeCreative() ? "native" === this.adSessionType : "limited" === this.accessMode || !this.creativeElement
                }
                getVideoElement(e) {
                    return void 0 !== e.data.context.videoElement ? e.data.context.videoElement : null
                }
                getCreativeElement() {
                    return this.creativeElement
                }
                isAsync(e) {
                    return e < this.sessionStartTimestampReal
                }
                isOMSDKForWeb() {
                    return this._isOMSDKForWeb
                }
            }
            _e.MIN_IOS_APPNEXUS_SDK_VERSION_SUPPORTED = "6.1",
            _e.MIN_ANDROID_APPNEXUS_SDK_VERSION_SUPPORTED = "6.1.1";
            class Ie {
                static checkOuterMetrics() {
                    if (Ie.outerWindowMetricsAreNotSetOnLoad) {
                        let e = !1;
                        try {
                            e = c.getWindowOuterSize(c.getTopAccessibleWindow()).surface() > 0
                        } catch (e) {
                            O.notify(O.EXCEPTION_73)
                        }
                        e && (O.notify(O.EXCEPTION_1214),
                        Ie.outerWindowMetricsAreNotSetOnLoad = !1)
                    }
                }
                static getHybridAppContainerIfAvailable() {
                    let e = 0;
                    try {
                        e = Ie.getBrowserSurface()
                    } catch (e) {
                        O.notify(O.EXCEPTION_79)
                    }
                    if (e >= .7 && e <= 1.15) {
                        e > 1 ? O.notify(O.EXCEPTION_1212) : O.notify(O.EXCEPTION_1202);
                        const t = new Ee;
                        return t.init(),
                        t
                    }
                    return 0 === e ? O.notify(O.EXCEPTION_1201) : e > 1.15 ? O.notify(O.EXCEPTION_1211) : O.notify(O.EXCEPTION_1203),
                    null
                }
                static getBrowserSurface() {
                    const e = c.getScreenSize().surface();
                    if (e <= 0)
                        return O.notify(O.EXCEPTION_1215),
                        0;
                    const t = c.getWindowOuterSize(c.getTopAccessibleWindow());
                    if (t.surface() > 0)
                        return O.notify(O.EXCEPTION_1205),
                        t.surface() / e;
                    if (!R.isCrossDomain()) {
                        Ie.outerWindowMetricsAreNotSetOnLoad = !0;
                        const t = Ie.needInitialScaleMultiplication();
                        if (Ie.getMetaViewportContent()) {
                            const i = Ie.getViewportWidth()
                              , n = Ie.getViewportInitialScale();
                            if ("" !== i && "device-width" === i || -1 === n) {
                                if (n > 0) {
                                    const i = c.getClientSize(c.getTopAccessibleWindow()).surface() / e;
                                    return n >= 1 ? (O.notify(O.EXCEPTION_1208),
                                    i) : (O.notify(O.EXCEPTION_1209),
                                    t ? i * n * n : i)
                                }
                                return O.notify(O.EXCEPTION_1207),
                                0
                            }
                            {
                                O.notify(O.EXCEPTION_1210);
                                const i = c.getWindowSize(c.getTopAccessibleWindow());
                                return t ? i.surface() * n * n / e : i.surface() / e
                            }
                        }
                        return O.notify(O.EXCEPTION_1206),
                        0
                    }
                    return 0
                }
                static needInitialScaleMultiplication() {
                    try {
                        const e = c.getWindow()
                          , t = void 0 !== e.statusbar && !e.statusbar.visible && void 0 === e.PerformanceMeasure;
                        return t && O.notify(O.EXCEPTION_1213),
                        !t
                    } catch (e) {
                        return !0
                    }
                }
                static getMetaViewportContent() {
                    const e = c.getTopAccessibleWindow().document.getElementsByTagName("meta");
                    for (let t = 0; t < e.length; t++)
                        if ("viewport" === e[t].getAttribute("property") || "viewport" === e[t].getAttribute("name"))
                            return e[t].hasAttribute("content") ? e[t].getAttribute("content") : "";
                    return ""
                }
                static getViewportMeta(e) {
                    const t = Ie.getMetaViewportContent();
                    if (!t || -1 === t.indexOf(e))
                        return "";
                    const i = t.split(" ").join("").split(",");
                    for (let t = 0; t < i.length; t++)
                        if (-1 !== i[t].indexOf(e)) {
                            const e = i[t].split("=");
                            if (e.length > 1)
                                return e[1]
                        }
                    return ""
                }
                static getViewportWidth() {
                    return Ie.getViewportMeta("width")
                }
                static getViewportInitialScale() {
                    const e = Ie.getViewportMeta("initial-scale");
                    return "" === e ? -1 : u.isNumeric(e) ? u.parseFloat(e) : -1
                }
            }
            Ie.outerWindowMetricsAreNotSetOnLoad = !1;
            class Oe {
                static manageReferrerDetection(e) {
                    try {
                        const t = Oe.injectReferrerDetection()
                          , i = e.getParameter("rdcb");
                        i ? (O.notify(O.EXCEPTION_1320),
                        fe.sendRequestWithoutCookieAndReplaceSessionId(i + "&" + t, !1)) : O.notify(O.EXCEPTION_126)
                    } catch (e) {
                        O.notify(O.EXCEPTION_127)
                    }
                }
                static injectReferrerDetection() {
                    const e = function(e) {
                        this.rdParams = e
                    };
                    return e.prototype = {
                        constructor: e,
                        walkAncestors: function(e) {
                            try {
                                if (!window.location.ancestorOrigins)
                                    return;
                                for (let t = 0, i = window.location.ancestorOrigins.length; t < i; t++)
                                    e.call(null, window.location.ancestorOrigins[t], t)
                            } catch (e) {
                                O.notify(O.EXCEPTION_120)
                            }
                        },
                        walkUpWindows: function(e) {
                            const t = [];
                            let i = null;
                            do {
                                try {
                                    i = i ? i.parent : window,
                                    e.call(null, i, t)
                                } catch (e) {
                                    return t.push({
                                        referrer: null,
                                        location: null,
                                        isTop: !1
                                    }),
                                    t
                                }
                            } while (i !== window.top);
                            return t
                        },
                        getPubUrlStack: function(e) {
                            const t = [];
                            let i = null
                              , n = null
                              , s = null
                              , r = null
                              , o = null
                              , a = null;
                            for (let c = e.length - 1; c >= 0; c--) {
                                try {
                                    n = e[c].location
                                } catch (e) {
                                    O.notify(O.EXCEPTION_121)
                                }
                                if (n)
                                    i = encodeURIComponent(n),
                                    t.push(i),
                                    a || (a = i);
                                else if (0 !== c) {
                                    s = e[c - 1];
                                    try {
                                        r = s.referrer,
                                        o = s.ancestor
                                    } catch (e) {
                                        O.notify(O.EXCEPTION_122)
                                    }
                                    r ? (i = encodeURIComponent(r),
                                    t.push(i),
                                    a || (a = i)) : o ? (i = encodeURIComponent(o),
                                    t.push(i),
                                    a || (a = i)) : t.push(null)
                                } else
                                    t.push(null)
                            }
                            return {
                                stack: t,
                                detectUrl: a
                            }
                        },
                        getLevels: function() {
                            const e = this.walkUpWindows((function(e, t) {
                                try {
                                    t.push({
                                        referrer: e.document.referrer || null,
                                        location: e.location.href || null,
                                        isTop: e === window.top
                                    })
                                } catch (i) {
                                    t.push({
                                        referrer: null,
                                        location: null,
                                        isTop: e === window.top
                                    })
                                }
                            }
                            ));
                            return this.walkAncestors((function(t, i) {
                                e[i].ancestor = t
                            }
                            )),
                            e
                        },
                        getRefererInfo: function() {
                            let e = "";
                            try {
                                const t = this.getLevels()
                                  , i = t.length - 1
                                  , n = !!t[i].location || i > 0 && !!t[i - 1].referrer
                                  , s = this.getPubUrlStack(t);
                                e = this.rdParams.rdRef + "=" + s.detectUrl + "&" + this.rdParams.rdTop + "=" + n + "&" + this.rdParams.rdIfs + "=" + i + "&" + this.rdParams.rdStk + "=" + s.stack
                            } catch (t) {
                                e = "",
                                O.notify(O.EXCEPTION_124)
                            }
                            return e
                        }
                    },
                    function(t) {
                        let i = "";
                        try {
                            return new e({
                                rdRef: "bdref",
                                rdTop: "bdtop",
                                rdIfs: "bdifs",
                                rdStk: "bstk"
                            }).getRefererInfo()
                        } catch (e) {
                            i = "",
                            O.notify(O.EXCEPTION_125)
                        }
                        return i
                    }()
                }
            }
            class fe {
                static sendRequestWithoutCookieAndReplaceSessionId(e, t) {
                    e = e.replace("[alenty_sessionid]", g.getSessionId()),
                    fe.sendRequestWithoutCookie(e, t)
                }
                static useOmidToSendRequest() {
                    return r() || I.isOmidSdk() && Ce.hasConfigToSendRequestWithOmidApi()
                }
                static sendRequestWithoutCookie(e, t) {
                    try {
                        fe.useOmidToSendRequest() ? fe.sendRequestWithOMSDK(e) : fe.sendWithBeaconAPI(e) || fe.sendRequestWithoutCookieNative(c.getTopAccessibleWindow(), e, t)
                    } catch (e) {
                        O.notify(O.EXCEPTION_37)
                    }
                    h.getRequestSentList().push(e)
                }
                static sendWithBeaconAPI(e) {
                    return !!navigator.sendBeacon && navigator.sendBeacon(e)
                }
                static sendRequestWithOMSDK(e) {
                    const t = e.replace(/\|/g, "%7C");
                    c.getNamespace().omc.sendUrl(t)
                }
                static sendRequestWithoutCookieNative(e, t, i) {
                    const n = new XMLHttpRequest;
                    try {
                        n.open("GET", t, !i)
                    } catch (i) {
                        return void fe.sendRequestNative(e, t)
                    }
                    try {
                        n.send(null)
                    } catch (e) {
                        O.notify(O.EXCEPTION_76)
                    }
                }
                static sendRequestNative(e, t) {
                    e.document.createElement("img").src = t
                }
                static sendRequestJavascript(e, t) {
                    const i = e.document.createElement("script");
                    i.type = "text/javascript",
                    i.src = t,
                    e.document.head.appendChild(i)
                }
            }
            class Ce {
                constructor(e, t) {
                    if (this.parameters = new Map,
                    this.impressionId = h.getCurrentTime(),
                    this.tagIdentifier = ++Ce.globalTagCount,
                    this.auctionTimestampSecond = 0,
                    this.splitSeparator = ";",
                    this.partnerName = null,
                    this.referenceElement = null,
                    this.executeViewCb = !1,
                    this.referenceElement = t,
                    this.readParametersOnQueryString(e),
                    this.initABTesting(),
                    this.hasParameter("st") && (Ce.supplyTypeParameter = this.getParameter("st")),
                    this.hasParameter("ts") && (this.auctionTimestampSecond = this.getParameterInt("ts")),
                    this.hasParameter("omrqs") && (Ce._hasConfigToSendRequestWithOmidApi = "1" === this.getParameter("omrqs")),
                    this.hasParameter("native_event") && "${VIEW_NATIVE_EVENTS}" !== this.getParameter("native_event")) {
                        O.notify(O.EXCEPTION_1400);
                        try {
                            Ce.viewNativeEvents = new ve(this.getParameter("native_event"))
                        } catch (e) {
                            O.notify(O.EXCEPTION_405)
                        }
                    }
                    this.hasParameter("fire_vcb") && (this.executeViewCb = !0)
                }
                readParametersOnQueryString(e) {
                    const t = u.splitStringByRegexp(e, this.splitRegexp());
                    for (let e = 0; e < t.length; e++) {
                        const i = t[e]
                          , n = u.splitString(i, "=", 2)
                          , s = n[0];
                        if (0 === s.length)
                            continue;
                        let r;
                        if (n.length > 1) {
                            if (r = n[1],
                            0 === r.length)
                                continue
                        } else
                            r = "1";
                        this.addParameter(s, r)
                    }
                }
                splitRegexp() {
                    return ";"
                }
                addParameter(e, t) {
                    let i = this.parameters.get(e);
                    if (i || (i = [],
                    this.parameters.set(e, i)),
                    t) {
                        let e;
                        try {
                            e = u.decodeURIComponent(t)
                        } catch (i) {
                            e = t,
                            "%native_dom_id%" !== t || I.isOMIDContextWithoutCreativeAccess() || O.notify(O.EXCEPTION_113)
                        }
                        i.push(e)
                    }
                }
                getParameter(e) {
                    const t = this.parameters.get(e);
                    return t ? t[t.length - 1] : null
                }
                getParameters(e) {
                    return this.parameters.get(e)
                }
                getReferenceElement() {
                    return this.referenceElement
                }
                getCommonId() {
                    return this.tagIdentifier + "_" + this.impressionId
                }
                getParameterInt(e) {
                    const t = this.getParameter(e);
                    return t ? u.parseInt(t) : 0
                }
                hasParameter(e) {
                    return this.parameters.has(e)
                }
                setParameter(e, t) {
                    this.parameters.delete(e);
                    const i = [];
                    this.parameters.set(e, i),
                    t && i.push(t)
                }
                getDeclaredCreativeSize() {
                    let e = E.minusOne;
                    const t = this.getParameter("d");
                    if (t && -1 !== t.indexOf("x"))
                        try {
                            const i = t.split("x");
                            2 === i.length ? e = new E(parseInt(i[0], 10),parseInt(i[1], 10)) : O.notify(O.EXCEPTION_1186)
                        } catch (e) {
                            O.notify(O.EXCEPTION_1185)
                        }
                    return e
                }
                initABTesting() {
                    if (!Ce.isABTestingInitialized && (Ce.isABTestingInitialized = !0,
                    this.hasParameter("ab"))) {
                        const e = this.getParameterInt("ab")
                          , t = 100 * u.getRandom();
                        t < 2 * e && (Ce._isABTestingCaseA = t < e,
                        Ce._isABTestingCaseB = !Ce._isABTestingCaseA)
                    }
                }
                static isABTestingCaseA() {
                    return Ce._isABTestingCaseA
                }
                static isABTestingCaseB() {
                    return Ce._isABTestingCaseB
                }
                static isInAppSupplyType() {
                    return "2" === Ce.supplyTypeParameter
                }
                getAuctionTimestampSecond() {
                    return this.auctionTimestampSecond
                }
                static hasConfigToSendRequestWithOmidApi() {
                    return Ce._hasConfigToSendRequestWithOmidApi
                }
                getViewNativeEvents() {
                    return Ce.viewNativeEvents
                }
                getPartnerName() {
                    if (this.partnerName)
                        return this.partnerName;
                    if (F.getContainer()) {
                        const e = F.getContainer();
                        return e ? e.getPartnerName() : null
                    }
                    return null
                }
                shouldExecuteViewCb() {
                    return this.executeViewCb
                }
            }
            Ce.globalTagCount = 0,
            Ce.isABTestingInitialized = !1,
            Ce._isABTestingCaseA = !1,
            Ce._isABTestingCaseB = !1,
            Ce._hasConfigToSendRequestWithOmidApi = !1,
            Ce.supplyTypeParameter = null,
            Ce.viewNativeEvents = null;
            class Se extends Ce {
                constructor(e, t, i, n, s, r, o) {
                    const a = Se.isXdrViewApiInit(t);
                    if (super(a ? t.p : e, null),
                    this.duration = -1,
                    this.fullscreen = !1,
                    this.soundOn = !1,
                    Se.isElement(t))
                        this.adNode = t,
                        this.domID = "",
                        this.adUID = "";
                    else if ("string" == typeof t && "string" == typeof i && "number" == typeof s && "boolean" == typeof r && "boolean" == typeof o)
                        this.domID = t,
                        this.adUID = i,
                        this.duration = s,
                        this.soundOn = r,
                        this.fullscreen = o,
                        this.partnerName = "anxvvapi" + (n && "" !== n ? "_" + n : "");
                    else if ("string" == typeof t && "string" == typeof i && "number" == typeof s)
                        this.domID = t,
                        this.adUID = i,
                        this.duration = s,
                        this.partnerName = "anxvvapi" + (n && "" !== n ? "_" + n : "");
                    else if (a) {
                        this.adNode = t.an,
                        this.domID = t.id,
                        this.adUID = t.a,
                        this.duration = t.d ? t.d : 0,
                        this.fullscreen = !!t.fs && t.fs,
                        this.soundOn = !!t.so && t.so;
                        const e = t.imn;
                        this.partnerName = "xdrviewapi" + (e && "" !== e ? "_" + e : "")
                    }
                }
                static isElement(e) {
                    return e instanceof Element || !!e && "object" == typeof e && 1 === e.nodeType && "string" == typeof e.nodeName
                }
                static isXdrViewApiInit(e) {
                    return "object" == typeof e && null !== e && "p"in e
                }
                splitRegexp() {
                    return this.splitSeparator
                }
                getDomID() {
                    return this.domID
                }
                setDomID(e) {
                    this.domID = e
                }
                getAdUID() {
                    return this.adUID
                }
                getDuration() {
                    return this.duration
                }
                isFullscreen() {
                    return this.fullscreen
                }
                isSoundOn() {
                    return this.soundOn
                }
                readParametersOnQueryString(e) {
                    const t = e.indexOf("&");
                    if (t > -1) {
                        const i = e.indexOf(";");
                        (-1 === i || t < i) && (this.splitSeparator = "&")
                    }
                    super.readParametersOnQueryString(e),
                    "&" === this.splitSeparator && this.hasParameter("vc") && (this.splitSeparator = ";",
                    super.readParametersOnQueryString(this.getParameter("vc")),
                    this.splitSeparator = "&",
                    this.parameters.delete("vc"))
                }
                getAdNode() {
                    return this.adNode
                }
            }
            class ve {
                constructor(e) {
                    this.rawConfigString = null,
                    this.nativeEventList = [],
                    this.rawConfigString = e,
                    this.parseNativeEventParameter(this.rawConfigString)
                }
                parseNativeEventParameter(e) {
                    const t = u.splitStringByRegexp(e, "(\\||%7C)+");
                    for (let e = 0; e < t.length; e++) {
                        const i = t[e];
                        if ("|" === i || "%7C" === i)
                            continue;
                        const n = u.splitStringByRegexp(i, "~")
                          , s = n[0];
                        if (0 === s.length) {
                            O.notify(O.EXCEPTION_401);
                            continue
                        }
                        let r, o;
                        n.length > 2 ? (r = n[1],
                        o = n[2],
                        0 !== r.length ? 0 !== o.length ? this.addNativeEvent(s, r, o) : O.notify(O.EXCEPTION_403) : O.notify(O.EXCEPTION_402)) : O.notify(O.EXCEPTION_404)
                    }
                }
                addNativeEvent(e, t, i) {
                    const n = new Ne(t,e,i);
                    this.nativeEventList.push(n)
                }
                postShot(e) {
                    for (let t = 0; t < this.nativeEventList.length; t++)
                        this.nativeEventList[t].postShot(e)
                }
                getNbEvents() {
                    return this.nativeEventList.length
                }
            }
            !function(e) {
                e[e.JAVASCRIPT = 0] = "JAVASCRIPT",
                e[e.IMAGE = 1] = "IMAGE"
            }(a || (a = {}));
            class Ne {
                constructor(e, t, i) {
                    this.method = null,
                    this.callback = null,
                    this.jsSignalWhenReachDefinition = -1,
                    this.trigger = null,
                    this.triggered = !1,
                    "2" === e ? this.method = a.JAVASCRIPT : "1" === e ? this.method = a.IMAGE : (this.method = null,
                    O.notify(O.EXCEPTION_406)),
                    "1" === t ? this.jsSignalWhenReachDefinition = O.EXCEPTION_1420 : "2" === t ? (this.trigger = new st,
                    this.jsSignalWhenReachDefinition = O.EXCEPTION_1421) : "3" === t ? (this.trigger = new ct(null),
                    this.jsSignalWhenReachDefinition = O.EXCEPTION_1422) : "4" === t ? (this.trigger = new rt,
                    this.jsSignalWhenReachDefinition = O.EXCEPTION_1423) : O.notify(O.EXCEPTION_407),
                    this.callback = i
                }
                isValid() {
                    return null !== this.method && this.jsSignalWhenReachDefinition > 0 && null !== this.callback
                }
                postShot(e) {
                    this.triggered || this.isDefinitionReached(e) && (this.sendUrl(),
                    this.jsSignalWhenReachDefinition > 0 && O.notify(this.jsSignalWhenReachDefinition))
                }
                sendUrl() {
                    if (this.triggered)
                        return;
                    const e = this.callback.replace("[alenty_sessionid]", g.getSessionId());
                    if (r())
                        return fe.useOmidToSendRequest() ? (O.notify(O.EXCEPTION_409),
                        fe.sendRequestWithoutCookie(e, !1),
                        void (this.triggered = !0)) : void O.notify(O.EXCEPTION_408);
                    this.triggered = !0,
                    this.method === a.JAVASCRIPT ? fe.sendRequestJavascript(c.getTopAccessibleWindow(), e) : this.method === a.IMAGE && fe.sendRequestNative(c.getTopAccessibleWindow(), e)
                }
                isDefinitionReached(e) {
                    if (!this.trigger)
                        return !0;
                    if (!e)
                        return !1;
                    if (e.isMeasurementInitialized()) {
                        let t = null
                          , i = -1;
                        const n = e.getTag();
                        for (let e = 0; e < n.getTrackedObjectCount(); e++) {
                            const s = n.getTrackedObject(e)
                              , r = this.trigger.getDurationThreshold(s)
                              , o = this.trigger.getTrackedObjectDuration(s);
                            s.isInitialized() && o >= i && o >= r && r > 0 && (i = o,
                            t = s)
                        }
                        if (t)
                            return !0
                    }
                    return !1
                }
            }
            class Ae {
                constructor() {
                    this.highPriorityElements = [],
                    this.declaredCreativeSize = E.zero
                }
                searchVisibleElementsInSiblingAndChildren(e, t) {
                    const i = s(e)
                      , n = i && i.getAttribute("class") || "";
                    i && -1 !== n.indexOf("anx_cr_loc") && (this.highPriorityElements.push(i),
                    O.notify(O.EXCEPTION_1190));
                    let r = this.getMeasurableChildren(e, t);
                    return r = r.concat(this.searchVisibleElementsInSibling(e, t)),
                    r
                }
                searchVisibleElementsInSibling(e, t) {
                    const i = this.lookAllNodes(e, Ae.DIR_BACKWARD, t)
                      , n = this.lookAllNodes(e, Ae.DIR_FORWARD, t);
                    return i.concat(n)
                }
                searchVisibleElementsVisuallyNear(e) {
                    const t = se.getElementWindow(e)
                      , i = [];
                    let n = se.getElementsByTagName(t, "img");
                    n = n.concat(se.getElementsByTagName(t, "iframe")),
                    n = n.concat(se.getElementsByTagName(t, "video")),
                    n = n.concat(se.getElementsByTagName(t, "canvas")),
                    n = n.concat(se.getElementsByTagName(t, "object")),
                    n = n.concat(se.getElementsByTagName(t, "embed")),
                    n = n.concat(se.getElementsByTagName(t, "ft-carousel"));
                    const s = se.getOffsetSize(e)
                      , r = re.getWindowAbsolutePosition(t, e).minus(Ae.VISUAL_TOLERANCE)
                      , o = r.plus(s).plus(Ae.VISUAL_TOLERANCE).plus(Ae.VISUAL_TOLERANCE);
                    for (let s = 0; s < n.length; s++) {
                        const a = n[s];
                        a !== e && this.isElementSizeRelevant(a) && this.isVisuallyNear(a, t, r, o) && i.push(a)
                    }
                    return i
                }
                isVisuallyNear(e, t, i, n) {
                    const s = re.getWindowAbsolutePosition(t, e)
                      , r = s.getX();
                    if (r < n.getX()) {
                        const t = s.getY();
                        if (t < n.getY()) {
                            const n = se.getOffsetSize(e);
                            if (r + n.getX() > i.getX() && t + n.getY() > i.getY())
                                return !0
                        }
                    }
                    return !1
                }
                getMeasurableChildren(e, t) {
                    return this.getMeasurableChildrenInternal(e, Ae.DIR_BACKWARD, t)
                }
                getMeasurableChildrenInternal(e, t, i) {
                    let n = []
                      , s = se.getAttribute(e, "nodeName").toUpperCase();
                    const r = e.getAttribute("class") || "";
                    if ("IMG" === s) {
                        if ("" !== se.getAttribute(e, "lntfi"))
                            return n;
                        this.isElementSizeRelevant(e) && n.push(e)
                    } else if (-1 !== ["EMBED", "OBJECT", "IFRAME", "VIDEO", "CANVAS", "FT-CAROUSEL"].indexOf(s))
                        this.isElementSizeRelevant(e) && n.push(e);
                    else if (-1 !== r.indexOf("anx_cr_loc"))
                        O.notify(O.EXCEPTION_1097),
                        this.highPriorityElements.push(e);
                    else if (-1 !== r.indexOf("celtra-ad-v3") || -1 !== r.indexOf("celtra-ad-v4")) {
                        O.notify(O.EXCEPTION_1181);
                        const t = this.getCeltraObservee(e);
                        if (t)
                            O.notify(O.EXCEPTION_1182),
                            n.push(t);
                        else if (i && !e["anxceltralistener-" + i.getControlKey()]) {
                            const t = i
                              , n = new _(O.EXCEPTION_188,( () => {
                                t.doSearchElements(),
                                F.checkDurationStatic()
                            }
                            ))
                              , s = c.getWindow();
                            se.addEventListenerWithEventListenerWrapper(s, e, "celtraLoaded", n),
                            e["anxceltralistener-" + i.getControlKey()] = !0
                        }
                    } else {
                        let r = t ? oe.getFirstChild(e) : oe.getLastChild(e);
                        if (!r && this.getShadowRootNode(e)) {
                            O.notify(O.EXCEPTION_1187);
                            const i = this.getShadowRootNode(e);
                            r = t ? this.findFirstShadowChild(i) : this.findLastShadowChild(i)
                        }
                        for (; r; ) {
                            if (s = se.getAttribute(r, "nodeName").toUpperCase(),
                            this.isNodeRelevant(s)) {
                                const e = this.getMeasurableChildrenInternal(r, t, i);
                                n = n.concat(e)
                            }
                            r = t ? oe.getNextSibling(r) : oe.getPreviousSibling(r)
                        }
                    }
                    return n
                }
                getShadowRootNode(e) {
                    return e.shadowRoot
                }
                findFirstShadowChild(e) {
                    return e.firstElementChild
                }
                findLastShadowChild(e) {
                    return e.lastElementChild
                }
                lookAllNodes(e, t, i) {
                    let n = []
                      , s = e;
                    for (; s && n.length < Ae.MAX_NODES_PARSED; )
                        if (s = t ? oe.getNextSibling(s) : oe.getPreviousSibling(s),
                        s) {
                            const e = se.getAttribute(s, "nodeName").toUpperCase();
                            if (this.isNodeRelevant(e)) {
                                const e = this.getMeasurableChildrenInternal(s, t, i);
                                n = n.concat(e)
                            }
                        }
                    return n
                }
                lookForHtmlOnlyCreativeInIframeBody(e) {
                    const t = []
                      , i = c.getBodyElement(e);
                    let n = null
                      , s = E.zero;
                    if (i) {
                        let e = oe.getFirstChild(i);
                        for (; e; ) {
                            let t = se.getAttribute(e, "nodeName").toUpperCase();
                            if (this.isNodeRelevant(t)) {
                                let i = se.getMaxSize(e);
                                if (i.surface() > s.surface())
                                    s = i,
                                    n = e;
                                else if ("A" === t) {
                                    let r = oe.getFirstChild(e);
                                    for (; r; )
                                        t = se.getAttribute(r, "nodeName").toUpperCase(),
                                        this.isNodeRelevant(t) && (i = se.getMaxSize(r),
                                        i.surface() > s.surface() && (s = i,
                                        n = r)),
                                        r = oe.getNextSibling(r)
                                }
                            }
                            e = oe.getNextSibling(e)
                        }
                    }
                    return n && this.isElementSizeRelevant(n) && t.push(n),
                    t
                }
                isNodeRelevant(e) {
                    return -1 === ["SCRIPT", "NOSCRIPT", "LINK", "BR", "STYLE"].indexOf(e)
                }
                isElementSizeRelevant(e) {
                    const t = se.getMaxSize(e);
                    let i = Ae.MIN_HEIGHT;
                    const n = this.declaredCreativeSize.getY();
                    return n < Ae.MIN_HEIGHT && n >= Ae.CRITICAL_MIN_HEIGHT && (i = n - 2),
                    t.getX() > Ae.MIN_WIDTH && t.getY() > i
                }
                clean() {
                    this.highPriorityElements = []
                }
                getHighPriorityElements() {
                    return this.highPriorityElements
                }
                getCeltraObservee(e) {
                    return e.celtra && e.celtra.loaded ? e.celtra.viewabilityObservee : null
                }
                setDeclaredCreativeSize(e) {
                    this.declaredCreativeSize = e
                }
            }
            Ae.MIN_HEIGHT = 25,
            Ae.CRITICAL_MIN_HEIGHT = 10,
            Ae.MIN_WIDTH = 50,
            Ae.MAX_NODES_PARSED = 10,
            Ae.DIR_FORWARD = !0,
            Ae.DIR_BACKWARD = !1,
            Ae.VISUAL_TOLERANCE = new E(5,5);
            class $e {
                constructor() {
                    this.topLeftCorner = E.zero,
                    this.bottomRightCorner = E.zero,
                    this.topOffset = E.zero,
                    this.window = null,
                    this.child = null
                }
                refresh(e) {
                    try {
                        if (this.window && this.window === e)
                            return
                    } catch (e) {
                        O.notify(O.EXCEPTION_24)
                    }
                    this.window = e,
                    this.calculateVisibleViewportPart()
                }
                initParentViewPort(e) {
                    this.window = se.getAccessibleParentWindow(e);
                    const t = R.getWindowFrameOffset(this.window, e)
                      , i = c.getWindowScroll(e);
                    return this.topOffset = t.minus(i),
                    this.calculateVisibleViewportPart(),
                    this
                }
                calculateVisibleViewportPart() {
                    const e = c.getWindowScroll(this.window);
                    this.topLeftCorner = e.minus(this.topOffset);
                    const t = c.getWindowSize(this.window);
                    this.bottomRightCorner = this.topLeftCorner.plus(t)
                }
                createExtendedViewPort(e) {
                    const t = new $e;
                    return t.setChild(this),
                    t.initParentViewPort(e)
                }
                debug() {
                    l.debug("x1:y1 x2:y2  - " + this.topLeftCorner + ":" + this.bottomRightCorner)
                }
                getX1() {
                    return this.topLeftCorner.getX()
                }
                getY1() {
                    return this.topLeftCorner.getY()
                }
                getX2() {
                    return this.bottomRightCorner.getX()
                }
                getY2() {
                    return this.bottomRightCorner.getY()
                }
                clearCache() {
                    this.window = null
                }
                getIframeOffset() {
                    return this.topOffset
                }
                getChildIframeOffset() {
                    return this.child ? this.child.getIframeOffset() : E.zero
                }
                setChild(e) {
                    this.child = e
                }
                getWindow() {
                    return this.window
                }
            }
            class be extends $e {
                initParentViewPort(e) {
                    const t = c.getScreenPosition();
                    this.topOffset = t,
                    this.topLeftCorner = this.topOffset.opposite();
                    const i = c.getScreenSize();
                    return this.bottomRightCorner = this.topLeftCorner.plus(i),
                    this
                }
            }
            class Pe {
                static addTag(e) {
                    this.tags.push(e),
                    e.start()
                }
                static getTagCount() {
                    return this.tags.length
                }
                static removeTag(e) {
                    this.tags = this.tags.filter((t => t !== e))
                }
                static postFlushCleanup() {
                    for (let e = this.tags.length - 1; e >= 0; e--) {
                        const t = this.tags[e];
                        if (0 === t.getTrackedObjectCount()) {
                            const e = t.getTagURL().getReferenceElement();
                            !e || se.isNullOrParentNull(e) ? t.shutdown(Ze.RR_DELETE) : (O.notify(O.EXCEPTION_1008),
                            t.start())
                        }
                    }
                }
                static getTagAtIndex(e) {
                    return this.tags[e]
                }
            }
            Pe.tags = [];
            class ye {
                constructor(e, t) {
                    this.fakeImageElement = null,
                    this.trackedObjectList = [],
                    this.tagCreationTime = 0,
                    this.flushed = !1,
                    this.creationTime = h.getCurrentTime(),
                    this.timeoutShutdown = new m(( () => {
                        this.shutdown(Ze.RR_TIMEOUT)
                    }
                    )),
                    this.atLeastOneObjectInitialized = !1,
                    this.timerFirstObjectInitialized = 0,
                    this.trackedElements = [],
                    this.requestTimedToSend = [],
                    this.viewCbFired = !1,
                    this.tagURL = e,
                    this.searchStrategy = t,
                    this.scriptElement = e.getReferenceElement(),
                    this.triggerManager = this.createTriggerManager(),
                    this.initialize(),
                    this.tagCreationTime = h.getCurrentTime(),
                    this.requestFormatter = this.createRequestFormatter(),
                    this.initTimeoutShutdown(),
                    this.tagMetricAgregator = new Ye(this),
                    this.trackedElements = [];
                    const i = this.tagURL.getParameter("cb");
                    i && (h.getTagList()[i] = this.trackedElements),
                    this.triggerManager.init(this, this.createIABTrigger()),
                    u.isSafari() && (this.requestTimedToSend = this.createListOfRequestTimedToSend()),
                    I.registerNewTag(this)
                }
                createListOfRequestTimedToSend() {
                    return [3, 20, 60, 120]
                }
                createTriggerManager() {
                    return new at
                }
                initialize() {
                    ye.warnExtenalScriptTagCreated(c.getWindow())
                }
                initTimeoutShutdown() {
                    let e = ye.MAX_EXECUTION_TIME_MILLIS;
                    const t = this.tagURL.getAuctionTimestampSecond();
                    0 !== t && (e -= h.getInitializationTime() - 1e3 * t,
                    (e > ye.MAX_EXECUTION_TIME_MILLIS || e < 1e4) && (e = ye.MAX_EXECUTION_TIME_MILLIS)),
                    this.timeoutShutdown.schedule(e)
                }
                static warnExtenalScriptTagCreated(e) {
                    "function" == typeof e.lnttr && e.lnttr()
                }
                getTrackedObjectCount() {
                    return this.trackedObjectList.length
                }
                getTrackedObject(e) {
                    return this.trackedObjectList[e]
                }
                addTrackedObject(e) {
                    this.trackedObjectList.push(e);
                    try {
                        let t;
                        t = I.isOMIDContextWithoutCreativeAccess() ? new Re : bt.getUseIntersectionObserver() ? new Me : new De,
                        e.setVisibilityCalculator(t),
                        e.applyInitialization();
                        const i = F.trackingLoader.getContentPanel();
                        i && i.addContent(e)
                    } catch (e) {
                        O.notify(O.EXCEPTION_41)
                    }
                }
                addTrackedObjectAndInitialize(e, t) {
                    this.trackedObjectList.length < ye.MAX_TRACKED_OBJECTS_NUMBER && (this.addTrackedObject(e),
                    e.initVisibleElement(t))
                }
                shot() {
                    for (let e = 0; e < this.trackedObjectList.length; e++) {
                        const t = this.trackedObjectList[e];
                        try {
                            t.shot()
                        } catch (e) {
                            t.deleteAfterFlush(),
                            O.notify(O.EXCEPTION_19)
                        }
                    }
                }
                commitDuration(e) {
                    e > 0 && this.setFlushed(!1);
                    for (let t = 0; t < this.trackedObjectList.length; t++)
                        this.trackedObjectList[t].calculateAdvertising(e);
                    this.triggerManager.postShot()
                }
                getScriptElement() {
                    return this.scriptElement
                }
                getFakeImageElement() {
                    if (!this.fakeImageElement) {
                        const e = this.getScriptElement()
                          , t = R.isInHead(e) || se.isNullOrParentNull(e);
                        this.fakeImageElement = ye.createFakeImageElementNative(c.getWindow(), e, t)
                    }
                    return this.fakeImageElement
                }
                static createFakeImageElementNative(e, t, i) {
                    var n;
                    try {
                        const s = e.document.createElement("IMG");
                        return s.width = 0,
                        s.height = 0,
                        s.style.display = "block",
                        s.style.margin = "0",
                        s.style.padding = "0",
                        s.style.width = "0",
                        s.lntfi = "true",
                        i ? e.document.body.insertBefore(s, e.document.body.firstChild) : null === (n = t.parentNode) || void 0 === n || n.insertBefore(s, t),
                        s
                    } catch (e) {
                        return O.notify(O.EXCEPTION_57),
                        null
                    }
                }
                getTriggerManager() {
                    return this.triggerManager
                }
                getTagURL() {
                    return this.tagURL
                }
                getCommonId() {
                    return this.tagURL.getCommonId()
                }
                isFlushed() {
                    return this.flushed
                }
                setFlushed(e) {
                    this.flushed = e
                }
                flushContentIfNeeded() {
                    for (let e = this.requestTimedToSend.length - 1; e >= 0; e--) {
                        const t = this.requestTimedToSend[e]
                          , i = h.getCurrentTime() - this.tagCreationTime;
                        if ((!F.trackingLoader.isTrackingSupported() || F.trackingLoader.trackDisplay.isTrackingInitialized()) && i > 1e3 * t) {
                            let i = Ze.RR_XX_SECONDS_UPDATE + t;
                            i > Ze.MAX_RR_XX_SECONDS_UPDATE ? i = Ze.MAX_RR_XX_SECONDS_UPDATE : i < Ze.RR_XX_SECONDS_UPDATE && (i = Ze.RR_XX_SECONDS_UPDATE),
                            this.requestFormatter.requestFlushWithFullData(i),
                            this.requestTimedToSend.splice(e, 1)
                        }
                    }
                    this.requestFormatter.flushIfNecessary(),
                    this.setFlushed(!0);
                    for (let e = this.trackedObjectList.length - 1; e >= 0; e--) {
                        const t = this.trackedObjectList[e];
                        t.postFlushCleanup(),
                        t.hasDeleteAfterFlush() && (this.getTagMetricsAggregator().setLastDeletedTrackedObjectData(new Je(t)),
                        this.trackedObjectList.splice(e, 1))
                    }
                }
                getSearchStrategy() {
                    return this.searchStrategy
                }
                getDetectionMethod() {
                    return this.searchStrategy.getDetectionMethodCode()
                }
                isAlreadyTrackedForThisTag(e) {
                    return !!e && "" !== se.getAttribute(e, this.getControlKey())
                }
                getControlKey() {
                    return ye.LNT_CONTROL_KEY + "#" + n(this.tagURL.getCommonId())
                }
                start() {
                    this.atLeastOneObjectInitialized = !1,
                    this.addTrackedObject(this.createTrackedObject()),
                    this.searchElements(),
                    this.triggerManager.start()
                }
                sendIntermediateRequest(e) {
                    this.updateMetrics(),
                    F.trackingLoader.isTrackingSupported() && !F.trackingLoader.trackDisplay.isTrackingInitialized() || (this.requestFormatter.requestFlushWithFullData(e),
                    this.hasAtLeastOneObjectInitialized() && this.flushContentIfNeeded())
                }
                updateMetrics() {
                    this.triggerManager.postShot()
                }
                shutdown(e) {
                    this.updateMetrics(),
                    this.triggerManager.shutDown();
                    const t = F.getContainer();
                    t && t.shutDown(),
                    this.requestFormatter.requestFlushWithFullData(e),
                    this.flushContentIfNeeded(),
                    this.trackedObjectList.length = 0,
                    Pe.removeTag(this),
                    this.timeoutShutdown.cancel()
                }
                createRequestFormatter() {
                    return new Ze(this)
                }
                getFirstObject() {
                    return this.getTrackedObjectCount() > 0 ? this.getTrackedObject(0) : null
                }
                getRequestFormatter() {
                    return this.requestFormatter
                }
                getTagMetricsAggregator() {
                    return this.tagMetricAgregator
                }
                getTimeFromCreation() {
                    return h.getCurrentTime() - this.creationTime
                }
                isUnderUltimateTimeoutLimit() {
                    return this.getTimeFromCreation() <= ye.MAX_LAST_REQUEST_TIME_MILLIS
                }
                hasAtLeastOneObjectInitialized() {
                    return this.atLeastOneObjectInitialized
                }
                getTimeToHaveAtLeastOneObjectInitialized() {
                    return this.timerFirstObjectInitialized - this.tagCreationTime
                }
                getTagCreationTime() {
                    return this.tagCreationTime
                }
                getTrackedElements() {
                    return this.trackedElements
                }
                getDeclaredCreativeSize() {
                    return this.tagURL.getDeclaredCreativeSize()
                }
                hasViewCbFired() {
                    return this.viewCbFired
                }
                setViewCbFired(e) {
                    this.viewCbFired = e
                }
            }
            ye.LNT_CONTROL_KEY = c.getJSNaminglnt() + "Control",
            ye.MAX_TRACKED_OBJECTS_NUMBER = 10,
            ye.MAX_EXECUTION_TIME_MILLIS = 29e4,
            ye.MAX_LAST_REQUEST_TIME_MILLIS = 42e4;
            class De {
                constructor() {
                    this.percentVisible = 0,
                    this.isHiddenOnScreen = !1,
                    this._isOutOfViewport = !1,
                    this.position = E.minusOne,
                    this.relativePositionTopLeft = E.zero,
                    this.relativePositionBottomRight = E.zero,
                    this.bannerSize = E.minusOne,
                    this.visibleBannerSize = E.zero,
                    this._isElementRemoved = !1,
                    this.totalSurface = 0
                }
                startMeasurement(e) {
                    this.element = e,
                    this._isElementRemoved = !1,
                    this.refreshBannerSize()
                }
                refresh() {
                    if (this.percentVisible = 1,
                    this.isHiddenOnScreen = !1,
                    this._isOutOfViewport = !1,
                    !w.isReliable() || se.isNullOrParentNull(this.element))
                        return O.notify(O.EXCEPTION_1021),
                        this._isElementRemoved = !0,
                        this.percentVisible = 0,
                        void (this.isHiddenOnScreen = !0);
                    let e = se.getElementWindow(this.element);
                    if (this.isDocumentElementNotAvailable(e))
                        return this.percentVisible = 0,
                        void (this.isHiddenOnScreen = !0);
                    if (!se.isCSSvisible(e, this.element))
                        return this.percentVisible = 0,
                        void (this.isHiddenOnScreen = !0);
                    if (this.refreshBannerSize(),
                    this.relativePositionTopLeft = this.calcBannerPosition(e, this.element),
                    this.relativePositionBottomRight = this.relativePositionTopLeft.plus(this.visibleBannerSize),
                    this.totalSurface = this.visibleBannerSize.surface(),
                    1 === this.totalSurface && (this.totalSurface = 0),
                    this.position = this.relativePositionTopLeft,
                    0 === this.totalSurface)
                        return this.percentVisible = 0,
                        void (this.isHiddenOnScreen = !0);
                    let t = new $e;
                    for (t.refresh(e),
                    this.theEyeOfAlenty(t); this.percentVisible > 0 && !w.isTop(e); )
                        t = t.createExtendedViewPort(e),
                        this.theEyeOfAlenty(t),
                        e = t.getWindow();
                    this.percentVisible > 0 && w.isTop(e) && (t = F.trackingLoader.trackDisplay.createViewPortFromTop(t),
                    t && this.theEyeOfAlenty(t)),
                    this.percentVisible *= F.trackingLoader.trackDisplay.getPercentVisible(),
                    this.percentVisible <= 0 && (this._isOutOfViewport = !0)
                }
                calcBannerPosition(e, t) {
                    return re.getWindowAbsolutePosition(e, t)
                }
                theEyeOfAlenty(e) {
                    this.position = this.position.plus(e.getIframeOffset()),
                    this.relativePositionTopLeft = this.relativePositionTopLeft.plus(e.getChildIframeOffset()),
                    this.relativePositionBottomRight = this.relativePositionBottomRight.plus(e.getChildIframeOffset());
                    let t = this.relativePositionTopLeft.getX()
                      , i = this.relativePositionTopLeft.getY()
                      , n = this.relativePositionBottomRight.getX()
                      , s = this.relativePositionBottomRight.getY();
                    n <= e.getX1() || t >= e.getX2() || s <= e.getY1() || i >= e.getY2() ? (this.percentVisible = 0,
                    this._isOutOfViewport = !0) : (t = t < e.getX1() ? e.getX1() : t,
                    n = n > e.getX2() ? e.getX2() : n,
                    i = i < e.getY1() ? e.getY1() : i,
                    s = s > e.getY2() ? e.getY2() : s,
                    this.relativePositionTopLeft = new E(t,i),
                    this.relativePositionBottomRight = new E(n,s),
                    this.percentVisible = (n - t) * (s - i) / this.totalSurface)
                }
                getPercentVisible() {
                    return this.percentVisible
                }
                getPosition() {
                    const e = F.trackingLoader.getCrossDomainIframePosition();
                    let t;
                    return t = R.isCrossDomain() && !E.minusOne.equals(e) ? this.position.equals(E.minusOne) ? e : e.plus(this.position) : this.position,
                    t
                }
                isDocumentElementNotAvailable(e) {
                    return !e.document
                }
                isElementRemoved() {
                    return this._isElementRemoved
                }
                refreshBannerSize() {
                    this.bannerSize = se.getMaxSize(this.element),
                    this.visibleBannerSize = se.getOffsetSize(this.element),
                    this.visibleBannerSize.equals(E.zero) && (this.isHiddenOnScreen = !0)
                }
                getBannerSize() {
                    return this.bannerSize
                }
                isIABVisible() {
                    return this.getPercentVisible() >= this.getIABThreshold()
                }
                getIABThreshold() {
                    return this.bannerSize.surface() >= De.IAB_LARGE_FORMAT_SURFACE ? .3 : .5
                }
                isInitialized() {
                    return !0
                }
                isHiddenCreative() {
                    return this.isHiddenOnScreen
                }
                isOutOfViewport() {
                    return this._isOutOfViewport
                }
            }
            De.IAB_LARGE_FORMAT_SURFACE = 242500;
            class we extends De {
                refresh() {}
                getPercentVisible() {
                    return 1
                }
                isInitialized() {
                    return !0
                }
            }
            class Re extends De {
                refresh() {
                    const e = F.getContainer();
                    e && (this.percentVisible = e.getVisibleRatio(),
                    this.position = e.getAdPosition()),
                    this.refreshBannerSize(),
                    this._isOutOfViewport = this.percentVisible <= 0
                }
                refreshBannerSize() {
                    this.bannerSize = F.getContainer().getAdSize(),
                    this.isHiddenOnScreen = this.bannerSize.equals(E.zero)
                }
                getPercentVisible() {
                    return this.percentVisible
                }
                getPosition() {
                    return this.position
                }
                isInitialized() {
                    return !0
                }
            }
            class Me extends De {
                constructor() {
                    super(),
                    this.intersectionObserverViewabilityRate = 0,
                    this.intersectionObserver = null,
                    this._isInitialized = !0,
                    this.initTimeout = new m(( () => {
                        this._isInitialized = !0,
                        this.intersectionObserverViewabilityRate = 0,
                        this._isOutOfViewport = !0,
                        F.checkDurationStatic()
                    }
                    ),O.EXCEPTION_109),
                    O.notify(O.EXCEPTION_1003)
                }
                startMeasurement(e) {
                    if (this.intersectionObserver)
                        this.unobserve(this.intersectionObserver, this.element);
                    else {
                        const t = se.getElementWindow(e);
                        this.intersectionObserver = this.setupNative(t)
                    }
                    this.element = e,
                    this._isElementRemoved = !1,
                    super.refresh(),
                    this.percentVisible = 0,
                    this._isInitialized = !1,
                    this.observe(this.intersectionObserver, e),
                    -1 !== h.getUserAgent().indexOf("gecko") && this.requestAnimationFrame(),
                    this.initTimeout.schedule(100)
                }
                requestAnimationFrame() {
                    window.requestAnimationFrame(( () => {}
                    ))
                }
                observe(e, t) {
                    e.observe(t)
                }
                unobserve(e, t) {
                    e.unobserve(t)
                }
                refresh() {
                    if (this.isHiddenOnScreen = !1,
                    this._isOutOfViewport = !1,
                    !w.isReliable() || se.isNullOrParentNull(this.element))
                        return O.notify(O.EXCEPTION_1018),
                        this._isElementRemoved = !0,
                        this.isHiddenOnScreen = !0,
                        void (this.percentVisible = 0);
                    const e = se.getElementWindow(this.element);
                    return this.isDocumentElementNotAvailable(e) ? (this.percentVisible = 0,
                    void (this.isHiddenOnScreen = !0)) : se.isCSSvisible(e, this.element) ? (this.refreshBannerSize(),
                    this.percentVisible = this.intersectionObserverViewabilityRate * F.trackingLoader.trackDisplay.getPercentVisible(),
                    void (this._isOutOfViewport = this.percentVisible <= 0)) : (this.percentVisible = 0,
                    void (this.isHiddenOnScreen = !0))
                }
                static initOptions() {
                    const e = [];
                    let t = 101;
                    for (; t--; )
                        e[t] = t / 100;
                    return {
                        threshold: e
                    }
                }
                setupNative(e) {
                    return new e.IntersectionObserver((e => {
                        try {
                            e.forEach((e => {
                                this.processChange(e.intersectionRatio + 0)
                            }
                            )),
                            F.checkDurationStatic()
                        } catch (e) {
                            O.notify(O.EXCEPTION_21)
                        }
                    }
                    ),Me.options)
                }
                processChange(e) {
                    this.initTimeout.cancel(),
                    this._isInitialized = !0,
                    e > .99 ? e = 1 : e < .01 && (e = 0),
                    this.intersectionObserverViewabilityRate = e
                }
                isInitialized() {
                    return this._isInitialized
                }
            }
            Me.options = Me.initOptions();
            class Ve {
                constructor() {
                    this.detectionMethodAdvanced = Ve.DETECTION_METHOD_ADVANCED_NOTFOUND
                }
                searchNewVisibleElements(e) {
                    const t = this.searchNewVisibleElementsImpl(e);
                    return this.detectionMethodAdvanced === Ve.DETECTION_METHOD_ADVANCED_NOTFOUND && t.length > 0 && (this.detectionMethodAdvanced = Ve.DETECTION_METHOD_ADVANCED_DEFAULT),
                    t
                }
                ensureValidity(e) {
                    try {
                        const t = e.getVisibleElement();
                        if (t) {
                            const i = this.pointRollHack(c.getWindow(), c.getTopAccessibleWindow(), t);
                            i && (e.initVisibleElement(i),
                            O.notify(O.EXCEPTION_28))
                        }
                    } catch (e) {
                        O.notifyWithException(O.EXCEPTION_13, e)
                    }
                }
                pointRollHack(e, t, i) {
                    const n = i.id;
                    if (n && 0 === n.indexOf("pradi")) {
                        const i = "prf" + n.substr(5);
                        let s = e.document.getElementById(i);
                        if (s || (s = t.document.getElementById(i)),
                        s) {
                            const e = s.getElementsByClassName("prWrapper");
                            if (e.length > 0)
                                return e[0]
                        }
                    }
                    return null
                }
                setDetectionMethodAdvanced(e) {
                    this.detectionMethodAdvanced = e
                }
                getDetectionMethodCode() {
                    return (this.detectionMethodAdvanced !== Ve.DETECTION_METHOD_ADVANCED_NOTFOUND ? "" + this.detectionMethodAdvanced : "") + this.getDetectionMethod()
                }
                isWorking() {
                    return !0
                }
            }
            Ve.DETECTION_METHOD_ADVANCED_NOTFOUND = 0,
            Ve.DETECTION_METHOD_ADVANCED_DOUBLE_PARENTS = 1,
            Ve.DETECTION_METHOD_ADVANCED_PARENT_IFRAME = 4,
            Ve.DETECTION_METHOD_ADVANCED_VISUAL = 5,
            Ve.DETECTION_METHOD_ADVANCED_VISUAL_PARENT_IFRAME = 6,
            Ve.DETECTION_METHOD_ADVANCED_HTML_SIBLING = 8,
            Ve.DETECTION_METHOD_ADVANCED_DEFAULT = 9,
            Ve.DETECTION_METHOD_AUTO = 0,
            Ve.DETECTION_METHOD_NODEID = 1,
            Ve.DETECTION_METHOD_NODEIDCHILDREN = 2,
            Ve.DETECTION_METHOD_NODE = 3,
            Ve.DETECTION_METHOD_VIDEO = 5,
            Ve.DETECTION_METHOD_CSS_SELECTOR = 6,
            Ve.DETECTION_METHOD_OMID_LIMITED = 7,
            Ve.DETECTION_METHOD_PREBID_NATIVE = 8,
            Ve.DETECTION_METHOD_DOM_ELT_VAR = 9,
            Ve.visibleElementSeeker = new Ae;
            class Le extends Ve {
                searchNewVisibleElementsImpl(e) {
                    const t = this.getReferenceElement(e);
                    let i = [];
                    for (let n = 0; n < t.length; n++) {
                        let s = t[n];
                        if (!se.isNullOrParentNull(s)) {
                            if (R.isInIframe() && R.isInHead(s)) {
                                const e = c.getWindow();
                                s = c.getBodyElementTagNameChecked(e)
                            }
                            s && (i = i.concat(this.searchElementsImpl(e, s)))
                        }
                    }
                    return i
                }
                mayFindManyElements() {
                    return !0
                }
            }
            class xe extends Ve {
                constructor(e) {
                    super(),
                    this.domID = e
                }
                searchNewVisibleElementsImpl(e) {
                    let t = null;
                    const i = c.getWindow();
                    xe.visibleElementSeeker.setDeclaredCreativeSize(e.getDeclaredCreativeSize()),
                    this.domID && (t = oe.getWindowElementById(i, this.domID),
                    t && this.setDetectionMethodAdvanced(xe.DETECTION_METHOD_ADVANCED_DEFAULT));
                    const n = [];
                    return t && n.push(t),
                    n
                }
                mayFindManyElements() {
                    return !1
                }
                getDetectionMethod() {
                    return xe.DETECTION_METHOD_VIDEO
                }
            }
            class ke extends Ve {
                constructor(e, t) {
                    super(),
                    this.adIdParam = e,
                    this.adUnitCodeParam = t
                }
                static escapeCssSelector(e) {
                    return e.replace(/([!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~])/g, "\\$1")
                }
                searchNewVisibleElementsImpl(e) {
                    const t = [];
                    let i = null;
                    const n = c.getWindow()
                      , s = c.getTopAccessibleWindow();
                    if (this.adIdParam && "" !== this.adIdParam)
                        try {
                            const e = `.${ke.AD_ANCHOR_CLASS_NAME}[${ke.AD_DATA_ADID_ATTRIBUTE}='${this.adIdParam}']`;
                            i = R.searchByCssSelectorInAllFrames(n, s, e)
                        } catch (e) {
                            O.notify(O.EXCEPTION_191)
                        }
                    if (this.adUnitCodeParam && "" !== this.adUnitCodeParam && !i)
                        try {
                            if (i = R.searchByIdInAllFrames(n, s, this.adUnitCodeParam)[0],
                            i)
                                O.notify(O.EXCEPTION_1314);
                            else {
                                const e = ke.escapeCssSelector(this.adUnitCodeParam)
                                  , t = `iframe#${ke.GPT_ID_PREFIX}${e}${ke.GPT_ID_SUFFIX}`;
                                i = R.searchByCssSelectorInAllFrames(n, s, t),
                                i && O.notify(O.EXCEPTION_1315)
                            }
                        } catch (e) {
                            O.notify(O.EXCEPTION_192)
                        }
                    return i && t.push(i),
                    t
                }
                getDetectionMethod() {
                    return Ve.DETECTION_METHOD_PREBID_NATIVE
                }
                mayFindManyElements() {
                    return !1
                }
            }
            ke.AD_ANCHOR_CLASS_NAME = "pb-click",
            ke.AD_DATA_ADID_ATTRIBUTE = "pbadid",
            ke.GPT_ID_PREFIX = "google_ads_iframe_",
            ke.GPT_ID_SUFFIX = "_0";
            class Xe extends Le {
                constructor(e) {
                    super(),
                    this.domId = e
                }
                getDetectionMethod() {
                    return Xe.DETECTION_METHOD_NODEIDCHILDREN
                }
                searchElementsImpl(e, t) {
                    Xe.visibleElementSeeker.setDeclaredCreativeSize(e.getDeclaredCreativeSize());
                    let i = Xe.visibleElementSeeker.getMeasurableChildren(t, e);
                    const n = Xe.visibleElementSeeker.getHighPriorityElements();
                    return n.length > 0 && (i = [].concat(n)),
                    Xe.visibleElementSeeker.clean(),
                    i
                }
                getReferenceElement(e) {
                    const t = c.getWindow()
                      , i = c.getTopAccessibleWindow();
                    return R.searchByIdInAllFrames(t, i, this.domId)
                }
                mayFindManyElements() {
                    return !1
                }
            }
            class Fe extends Ve {
                constructor(e) {
                    super(),
                    this.nativeDomIdWasReplaced = !1,
                    this.domId = e,
                    this.nativeDomIdWasReplaced = -1 === this.domId.indexOf("native_dom_id")
                }
                isWorking() {
                    return this.nativeDomIdWasReplaced
                }
                searchNewVisibleElementsImpl(e) {
                    if (this.nativeDomIdWasReplaced) {
                        const t = c.getWindow()
                          , i = c.getTopAccessibleWindow();
                        Fe.visibleElementSeeker.setDeclaredCreativeSize(e.getDeclaredCreativeSize());
                        const n = R.searchByIdInAllFrames(t, i, this.domId)
                          , s = [];
                        for (let e = 0; e < n.length; e++) {
                            const t = n[e];
                            s.push(t)
                        }
                        return s
                    }
                    return []
                }
                getDetectionMethod() {
                    return Ve.DETECTION_METHOD_NODEID
                }
                mayFindManyElements() {
                    return !1
                }
                ensureValidity(e) {
                    if (se.isNullOrParentNull(e.getVisibleElement())) {
                        const t = oe.getWindowElementById(c.getWindow(), this.domId);
                        t && (O.notify(O.EXCEPTION_1019),
                        e.initVisibleElement(t))
                    }
                }
            }
            class Ue extends Ve {
                constructor(e) {
                    super(),
                    this.element = e
                }
                searchNewVisibleElementsImpl(e) {
                    const t = [];
                    return Ue.visibleElementSeeker.setDeclaredCreativeSize(e.getDeclaredCreativeSize()),
                    t.push(this.element),
                    t
                }
                getDetectionMethod() {
                    return Ve.DETECTION_METHOD_NODE
                }
                mayFindManyElements() {
                    return !1
                }
                ensureValidity(e) {
                    const t = e.getVisibleElement();
                    if (t) {
                        const i = t.id;
                        if (i) {
                            let t = null;
                            if (se.isNullOrParentNull(e.getVisibleElement()) && (t = oe.getWindowElementById(c.getWindow(), i)),
                            i.endsWith("_html5_api")) {
                                O.notify(O.EXCEPTION_1022);
                                let e = oe.getWindowElementById(c.getWindow(), i.replace("_html5_api", ""));
                                if (!e) {
                                    const t = R.searchByIdInAllFrames(c.getWindow(), c.getTopAccessibleWindow(), i.replace("_html5_api", ""));
                                    t.length > 0 && (e = t[0])
                                }
                                e && (t = e)
                            }
                            t && (O.notify(O.EXCEPTION_1020),
                            e.initVisibleElement(t))
                        }
                    }
                }
            }
            class We extends Ve {
                constructor() {
                    super(),
                    this.hasAlreadyFindElement = !1
                }
                searchNewVisibleElementsImpl(e) {
                    this.setDetectionMethodAdvanced(We.DETECTION_METHOD_ADVANCED_DEFAULT);
                    const t = [];
                    return this.hasAlreadyFindElement || (t.push(null),
                    this.hasAlreadyFindElement = !0),
                    t
                }
                mayFindManyElements() {
                    return !1
                }
                getDetectionMethod() {
                    return We.DETECTION_METHOD_OMID_LIMITED
                }
            }
            class Be extends Ve {
                constructor(e) {
                    super(),
                    this.varName = e
                }
                searchNewVisibleElementsImpl(e) {
                    const t = []
                      , i = this.getElementFromVarName();
                    return i ? t.push(i) : O.notify(O.EXCEPTION_1318),
                    t
                }
                getElementFromVarName() {
                    let e = null
                      , t = c.getWindow();
                    for (; !e && t; )
                        e = this.getNativeElementFromVarName(t, this.varName),
                        t = w.getAccessibleParentWindow(t);
                    return e
                }
                getNativeElementFromVarName(e, t) {
                    return void 0 !== e && void 0 !== e[t] ? e[t] : null
                }
                getDetectionMethod() {
                    return Ve.DETECTION_METHOD_DOM_ELT_VAR
                }
                mayFindManyElements() {
                    return !1
                }
                ensureValidity(e) {
                    if (se.isNullOrParentNull(e.getVisibleElement())) {
                        const t = this.getElementFromVarName();
                        t && (O.notify(O.EXCEPTION_1019),
                        e.initVisibleElement(t))
                    }
                }
            }
            class He extends Ve {
                constructor(e) {
                    super(),
                    this.cssSelectorParam = e
                }
                searchNewVisibleElementsImpl(e) {
                    let t = null;
                    const i = c.getWindow()
                      , n = c.getTopAccessibleWindow();
                    try {
                        t = R.searchByCssSelectorInAllFrames(i, n, this.cssSelectorParam)
                    } catch (e) {
                        O.notify(O.EXCEPTION_190)
                    }
                    if (t) {
                        const e = [];
                        return e.push(t),
                        e
                    }
                    return []
                }
                getDetectionMethod() {
                    return Ve.DETECTION_METHOD_CSS_SELECTOR
                }
                mayFindManyElements() {
                    return !1
                }
            }
            class je extends Le {
                getDetectionMethod() {
                    return je.DETECTION_METHOD_AUTO
                }
                searchElementsImpl(e, t) {
                    const i = c.getWindow();
                    je.visibleElementSeeker.setDeclaredCreativeSize(e.getDeclaredCreativeSize());
                    let n = je.visibleElementSeeker.searchVisibleElementsInSiblingAndChildren(t, e);
                    const s = je.visibleElementSeeker.getHighPriorityElements();
                    s.length > 0 ? (n = [].concat(s),
                    this.setDetectionMethodAdvanced(je.DETECTION_METHOD_ADVANCED_DEFAULT)) : n.length > 0 && this.setDetectionMethodAdvanced(je.DETECTION_METHOD_ADVANCED_DEFAULT),
                    0 === n.length && (R.isInIframe() || F.getContainer()) && (n = je.visibleElementSeeker.lookForHtmlOnlyCreativeInIframeBody(i),
                    n.length > 0 && this.setDetectionMethodAdvanced(je.DETECTION_METHOD_ADVANCED_HTML_SIBLING));
                    const r = e.getFakeImageElement();
                    if (0 === n.length && r && (n = je.visibleElementSeeker.searchVisibleElementsVisuallyNear(r),
                    n.length > 0 && this.setDetectionMethodAdvanced(je.DETECTION_METHOD_ADVANCED_VISUAL)),
                    t && !R.isInHead(t) && 0 === n.length) {
                        if (n = je.visibleElementSeeker.searchVisibleElementsInSiblingAndChildren(oe.getParent(t), e),
                        n.length > ye.MAX_TRACKED_OBJECTS_NUMBER / 2)
                            return O.notify(O.EXCEPTION_16),
                            n = [],
                            n;
                        n.length > 0 && this.setDetectionMethodAdvanced(je.DETECTION_METHOD_ADVANCED_DOUBLE_PARENTS)
                    }
                    if (0 === n.length && R.isInIframeSameDomain()) {
                        const t = w.getAccessibleParentWindow(i);
                        if (t) {
                            const s = w.getFrameElement(t, i);
                            s && (n = je.visibleElementSeeker.searchVisibleElementsInSibling(s, e),
                            n.length > 0 ? this.setDetectionMethodAdvanced(je.DETECTION_METHOD_ADVANCED_PARENT_IFRAME) : (n = je.visibleElementSeeker.searchVisibleElementsVisuallyNear(s),
                            n.length > 0 && this.setDetectionMethodAdvanced(je.DETECTION_METHOD_ADVANCED_VISUAL_PARENT_IFRAME)))
                        }
                    }
                    return je.visibleElementSeeker.clean(),
                    n
                }
                getReferenceElement(e) {
                    const t = e.getScriptElement()
                      , i = [];
                    return se.isNullOrParentNull(t) ? i.push(e.getFakeImageElement()) : i.push(t),
                    i
                }
            }
            class ze {
                constructor(e) {
                    this.visibleElement = null,
                    this.visibleElementInitialized = !1,
                    this._deleteAfterFlush = !1,
                    this.lastShotVisiblePercent = 0,
                    this._isOutOfViewportLastShot = !1,
                    this._isHiddenCreativeLastShot = !1,
                    this._isFirstInitializedFlushDone = !1,
                    this.metricsAggregator = new qe(this),
                    this.commitedDurationCache = 0,
                    this.tag = e
                }
                getIABDurationThreshold() {
                    return 1e3
                }
                applyInitialization() {}
                shot() {
                    this.visibleElementInitialized && (this.setLastShotVisiblePercent(this.getPercentVisible()),
                    this.setLastShotIsOutOfViewport(this.getVisibilityCalculator().isOutOfViewport()),
                    this.setIsHiddenCreativeLastShot(this.getVisibilityCalculator().isHiddenCreative()),
                    this.tag.getSearchStrategy().ensureValidity(this),
                    this.visibilityCalculator.refresh(),
                    this.visibilityCalculator.isElementRemoved() && this.deleteAfterFlush())
                }
                calculateAdvertising(e) {
                    e < 0 && (O.notify(O.EXCEPTION_9),
                    e = 0),
                    this.visibilityCalculator.isInitialized() ? (e += this.commitedDurationCache,
                    this.commitedDurationCache = 0) : (this.commitedDurationCache += e,
                    e = 0),
                    this.getMetricsAggregator().calculateAdvertising(e)
                }
                initVisibleElement(e) {
                    this.visibleElementInitialized = !0,
                    this._isFirstInitializedFlushDone = !1,
                    this.visibleElement = e,
                    this.tag.getTrackedElements().push(e),
                    e && se.setAttribute(e, this.tag.getControlKey(), "y"),
                    this.visibilityCalculator.startMeasurement(e),
                    this.tag.setFlushed(!1)
                }
                postFlushCleanup() {
                    this.visibleElementInitialized && (this._isFirstInitializedFlushDone = !0)
                }
                hasDeleteAfterFlush() {
                    return this._deleteAfterFlush
                }
                deleteAfterFlush() {
                    this._deleteAfterFlush = !0;
                    const e = this.tag.getTrackedElements().indexOf(this.visibleElement);
                    e > -1 && this.tag.getTrackedElements().splice(e, 1)
                }
                getVisibleElement() {
                    return this.visibleElement
                }
                getTag() {
                    return this.tag
                }
                isFirstInitializedFlushDone() {
                    return this._isFirstInitializedFlushDone
                }
                getPercentVisible() {
                    return this.visibilityCalculator.getPercentVisible()
                }
                isInitialized() {
                    return this.visibleElementInitialized
                }
                getMetricsAggregator() {
                    return this.metricsAggregator
                }
                getVisibilityCalculator() {
                    return this.visibilityCalculator
                }
                setVisibilityCalculator(e) {
                    this.visibilityCalculator = e
                }
                isIabVisible() {
                    return this.visibilityCalculator.isIABVisible()
                }
                getLastShotVisiblePercent() {
                    return this.lastShotVisiblePercent
                }
                setLastShotVisiblePercent(e) {
                    this.lastShotVisiblePercent = e
                }
                isOutOfViewportLastShot() {
                    return this._isOutOfViewportLastShot
                }
                setLastShotIsOutOfViewport(e) {
                    this._isOutOfViewportLastShot = e
                }
                isHiddenCreativeLastShot() {
                    return this._isHiddenCreativeLastShot
                }
                setIsHiddenCreativeLastShot(e) {
                    this._isHiddenCreativeLastShot = e
                }
            }
            class Ge {
                static checkSafeframeSignals() {
                    try {
                        Ge.checkSafeFrameSupport()
                    } catch (e) {
                        O.notify(O.EXCEPTION_142)
                    }
                }
                static checkJsSignals() {
                    Ge.checkGoogleDataAvailability(),
                    Ge.checkMetaRefreshTag(),
                    se.isFunctionNative(Ge.getDocumentWriteFunctionNative()) || O.notify(O.EXCEPTION_1030);
                    const e = c.getTopAccessibleWindow();
                    Ge.checkAmp(e),
                    Ge.hasMraid3Env(e) && O.notify(O.EXCEPTION_1010),
                    u.elementHasDefined(e, "ADMARVEL") && O.notify(O.EXCEPTION_1012),
                    u.elementHasDefined(e, "InmobiObj") && O.notify(O.EXCEPTION_1013),
                    u.elementHasDefined(e, "PandoraApp") && O.notify(O.EXCEPTION_1014),
                    u.elementHasDefined(e, "Adform") && O.notify(O.EXCEPTION_1015),
                    u.elementHasDefined(c.getWindow(), "omid3p") && O.notify(O.EXCEPTION_1016),
                    u.elementHasDefined(c.getWindow(), "omidVerificationProperties") && O.notify(O.EXCEPTION_1017),
                    u.elementHasDefined(c.getWindow(), "ADNXSMediation") && O.notify(O.EXCEPTION_1161),
                    R.isInIframeSameDomain() && new m(( () => {
                        this.isProbablyCollapsedAstAd() && O.notify(O.EXCEPTION_1162)
                    }
                    ),O.EXCEPTION_5).schedule(700)
                }
                static isProbablyCollapsedAstAd() {
                    try {
                        return "none" === window.frameElement.parentElement.style.display
                    } catch (e) {
                        return !1
                    }
                }
                static checkAmp(e) {
                    (void 0 !== e.location.host && -1 !== e.location.host.indexOf("ampproject.net") || void 0 !== e.document.referrer && -1 !== e.document.referrer.indexOf("ampproject.net")) && O.notify(O.EXCEPTION_1001)
                }
                static hasMraid3Env(e) {
                    return "object" == typeof e.MRAID_ENV && "string" == typeof e.MRAID_ENV.version && "3" === e.MRAID_ENV.version.charAt(0) && "." === e.MRAID_ENV.version.charAt(1)
                }
                static registerScriptStatusFunction(e) {
                    const t = e.document.lntIsScriptStatusOK;
                    e.document.lntIsScriptStatusOK = function() {
                        return (void 0 === t || t()) && Ge.isScriptStatusOk()
                    }
                    ;
                    const i = c.getNamespace();
                    i.ss = Ge.isScriptStatusOk,
                    i.st = Ge.getTimeToFindOneObjectAtLeast
                }
                static registerNewScript() {
                    c.getNamespace().n = $t.refreshContent
                }
                static registerActivityStatusFunction(e) {
                    e.document.lntActive = F.isActive,
                    e.document.lntInactiveEvent = F.inactiveEvent
                }
                static registerTrkFinalize() {
                    c.getNamespace().ff = function() {
                        F.trkFinalize(Ze.RR_API_FINALIZE)
                    }
                }
                static registerTrkForceIntermediateRequest() {
                    c.getNamespace().fir = F.sendIntermediateRequest
                }
                static getDocumentWriteFunctionNative() {
                    return window.document.write
                }
                static isScriptStatusOk() {
                    for (let e = 0; e < Pe.getTagCount(); e++)
                        if (!Pe.getTagAtIndex(e).hasAtLeastOneObjectInitialized())
                            return !1;
                    return !0
                }
                static getTimeToFindOneObjectAtLeast() {
                    for (let e = 0; e < Pe.getTagCount(); e++) {
                        const t = Pe.getTagAtIndex(e);
                        if (t.hasAtLeastOneObjectInitialized())
                            return t.getTimeToHaveAtLeastOneObjectInitialized()
                    }
                    return -1
                }
                static hasGoogleContainer() {
                    try {
                        const e = /^([^;]+);(\d+);([\s\S]*)$/.exec(window.name);
                        return !(void 0 === e || !e) && !(parseInt(e[2], 10) > e[3].length)
                    } catch (e) {
                        return !1
                    }
                }
                static checkGoogleEvent(e) {
                    if (!Ge.hasGoogleSafeframeWithGeometry) {
                        const t = e.data.toString();
                        if (t && -1 !== t.indexOf("goog_update_data")) {
                            O.notify(O.EXCEPTION_1145);
                            let e = t.indexOf("\n7=");
                            if (-1 !== e) {
                                e += 3;
                                const i = t.substring(e).indexOf("\n");
                                if (-1 !== i) {
                                    const n = t.substring(e, e + i);
                                    try {
                                        parseFloat(n),
                                        O.notify(O.EXCEPTION_1146),
                                        Ge.hasGoogleSafeframeWithGeometry = !0
                                    } catch (e) {}
                                }
                            }
                        }
                    }
                }
                static checkGoogleDataAvailability() {
                    try {
                        Ge.hasGoogleContainer() && O.notify(O.EXCEPTION_1144);
                        const e = c.getTopAccessibleWindow();
                        se.addEventListenerWithEventListenerWrapper(e, e, "message", new _(O.EXCEPTION_147,(e => {
                            if (e) {
                                const t = e;
                                Ge.checkGoogleEvent(t)
                            }
                        }
                        )))
                    } catch (e) {
                        O.notify(O.EXCEPTION_148)
                    }
                }
                static hasSafeFrameApi() {
                    return void 0 !== window.$sf
                }
                static getSafeFrameApi() {
                    return window.$sf.ext
                }
                static checkGeom(e) {
                    return void 0 === e.geom || void 0 === e.geom().self
                }
                static checkHasWinHasFocus(e) {
                    return void 0 === e.winHasFocus
                }
                static checkIsAst() {
                    return window.$sf.ast
                }
                static checkSafeFrameSupport() {
                    if (Ge.hasSafeFrameApi()) {
                        const e = Ge.getSafeFrameApi();
                        if (!e)
                            return;
                        if (O.notify(O.EXCEPTION_1140),
                        Ge.checkGeom(e))
                            return;
                        if (O.notify(O.EXCEPTION_1141),
                        Ge.checkHasWinHasFocus(e))
                            return;
                        if (O.notify(O.EXCEPTION_1143),
                        !Ge.checkIsAst())
                            return;
                        O.notify(O.EXCEPTION_1006)
                    }
                }
                static getMetaRefreshContentTag() {
                    const e = [];
                    let t = c.getWindow();
                    if (!t)
                        return e;
                    if (!R.isWindowDocumentAccessible(t))
                        return e;
                    Ge.findMetaRefreshTags(t, e);
                    let i = t.parent
                      , n = 0;
                    for (; i && i !== t; ) {
                        if (t = i,
                        i = t.parent,
                        !R.isWindowDocumentAccessible(t))
                            return e;
                        if (Ge.findMetaRefreshTags(t, e),
                        n++,
                        n > 10)
                            return O.notify(O.EXCEPTION_153),
                            e
                    }
                    return e
                }
                static findMetaRefreshTags(e, t) {
                    const i = se.getElementsByTagName(e, "meta");
                    for (let e = 0; e < i.length; e++) {
                        const n = i[e]
                          , s = n.getAttribute("http-equiv");
                        s && "refresh" === s && t.push(n)
                    }
                }
                static checkMetaRefreshTag() {
                    try {
                        if (!Ge.hasFoundMetaRefreshTagLess60s) {
                            const e = Ge.getMetaRefreshContentTag();
                            if (e.length > 0) {
                                O.notify(O.EXCEPTION_1150);
                                for (let t = 0; t < e.length; t++) {
                                    const i = e[t].getAttribute("content");
                                    if (i) {
                                        const e = Ge.getMetaRefreshTimer(i);
                                        e && parseInt(e, 10) <= 60 && (O.notify(O.EXCEPTION_1151),
                                        Ge.hasFoundMetaRefreshTagLess60s = !0)
                                    }
                                }
                            }
                        }
                    } catch (e) {
                        O.notify(O.EXCEPTION_152)
                    }
                }
                static getMetaRefreshTimer(e) {
                    const t = /^(\s*)(\d+)/.exec(e);
                    return t && t.length >= 2 ? t[2] : null
                }
            }
            Ge.hasGoogleSafeframeWithGeometry = !1,
            Ge.hasFoundMetaRefreshTagLess60s = !1;
            class qe {
                constructor(e) {
                    this.pageDuration = 0,
                    this.time000PercentVisible = 0,
                    this.time025PercentVisible = 0,
                    this.time050PercentVisible = 0,
                    this.time075PercentVisible = 0,
                    this.time100PercentVisible = 0,
                    this.iabDuration = 0,
                    this.iabConsecutiveDuration = 0,
                    this.iabDurationSinceLastIAB = 0,
                    this.iabInviewCount = 0,
                    this.hasBeenIABViewable = !1,
                    this.maxBannerSize = E.minusOne,
                    this.maxVisibleSurface = -1,
                    this.maxPosition = null,
                    this.trackedObject = e
                }
                calculateAdvertising(e) {
                    if (!this.trackedObject.isInitialized())
                        return;
                    if (e > 0) {
                        const t = this.trackedObject.getPercentVisible();
                        t > this.maxVisibleSurface && (this.maxVisibleSurface = t),
                        this.pageDuration += e,
                        t > 0 && (this.time000PercentVisible += e,
                        t >= .25 && (this.time025PercentVisible += e,
                        t >= .5 && (this.time050PercentVisible += e,
                        t >= .75 && (this.time075PercentVisible += e,
                        t >= 1 && (this.time100PercentVisible += e))))),
                        this.trackedObject.isIabVisible() && (this.iabDuration += e),
                        this.computedConsecutiveIABViewability(e)
                    }
                    const t = this.trackedObject.getVisibilityCalculator()
                      , i = t.getBannerSize();
                    this.maxBannerSize = this.maxBannerSize.max(i);
                    const n = this.maxPosition;
                    this.maxPosition = n ? n.max(t.getPosition()) : t.getPosition()
                }
                getIABVisible() {
                    return this.iabDuration > 0
                }
                computedConsecutiveIABViewability(e) {
                    this.trackedObject.isIabVisible() ? this.iabDurationSinceLastIAB += e : (this.iabDurationSinceLastIAB = 0,
                    this.hasBeenIABViewable = !1),
                    this.iabDurationSinceLastIAB >= this.trackedObject.getIABDurationThreshold() && (this.hasBeenIABViewable ? this.iabConsecutiveDuration += e : (this.iabInviewCount++,
                    this.iabConsecutiveDuration += this.iabDurationSinceLastIAB),
                    this.hasBeenIABViewable = !0)
                }
                getPageDuration() {
                    return this.pageDuration
                }
                getTime000PercentVisible() {
                    return this.time000PercentVisible
                }
                getTime025PercentVisible() {
                    return this.time025PercentVisible
                }
                getTime050PercentVisible() {
                    return this.time050PercentVisible
                }
                getTime075PercentVisible() {
                    return this.time075PercentVisible
                }
                getTime100PercentVisible() {
                    return this.time100PercentVisible
                }
                getIABDuration() {
                    return this.iabDuration
                }
                getConsecutiveIABDuration() {
                    return this.iabConsecutiveDuration
                }
                getIABInviewCount() {
                    return this.iabInviewCount
                }
                getMaxBannerSize() {
                    return this.maxBannerSize
                }
                getMaxVisibleSurface() {
                    return this.maxVisibleSurface
                }
                getPosition() {
                    return this.maxPosition
                }
            }
            class Ke extends qe {
                constructor(e) {
                    super(e),
                    this.videoGroupMVisibleDuration = 0,
                    this.audio100PercentDuration = 0
                }
                calculateAdvertising(e) {
                    super.calculateAdvertising(e),
                    ot.isGroupMVisible(this.getVideoTrackedObject()) && (this.videoGroupMVisibleDuration += e),
                    this.trackedObject.getPercentVisible() >= 1 && 1 === this.getVideoTrackedObject().getTag().getSoundState() && (this.audio100PercentDuration += e)
                }
                getVideoTrackedObject() {
                    return this.trackedObject
                }
                getVideoGroupMVisibleDuration() {
                    return this.videoGroupMVisibleDuration
                }
                getAudio100PercentDuration() {
                    return this.audio100PercentDuration
                }
            }
            class Ye {
                constructor(e) {
                    this.pageDuration = 0,
                    this.lastDeletedTrackedObjectData = null,
                    this.tag = e
                }
                calculateAdvertising(e) {
                    e < 0 && (O.notify(O.EXCEPTION_129),
                    e = 0),
                    this.pageDuration += e
                }
                getPageDuration() {
                    return this.pageDuration
                }
                getTrackingDuration() {
                    let e = h.getCurrentTime() - this.tag.getTagCreationTime();
                    return e < 0 && (O.notify(O.EXCEPTION_128),
                    e = 0),
                    e
                }
                getLastDeletedTrackedObjectData() {
                    return this.lastDeletedTrackedObjectData
                }
                setLastDeletedTrackedObjectData(e) {
                    this.lastDeletedTrackedObjectData = e
                }
            }
            class Je {
                constructor(e) {
                    this._isHiddenCreative = e.isHiddenCreativeLastShot(),
                    this._isOutOfViewport = e.isOutOfViewportLastShot();
                    const t = e.getMetricsAggregator()
                      , i = e.getTag().getTriggerManager().getIabTrigger()
                      , n = i.getDurationThreshold(e)
                      , s = i.getTrackedObjectDuration(e)
                      , r = t.getTime000PercentVisible()
                      , o = e.getLastShotVisiblePercent();
                    this._isIABVisibleWithoutDurationThreshold = s > 0 && s < n && o > 0,
                    this._isVisibleWithoutIABSurfaceThreshold = 0 === s && r > 0 && o > 0 && o < n
                }
                isHiddenCreative() {
                    return this._isHiddenCreative
                }
                isOutOfViewport() {
                    return this._isOutOfViewport
                }
                isIABVisibleWithoutDurationThreshold() {
                    return this._isIABVisibleWithoutDurationThreshold
                }
                isVisibleWithoutIABSurfaceThreshold() {
                    return this._isVisibleWithoutIABSurfaceThreshold
                }
            }
            class Qe extends ye {
                constructor(e, t) {
                    super(e, t),
                    this.soundState = -1,
                    this.creativeDuration = 0,
                    this.adUID = e.getAdUID(),
                    this.onDurationReceived(e.getDuration()),
                    e.isSoundOn() && (this.soundState = 1),
                    Oe.manageReferrerDetection(e)
                }
                createTriggerManager() {
                    return new lt
                }
                createRequestFormatter() {
                    return new et(this)
                }
                createTrackedObject() {
                    return new it(this)
                }
                searchElements() {
                    this.doSearchElements()
                }
                doSearchElements() {
                    if (!this.atLeastOneObjectInitialized && this.getTrackedObjectCount() > 0) {
                        const e = this.searchStrategy.searchNewVisibleElements(this);
                        if (e.length > 0) {
                            const t = e[0];
                            this.isAlreadyTrackedForThisTag(t) || (this.getFirstObject().initVisibleElement(t),
                            this.atLeastOneObjectInitialized = !0,
                            this.timerFirstObjectInitialized = h.getCurrentTime())
                        }
                    }
                }
                getAdUID() {
                    return this.adUID
                }
                createIABTrigger() {
                    return new rt
                }
                getTagURL() {
                    return this.tagURL
                }
                onSoundOnEvent() {
                    this.soundState = 1
                }
                onSoundOffEvent() {
                    this.soundState = 0
                }
                getSoundState() {
                    return this.soundState
                }
                hasReceivedSoundState() {
                    return -1 !== this.soundState
                }
                onDurationReceived(e) {
                    this.creativeDuration = e
                }
                hasCreativeDuration() {
                    return this.creativeDuration > 0
                }
                getCreativeDuration() {
                    return this.creativeDuration
                }
                getCreativeDurationMilliseconds() {
                    return 1e3 * this.creativeDuration
                }
            }
            class Ze {
                constructor(e) {
                    this.shouldFlush = !1,
                    this._isFirstRequest = !0,
                    this.shouldIncludeFullData = !1,
                    this.trackedObject = null,
                    this.lastTrackedObject = null,
                    this.requestReason = -1,
                    this.tag = e,
                    this.callbackUrl = e.getTagURL().getParameter("cb") || ""
                }
                getDimensionParameters() {
                    const e = c.getTopAccessibleWindow()
                      , t = c.getScreenSize()
                      , i = c.getPageSize(e)
                      , n = c.getWindowSize(e);
                    return `&sw=${t.getX()}&sh=${t.getY()}&pw=${i.getX()}&ph=${i.getY()}&ww=${n.getX()}&wh=${n.getY()}`
                }
                getContextParameters() {
                    const e = h.getScriptVersion()
                      , t = h.getUserAgent()
                      , i = this.tag.getTagURL();
                    let n = `&sv=${e}&tv=${i.getParameter("tv") || ""}&ua=${t}&pl=${h.getPlatform()}&x=${h.getScriptId()}`;
                    const s = i.getParameter("tag_id");
                    return s && (n += `&tag_id=${s}`),
                    n
                }
                formatDimensionParameters(e) {
                    const t = e.getMetricsAggregator();
                    let i = "";
                    const n = t.getPosition();
                    n && !n.equals(E.minusOne) && (i += `&px=${n.getX()}&py=${n.getY()}`);
                    const s = t.getMaxBannerSize();
                    if (s.equals(E.minusOne) || (i += `&bw=${s.getX()}&bh=${s.getY()}`),
                    F.trackingLoader.isTrackingSupported()) {
                        const e = u.rounded2Decimals(t.getMaxVisibleSurface());
                        e >= 0 && (i += `&sf=${e}`)
                    }
                    return i
                }
                getDurationParameters() {
                    const e = this.tag.getTagMetricsAggregator()
                      , t = e.getPageDuration()
                      , i = e.getTrackingDuration()
                      , n = this.trackedObject.getMetricsAggregator();
                    let s = `&pd=${u.getSecondsFromMillisWith2Decimal(t)}&d=${u.getSecondsFromMillisWith2Decimal(i)}`;
                    return this.tag.getTriggerManager().isMeasurementInitialized() && (s += `&id=${u.getSecondsFromMillisWith2Decimal(n.getConsecutiveIABDuration())}&ic=${n.getIABInviewCount().toString()}&d0=${u.getSecondsFromMillisWith2Decimal(n.getTime000PercentVisible())}&d25=${u.getSecondsFromMillisWith2Decimal(n.getTime025PercentVisible())}&d50=${u.getSecondsFromMillisWith2Decimal(n.getTime050PercentVisible())}&d75=${u.getSecondsFromMillisWith2Decimal(n.getTime075PercentVisible())}&d100=${u.getSecondsFromMillisWith2Decimal(n.getTime100PercentVisible())}`),
                    s
                }
                shouldExecuteViewCb(e) {
                    return this.tag.getTagURL().shouldExecuteViewCb() && !this.tag.hasViewCbFired() && e !== Ze.RR_FIRST_REQUEST
                }
                static triggerViewStateChange(e, t, i, n) {
                    if ("function" == typeof e._lntViewStateChange)
                        try {
                            let s, r;
                            if (-1 !== i.indexOf("&")) {
                                const e = i.split("&");
                                s = e[0],
                                r = e[1].split("=")[1]
                            } else
                                s = i,
                                r = null;
                            const o = {
                                tagId: t,
                                viewState: s,
                                type: r,
                                exceptions: c.getNamespace().e,
                                requestReason: n
                            };
                            e._lntViewStateChange(o),
                            O.notify(O.EXCEPTION_1500)
                        } catch (e) {
                            O.notify(O.EXCEPTION_1501)
                        }
                    else
                        O.notify(O.EXCEPTION_1502)
                }
                sendRequest() {
                    let e = "";
                    this.trackedObject || (this.trackedObject = this.tag.getFirstObject());
                    const t = O.getRequestPart();
                    "" !== t && (e += `&jm=${t}`),
                    this.trackedObject && (e += this.formatDimensionParameters(this.trackedObject)),
                    e += `&sid=${g.getSessionId()}${this.getViewabilityDataParameter()}${this.getContextParameters()}`;
                    const i = this.tag.getTriggerManager()
                      , n = i.getViewResult()
                      , s = i.getCustomViewResult();
                    if (s && (e += `&cid=${i.getCustomTrigger().getId()}&cr=${s}`),
                    this._isFirstRequest && (this._isFirstRequest = !1,
                    this.requestReason = Ze.RR_FIRST_REQUEST,
                    r() || (e += this.getDimensionParameters())),
                    e += this.getAllRequestsExtraParameters(),
                    this.shouldIncludeFullData && (u.isMobile() && (this.lastTrackedObject ? this.trackedObject = this.lastTrackedObject : this.lastTrackedObject = this.trackedObject),
                    e += this.getDurationParameters()),
                    "" === this.callbackUrl)
                        O.notify(O.EXCEPTION_111);
                    else {
                        const t = R.getFrameType().toString();
                        fe.sendRequestWithoutCookie(`${this.callbackUrl}&type=${n}${e}&ft=${t}`, this.shouldIncludeFullData)
                    }
                    this.shouldExecuteViewCb(this.requestReason) && (Ze.triggerViewStateChange(c.getWindow(), this.tag.getTagURL().getParameter("tag_id") || "", n, this.requestReason),
                    this.tag.setViewCbFired(!0)),
                    this.shouldFlush = !1,
                    this.requestReason = -1
                }
                getAllRequestsExtraParameters() {
                    return ""
                }
                getViewabilityDataParameter() {
                    const e = []
                      , t = this.tag.getTagURL();
                    Ce.isABTestingCaseA() ? e.push("ab~1") : Ce.isABTestingCaseB() && e.push("ab~2"),
                    e.push(`ct~${I.getContainerType()}`);
                    let i = "";
                    const n = F.getContainer();
                    if (n) {
                        const e = n.getDebugGeometricInfo("~");
                        e.length > 0 && (i = `|${e.join("|")}`)
                    }
                    const s = t.getPartnerName();
                    if (s)
                        try {
                            e.push(`pn~${I.cleanPartnerNameCharacters(s)}`)
                        } catch (e) {
                            O.notify(O.EXCEPTION_205)
                        }
                    return e.push(`rr~${this.requestReason}`),
                    this.shouldIncludeFullData && e.push(`dm~${this.tag.getDetectionMethod()}`),
                    `&vd=${e.join("|")}${i}`
                }
                requestFlushWithFullData(e) {
                    this.shouldIncludeFullData = !0,
                    this.requestFlush(e)
                }
                setTrackedObject(e) {
                    this.trackedObject = e
                }
                flushIfNecessary() {
                    this.shouldFlush && this.tag.isUnderUltimateTimeoutLimit() && this.sendRequest()
                }
                requestFlush(e) {
                    this.requestReason = e,
                    this.shouldFlush = !0
                }
                isFirstRequest() {
                    return this._isFirstRequest
                }
            }
            Ze.RR_FIRST_REQUEST = 0,
            Ze.RR_NM_REQUEST = 2,
            Ze.RR_CUSTOM_NM_REQUEST = 3,
            Ze.RR_PV_REQUEST = 5,
            Ze.RR_CUSTOM_PV_REQUEST = 6,
            Ze.RR_MOBILE_INTERMEDIATE_REQUEST = 8,
            Ze.RR_XX_SECONDS_UPDATE = 100,
            Ze.MAX_RR_XX_SECONDS_UPDATE = 299,
            Ze.RR_DELETE = 314,
            Ze.RR_API_FINALIZE = 316,
            Ze.RR_CLIP_INTERRUPT = 317,
            Ze.RR_CLIP_STOP = 318,
            Ze.RR_PAGE_HIDE_REQUEST = 319,
            Ze.RR_BEFORE_UNLOAD_REQUEST = 320,
            Ze.RR_UNLOAD_REQUEST = 321,
            Ze.RR_TIMEOUT = 322,
            Ze.RR_OMID_SESSION_FINISH = 323;
            class et extends Ze {
                constructor(e) {
                    super(e)
                }
                getAllRequestsExtraParameters() {
                    let e = super.getAllRequestsExtraParameters();
                    const t = this.tag;
                    return t.hasCreativeDuration() && (e += "&cd=" + u.getSecondsFromMillisWith2Decimal(t.getCreativeDurationMilliseconds())),
                    e
                }
                getDurationParameters() {
                    let e = super.getDurationParameters();
                    if (this.trackedObject && this.trackedObject.isInitialized() && F.trackingLoader.isTrackingSupported() && this.tag.hasReceivedSoundState()) {
                        const t = this.trackedObject.getMetricsAggregator().getAudio100PercentDuration();
                        e += "&a100=" + u.getSecondsFromMillisWith2Decimal(t)
                    }
                    return e
                }
            }
            class tt extends ye {
                constructor(e, t) {
                    super(e, t),
                    this.lastSearchTime = 0,
                    this.searchCount = 0
                }
                searchElements() {
                    const e = this.hasAtLeastOneObjectInitialized() ? 950 : 450;
                    h.getCurrentTime() - this.lastSearchTime > e && this.doSearchElements(),
                    1 !== this.searchCount || this.hasAtLeastOneObjectInitialized() || c.isHiddenWithWindow(c.getTopAccessibleWindow()) || new m(( () => {
                        this.doSearchElements(),
                        F.checkDurationStatic()
                    }
                    ),O.EXCEPTION_39).schedule(1)
                }
                doSearchElements() {
                    if (this.lastSearchTime = h.getCurrentTime(),
                    this.searchCount++,
                    !w.isReliable())
                        return;
                    if (this.hasAtLeastOneObjectInitialized() && (!this.searchStrategy.mayFindManyElements() || this.lastSearchTime - this.getTagCreationTime() >= 5e3))
                        return;
                    const e = this.searchStrategy.searchNewVisibleElements(this);
                    if (0 !== e.length) {
                        if (this.getTrackedObjectCount() > 0)
                            for (; !this.hasAtLeastOneObjectInitialized() && e.length > 0; ) {
                                const t = e.shift();
                                this.isAlreadyTrackedForThisTag(t) || (this.getFirstObject().initVisibleElement(t),
                                this.atLeastOneObjectInitialized = !0,
                                this.timerFirstObjectInitialized = h.getCurrentTime())
                            }
                        this.createTrackedObjects(e)
                    }
                }
                createTrackedObjects(e) {
                    for (; e.length > 0; ) {
                        const t = e.shift();
                        this.isAlreadyTrackedForThisTag(t) || this.addTrackedObjectAndInitialize(this.createTrackedObject(), t)
                    }
                }
                createTrackedObject() {
                    return new ze(this)
                }
                createIABTrigger() {
                    return new st
                }
                commitDuration(e) {
                    super.commitDuration(e),
                    this.tagMetricAgregator.calculateAdvertising(e)
                }
            }
            class it extends ze {
                constructor(e) {
                    super(e),
                    this.lastPlayDate = 0,
                    this.userActive = !0,
                    this.playing = !1,
                    this.durationPart = 0,
                    this.lastDurationAddedDate = 0,
                    this.oldVisibilityCalculator = null,
                    this.metricsAggregator = new Ke(this),
                    this.firstShot = !0,
                    it.instreamAPITrackedObjectList.push(this),
                    F.trackingLoader.refreshActivity()
                }
                onClipPlayEvent(e) {
                    this.playing || (this.tag.getTriggerManager().onPlay(),
                    this.playing = !0,
                    this.lastPlayDate = e,
                    this.userActive = F.isActive(),
                    this.lastDurationAddedDate = 0)
                }
                onClipResumeEvent(e) {
                    this.playing || (this.playing = !0,
                    this.lastPlayDate = e,
                    this.userActive = F.isActive(),
                    this.lastDurationAddedDate = 0)
                }
                getVideoGroupMTrigger() {
                    return this.tag.getTriggerManager().getVideoGroupMTrigger()
                }
                onClipPauseEvent(e) {
                    this.playing && (this.playing = !1,
                    this.manageStopPlaying(e))
                }
                onClipStopEvent(e, t) {
                    this.playing && (this.playing = !1,
                    this.manageStopPlaying(e),
                    this.deleteAfterFlush(),
                    t || this.tag.shutdown(Ze.RR_CLIP_STOP))
                }
                onClipInterruptEvent(e, t) {
                    this.playing && (this.playing = !1,
                    this.manageStopPlaying(e),
                    this.deleteAfterFlush(),
                    t || this.tag.shutdown(Ze.RR_CLIP_INTERRUPT))
                }
                manageStopPlaying(e) {
                    0 === this.lastDurationAddedDate ? this.lastPlayDate > 0 && (this.durationPart += e - this.lastPlayDate) : this.durationPart += e - this.lastDurationAddedDate
                }
                calculateAdvertising(e) {
                    let t = e;
                    this.playing ? (this.lastPlayDate > 0 && (t = this.durationPart + h.getCurrentTime() - this.lastPlayDate,
                    this.lastPlayDate = 0,
                    this.durationPart = 0),
                    this.firstShot && !this.userActive && (t = 0)) : this.durationPart > 0 ? (t = this.durationPart,
                    this.durationPart = 0) : t = 0,
                    this.getTag().getTagMetricsAggregator().calculateAdvertising(t),
                    super.calculateAdvertising(t),
                    t > 0 && (this.firstShot = !1,
                    this.lastDurationAddedDate = F.trackingLoader.getLastShotTime())
                }
                onFullscreenOn() {
                    this.oldVisibilityCalculator = this.getVisibilityCalculator(),
                    this.setVisibilityCalculator(new we),
                    this.userActive = !0,
                    N.onActiveEvent()
                }
                onFullscreenOff() {
                    this.oldVisibilityCalculator && (this.setVisibilityCalculator(this.oldVisibilityCalculator),
                    this.userActive = F.isActive())
                }
                getTag() {
                    return this.tag
                }
                static getInstreamAPITrackedObjectList() {
                    return it.instreamAPITrackedObjectList
                }
                deleteAfterFlush() {
                    super.deleteAfterFlush();
                    const e = it.instreamAPITrackedObjectList.indexOf(this);
                    e > -1 && it.instreamAPITrackedObjectList.splice(e, 1)
                }
                getIABDurationThreshold() {
                    return 2e3
                }
                getMetricsAggregator() {
                    return this.metricsAggregator
                }
            }
            it.instreamAPITrackedObjectList = [];
            class nt {
                constructor(e) {
                    this.id = e
                }
                getTrackedObjectDuration(e) {
                    throw new Error("Method not implemented.")
                }
                getDurationThreshold(e) {
                    throw new Error("Method not implemented.")
                }
                getId() {
                    return this.id
                }
                isMeasurable(e) {
                    return !0
                }
            }
            class st {
                getDurationThreshold(e) {
                    return st.DURATION_THRESHOLD
                }
                getTrackedObjectDuration(e) {
                    return e.getMetricsAggregator().getIABDuration()
                }
            }
            st.DURATION_THRESHOLD = 1e3;
            class rt extends st {
                getDurationThreshold(e) {
                    return rt.DURATION_THRESHOLD_VIDEO
                }
            }
            rt.DURATION_THRESHOLD_VIDEO = 2e3;
            class ot extends nt {
                constructor(e) {
                    super(e)
                }
                getDurationThreshold(e) {
                    const t = e;
                    if (t.getTag().hasCreativeDuration()) {
                        const e = ot.SPOT_DURATION_FRACTION_REQUIRED * t.getTag().getCreativeDurationMilliseconds();
                        return e > ot.FIFTEEN_SECONDS_IN_MILLI ? ot.FIFTEEN_SECONDS_IN_MILLI : e
                    }
                    return 0
                }
                getTrackedObjectDuration(e) {
                    return e.getMetricsAggregator().getVideoGroupMVisibleDuration()
                }
                isMeasurable(e) {
                    const t = e;
                    return !ot.isInstreamOrUnknownContext(t) || t.hasReceivedSoundState()
                }
                static isGroupMVisible(e) {
                    const t = e.getTag().hasCreativeDuration()
                      , i = e.getPercentVisible()
                      , n = e.getTag();
                    let s = ot.SURFACE_FRACTION_REQUIRED;
                    if (e.getVisibilityCalculator().getBannerSize().surface() >= ot.GROUPM_LARGE_FORMAT_SURFACE && !u.isMobile() && (s = ot.SURFACE_FRACTION_REQUIRED_LARGE_FORMAT),
                    ot.isInstreamOrUnknownContext(n)) {
                        const n = 1 === e.getTag().getSoundState();
                        return i >= s && t && n
                    }
                    return i >= s && t
                }
                static isInstreamOrUnknownContext(e) {
                    if (e.getTagURL().hasParameter("vctx")) {
                        const t = e.getTagURL().getParameterInt("vctx");
                        return -1 !== [ot.PREROLL_METHOD_ID_VIDEO_CONTEXT, ot.MIDROLL_METHOD_ID_VIDEO_CONTEXT, ot.POSTROLL_METHOD_ID_VIDEO_CONTEXT, ot.UNKNOWN_METHOD_ID_VIDEO_CONTEXT].indexOf(t)
                    }
                    return !1
                }
                isPreRollContext(e) {
                    return e.getTagURL().hasParameter("vctx") && e.getTagURL().getParameterInt("vctx") === ot.PREROLL_METHOD_ID_VIDEO_CONTEXT
                }
            }
            ot.SPOT_DURATION_FRACTION_REQUIRED = .5,
            ot.FIFTEEN_SECONDS_IN_MILLI = 15e3,
            ot.GROUPM_LARGE_FORMAT_SURFACE = 3e5,
            ot.SURFACE_FRACTION_REQUIRED = 1,
            ot.SURFACE_FRACTION_REQUIRED_LARGE_FORMAT = .8,
            ot.UNKNOWN_METHOD_ID_VIDEO_CONTEXT = 0,
            ot.PREROLL_METHOD_ID_VIDEO_CONTEXT = 1,
            ot.MIDROLL_METHOD_ID_VIDEO_CONTEXT = 2,
            ot.POSTROLL_METHOD_ID_VIDEO_CONTEXT = 3;
            class at {
                constructor() {
                    this.iabTrigger = null,
                    this.iabState = new mt(this),
                    this.customTrigger = null,
                    this.customViewResult = new ht(this),
                    this.clearingEventsManager = null,
                    this.nativeEventsManager = null
                }
                init(e, t) {
                    this.tag = e,
                    this.requestFormatter = this.tag.getRequestFormatter(),
                    this.iabTrigger = t,
                    this.createCustomTrigger(e),
                    this.initClearingEventManager(),
                    this.nativeEventsManager = new dt(this)
                }
                start() {
                    this.updateIABViewResult(),
                    this.updateCustomViewResult(),
                    this.requestFormatter.requestFlush(Ze.RR_FIRST_REQUEST)
                }
                initClearingEventManager() {
                    gt.hasClearingEvent(this) && (this.clearingEventsManager = new gt(this))
                }
                createCustomTrigger(e) {
                    const t = e.getTagURL().getParameter("cid");
                    t && "3" === t && this.setCustomTrigger(new ct(t))
                }
                postShot() {
                    var e;
                    this.clearingEventsManager && this.clearingEventsManager.postShot(),
                    null === (e = this.nativeEventsManager) || void 0 === e || e.postShot(this),
                    this.updateIABViewResult(),
                    this.updateCustomViewResult(),
                    at.postShotCheckJsSignals()
                }
                isMeasurementInitialized() {
                    const e = this.tag.getSearchStrategy().isWorking()
                      , t = F.trackingLoader.isTrackingSupported()
                      , i = F.trackingLoader.trackDisplay.isTrackingInitialized()
                      , n = this.tag.getTimeFromCreation() <= at.MIN_ACCEPTABLE_TIME_FOR_ADS_TO_LOAD;
                    return !!(e && t && i) && (this.tag.hasAtLeastOneObjectInitialized() || n || !!this.tag.getTagMetricsAggregator().getLastDeletedTrackedObjectData())
                }
                setCustomTrigger(e) {
                    this.customTrigger = e
                }
                updateIABViewResult() {
                    const e = this.iabState.updateIABViewResultAndReturnTrackedObjectWhenItBecomesVisible();
                    e && (this.requestFormatter.setTrackedObject(e),
                    this.requestFormatter.requestFlush(Ze.RR_PV_REQUEST))
                }
                updateCustomViewResult() {
                    this.customTrigger && this.customViewResult.updateCustomViewResultAndReturnTrackedObjectWhenItBecomesVisible() && this.requestFormatter.requestFlush(Ze.RR_CUSTOM_PV_REQUEST)
                }
                shutDown() {}
                isFirstRequest() {
                    return this.requestFormatter.isFirstRequest()
                }
                getCustomViewResult() {
                    return this.customTrigger ? this.customViewResult.getViewResult() : null
                }
                getViewResult() {
                    return this.iabState.getViewResult()
                }
                getCustomTrigger() {
                    return this.customTrigger
                }
                static postShotCheckJsSignals() {
                    const e = c.getTopAccessibleWindow();
                    ae.hasMraidNamespace(e) && O.notify(O.EXCEPTION_1005),
                    Ce.isInAppSupplyType() && Ie.checkOuterMetrics(),
                    u.elementHasDefined(e, "omid") && O.notify(O.EXCEPTION_1300),
                    fe.useOmidToSendRequest() && O.notify(O.EXCEPTION_1340)
                }
                getTag() {
                    return this.tag
                }
                getIabTrigger() {
                    return this.iabTrigger
                }
            }
            at.MIN_ACCEPTABLE_TIME_FOR_ADS_TO_LOAD = 5e3;
            class ct extends nt {
                constructor(e) {
                    super(e)
                }
                getDurationThreshold(e) {
                    return ct.DURATION_THRESHOLD
                }
                getTrackedObjectDuration(e) {
                    return e.getMetricsAggregator().getTime100PercentVisible()
                }
            }
            ct.DURATION_THRESHOLD = 1e3;
            class lt extends at {
                constructor() {
                    super(...arguments),
                    this.videoGroupMTrigger = null,
                    this.hasPlayedAtLeastOnce = !1
                }
                initClearingEventManager() {
                    Et.hasClearingEvent(this) && (this.clearingEventsManager = new Et(this))
                }
                createCustomTrigger(e) {
                    const t = e.getTagURL().getParameter("cid");
                    t && ("1" !== t && "2" !== t && "3" !== t || this.setCustomTrigger(new ot(t)))
                }
                isMeasurementInitialized() {
                    return F.trackingLoader.trackDisplay.isTrackingInitialized() && this.tag.hasAtLeastOneObjectInitialized()
                }
                setCustomTrigger(e) {
                    super.setCustomTrigger(e),
                    this.videoGroupMTrigger = e
                }
                getVideoGroupMTrigger() {
                    return this.videoGroupMTrigger
                }
                getTag() {
                    return this.tag
                }
                onPlay() {
                    this.videoGroupMTrigger && (this.customViewResult.isFinalState() || this.getTag().hasCreativeDuration() || (O.notify(O.EXCEPTION_1135),
                    this.customViewResult.setNonMeasurableFinal(),
                    this.requestFormatter.requestFlush(Ze.RR_CUSTOM_NM_REQUEST))),
                    this.hasPlayedAtLeastOnce = !0
                }
                shutDown() {
                    this.videoGroupMTrigger && ot.isInstreamOrUnknownContext(this.getTag()) && this.hasPlayedAtLeastOnce && !this.getTag().hasReceivedSoundState() && O.notify(O.EXCEPTION_1134)
                }
            }
            class dt {
                constructor(e) {
                    this.triggerManager = null,
                    this.triggerManager = e,
                    this.nativeEventList = this.triggerManager.getTag().getTagURL().getViewNativeEvents(),
                    this.hasNativeEvent() && this.nativeEventList.postShot(e)
                }
                hasNativeEvent() {
                    return this.nativeEventList && this.nativeEventList.getNbEvents() > 0
                }
                postShot(e) {
                    this.hasNativeEvent() && this.nativeEventList.postShot(e)
                }
            }
            class ut {
            }
            ut.NOT_VISIBLE = "nv",
            ut.VISIBLE = "pv",
            ut.NOT_MEASURABLE = "nm";
            class mt {
                constructor(e) {
                    this._isFinalState = !1,
                    this.currentState = ut.NOT_VISIBLE,
                    this.nonViewableType = mt.NOT_VIEWABLE_REASON_TRACKING_ON,
                    this.nonMeasurableType = -1,
                    this.triggerManager = e
                }
                setNonVisible() {
                    this._isFinalState || (this.currentState = ut.NOT_VISIBLE,
                    this.updateIABNonViewableType())
                }
                setViewable() {
                    this._isFinalState || (this.currentState = ut.VISIBLE,
                    this._isFinalState = !0)
                }
                setNonMeasurableTemporary(e) {
                    this._isFinalState || (this.currentState = ut.NOT_MEASURABLE,
                    this.nonMeasurableType = e)
                }
                setNonMeasurableFinal(e) {
                    this._isFinalState || (this.currentState = ut.NOT_MEASURABLE,
                    this.nonMeasurableType = e,
                    this._isFinalState = !0)
                }
                isFinalState() {
                    return this._isFinalState
                }
                isViewable() {
                    return this.currentState === ut.VISIBLE
                }
                isNonMeasurable() {
                    return this.currentState === ut.NOT_MEASURABLE
                }
                getViewResult() {
                    return this.isViewable() ? ut.VISIBLE : this.isNonMeasurable() ? `${ut.NOT_MEASURABLE}&nmt=${this.nonMeasurableType}` : `${this.currentState}&nvt=${this.nonViewableType}`
                }
                hasChangedStateToVisible() {
                    if (this._isFinalState)
                        return null;
                    let e = null
                      , t = -1;
                    const i = this.triggerManager.getTag();
                    for (let n = 0; n < i.getTrackedObjectCount(); n++) {
                        const s = i.getTrackedObject(n)
                          , r = this.triggerManager.getIabTrigger().getDurationThreshold(s)
                          , o = this.triggerManager.getIabTrigger().getTrackedObjectDuration(s);
                        o >= t && o >= r && (t = o,
                        e = s)
                    }
                    return e ? (this.setViewable(),
                    e) : null
                }
                updateIABViewResultAndReturnTrackedObjectWhenItBecomesVisible() {
                    if (this._isFinalState)
                        return null;
                    return this.hasChangedStateToVisible() || (F.getContainer() && !F.getContainer().isAppSupported() ? this.setNonMeasurableFinal(mt.NOT_MEASURABLE_WEBVIEW) : this.triggerManager.getTag().getSearchStrategy().isWorking() ? this.triggerManager.isFirstRequest() ? F.trackingLoader.isTrackingSupported() || this.setNonMeasurableFinal(mt.NOT_MEASURABLE_XD) : F.trackingLoader.isTrackingSupported() ? this.triggerManager.isMeasurementInitialized() ? this.setNonVisible() : F.trackingLoader.trackDisplay.isTrackingInitialized() && !this.triggerManager.getTag().hasAtLeastOneObjectInitialized() ? this.setNonMeasurableTemporary(mt.NOT_MEASURABLE_NO_OBJECT) : this.setNonMeasurableTemporary(mt.NOT_MEASURABLE_NOT_INITIALIZED) : this.setNonMeasurableTemporary(mt.NOT_MEASURABLE_XD) : this.setNonMeasurableTemporary(mt.NOT_MEASURABLE_NATIVE_MACRO_NOT_REPLACED),
                    null)
                }
                isIABVisibleWithoutDurationThreshold() {
                    const e = this.triggerManager.getTag()
                      , t = e.getTagMetricsAggregator().getLastDeletedTrackedObjectData();
                    if (0 === e.getTrackedObjectCount() && t)
                        return t.isIABVisibleWithoutDurationThreshold();
                    for (let t = 0; t < e.getTrackedObjectCount(); t++) {
                        const e = this.triggerManager.getTag().getTrackedObject(t)
                          , i = this.triggerManager.getIabTrigger()
                          , n = i.getDurationThreshold(e)
                          , s = i.getTrackedObjectDuration(e);
                        if (s >= 0 && s < n && e.getVisibilityCalculator().getPercentVisible() > 0)
                            return !0
                    }
                    return !1
                }
                isVisibleWithoutIABSurfaceThreshold() {
                    const e = this.triggerManager.getTag()
                      , t = e.getTagMetricsAggregator().getLastDeletedTrackedObjectData();
                    if (t)
                        return t.isVisibleWithoutIABSurfaceThreshold();
                    for (let t = 0; t < e.getTrackedObjectCount(); t++) {
                        const i = e.getTrackedObject(t)
                          , n = i.getMetricsAggregator().getTime000PercentVisible()
                          , s = i.getVisibilityCalculator().getPercentVisible();
                        if (0 === this.triggerManager.getIabTrigger().getTrackedObjectDuration(i) && n > 0 && s > 0 && s < i.getVisibilityCalculator().getIABThreshold())
                            return !0
                    }
                    return !1
                }
                updateIABNonViewableType() {
                    const e = this.triggerManager.getTag()
                      , t = e.getTagMetricsAggregator()
                      , i = e.getTrackedObjectCount() > 0 ? e.getFirstObject().getVisibilityCalculator() : null
                      , n = t.getLastDeletedTrackedObjectData();
                    this.triggerManager.isFirstRequest() ? this.nonViewableType = mt.NOT_VIEWABLE_REASON_TRACKING_ON : e.getTimeFromCreation() <= at.MIN_ACCEPTABLE_TIME_FOR_ADS_TO_LOAD && !e.hasAtLeastOneObjectInitialized() ? this.nonViewableType = mt.NOT_VIEWABLE_REASON_SHORT_SESSION_NO_CREATIVE_FOUND : F.getContainer() && i && F.getContainer().getVisibleRatio() <= i.getIABThreshold() ? this.nonViewableType = mt.NOT_VIEWABLE_REASON_SDK_SAY_NOT_VISIBLE : F.isActive() ? i && i.isHiddenCreative() || n && n.isHiddenCreative() ? this.nonViewableType = mt.NOT_VIEWABLE_REASON_HIDDEN_CREATIVE : i && i.isOutOfViewport() || n && n.isOutOfViewport() ? this.nonViewableType = mt.NOT_VIEWABLE_REASON_OUT_OF_VIEWPORT : this.isVisibleWithoutIABSurfaceThreshold() ? this.nonViewableType = mt.NOT_VIEWABLE_REASON_SMALL_SURFACE_EXPOSITION : (this.nonViewableType = mt.NOT_VIEWABLE_REASON_SHORT_DURATION_EXPOSTION,
                    this.isIABVisibleWithoutDurationThreshold() || O.notify(O.EXCEPTION_187)) : c.isHidden() ? this.nonViewableType = mt.NOT_VIEWABLE_REASON_PAGE_HIDDEN : D.hasFocus() ? (O.notify(O.EXCEPTION_90),
                    this.nonViewableType = mt.NOT_VIEWABLE_REASON_INACTIVE_60S) : this.nonViewableType = mt.NOT_VIEWABLE_REASON_NO_FOCUS
                }
            }
            mt.NOT_VIEWABLE_REASON_TRACKING_ON = 5,
            mt.NOT_VIEWABLE_REASON_SHORT_SESSION_NO_CREATIVE_FOUND = 7,
            mt.NOT_VIEWABLE_REASON_SDK_SAY_NOT_VISIBLE = 8,
            mt.NOT_VIEWABLE_REASON_PAGE_HIDDEN = 9,
            mt.NOT_VIEWABLE_REASON_NO_FOCUS = 10,
            mt.NOT_VIEWABLE_REASON_INACTIVE_60S = 11,
            mt.NOT_VIEWABLE_REASON_HIDDEN_CREATIVE = 12,
            mt.NOT_VIEWABLE_REASON_OUT_OF_VIEWPORT = 13,
            mt.NOT_VIEWABLE_REASON_SMALL_SURFACE_EXPOSITION = 14,
            mt.NOT_VIEWABLE_REASON_SHORT_DURATION_EXPOSTION = 15,
            mt.NOT_MEASURABLE_XD = 2,
            mt.NOT_MEASURABLE_NO_OBJECT = 3,
            mt.NOT_MEASURABLE_NOT_INITIALIZED = 4,
            mt.NOT_MEASURABLE_WEBVIEW = 5,
            mt.NOT_MEASURABLE_NATIVE_MACRO_NOT_REPLACED = 6;
            class ht {
                constructor(e) {
                    this._isFinalState = !1,
                    this.currentState = ut.NOT_VISIBLE,
                    this.triggerManager = e
                }
                setNonVisible() {
                    this._isFinalState || (this.currentState = ut.NOT_VISIBLE)
                }
                setViewable() {
                    this._isFinalState || (this.currentState = ut.VISIBLE,
                    this._isFinalState = !0)
                }
                setNonMeasurableTemporary() {
                    this._isFinalState || (this.currentState = ut.NOT_MEASURABLE)
                }
                setNonMeasurableFinal() {
                    this._isFinalState || (this.currentState = ut.NOT_MEASURABLE,
                    this._isFinalState = !0)
                }
                isFinalState() {
                    return this._isFinalState
                }
                getViewResult() {
                    return this.currentState
                }
                updateCustomViewResultAndReturnTrackedObjectWhenItBecomesVisible() {
                    if (this._isFinalState)
                        return null;
                    if (this.triggerManager.isFirstRequest())
                        this.triggerManager.getTag().getSearchStrategy().isWorking() && F.trackingLoader.isTrackingSupported() || this.setNonMeasurableFinal();
                    else if (this.triggerManager.isMeasurementInitialized()) {
                        this.setNonVisible();
                        const e = this.triggerManager.getTag()
                          , t = this.triggerManager.getCustomTrigger();
                        let i = null
                          , n = -1;
                        for (let s = 0; s < e.getTrackedObjectCount(); s++) {
                            const r = e.getTrackedObject(s)
                              , o = t.getDurationThreshold(r)
                              , a = t.getTrackedObjectDuration(r);
                            r.isFirstInitializedFlushDone() && !t.isMeasurable(e) && this.setNonMeasurableTemporary(),
                            a >= n && a >= o && o > 0 && (n = a,
                            i = r)
                        }
                        if (i)
                            return this.setViewable(),
                            i
                    } else
                        this.setNonMeasurableTemporary();
                    return null
                }
            }
            class gt {
                constructor(e) {
                    this.triggerManager = null,
                    this.clearingTrigger = null,
                    this.clearingEventSent = !1,
                    this.triggerManager = e,
                    this.clearingTrigger = this.getTriggerFromClearingEventType(),
                    this.clearingTrigger ? O.notify(O.EXCEPTION_1180) : O.notify(O.EXCEPTION_183)
                }
                getTriggerFromClearingEventType() {
                    var e;
                    const t = null === (e = this.triggerManager) || void 0 === e ? void 0 : e.getTag().getTagURL().getParameter("cet");
                    return gt.CLEARING_EVENT_TYPE_50PV1S === t ? new st : gt.CLEARING_EVENT_TYPE_100PV1S === t ? new Tt(t) : null
                }
                static isValidClearingEventCallback(e) {
                    const t = e.getTag().getTagURL().getParameter("cecb");
                    return !(!t || -1 !== t.indexOf("AUCTION_EVENT_TYPE_CB"))
                }
                static hasClearingEvent(e) {
                    const t = e.getTag().getTagURL();
                    return t.hasParameter("cet") && "0" !== t.getParameter("cet") && gt.isValidClearingEventCallback(e)
                }
                postShot() {
                    var e;
                    if (this.clearingTrigger && !this.clearingEventSent && (null === (e = this.triggerManager) || void 0 === e ? void 0 : e.isMeasurementInitialized())) {
                        let e = null
                          , t = -1;
                        const i = this.triggerManager.getTag();
                        for (let n = 0; n < i.getTrackedObjectCount(); n++) {
                            const s = i.getTrackedObject(n)
                              , r = this.clearingTrigger.getDurationThreshold(s)
                              , o = this.clearingTrigger.getTrackedObjectDuration(s);
                            s.isInitialized() && o >= t && o >= r && r > 0 && (t = o,
                            e = s)
                        }
                        e && (this.sendClearingEvent(),
                        this.clearingEventSent = !0)
                    }
                }
                sendClearingEvent() {
                    var e;
                    try {
                        const t = (null === (e = this.triggerManager) || void 0 === e ? void 0 : e.getTag().getTagURL().getParameter("cecb")) + "";
                        fe.sendRequestWithoutCookieAndReplaceSessionId(t, !1),
                        O.notify(O.EXCEPTION_1179)
                    } catch (e) {
                        O.notify(O.EXCEPTION_182)
                    }
                }
            }
            gt.CLEARING_EVENT_TYPE_50PV1S = "2",
            gt.CLEARING_EVENT_TYPE_100PV1S = "6";
            class Et extends gt {
                constructor(e) {
                    super(e)
                }
                getTriggerFromClearingEventType() {
                    let e = super.getTriggerFromClearingEventType();
                    if (!e) {
                        const t = this.triggerManager.getTag().getTagURL().getParameter("cet");
                        Et.CLEARING_EVENT_TYPE_50PV2S === t ? e = new pt : Et.CLEARING_EVENT_TYPE_100PV50PD === t && (e = new ot(t))
                    }
                    return e
                }
                postShot() {
                    if (this.clearingTrigger && !this.clearingEventSent && this.triggerManager.isMeasurementInitialized()) {
                        let e = null
                          , t = -1;
                        const i = this.triggerManager.getTag();
                        for (let n = 0; n < i.getTrackedObjectCount(); n++) {
                            const s = i.getTrackedObject(n)
                              , r = this.clearingTrigger.getDurationThreshold(s)
                              , o = this.clearingTrigger.getTrackedObjectDuration(s);
                            s.isInitialized() && o >= t && o >= r && r > 0 && (t = o,
                            e = s)
                        }
                        e && (this.sendClearingEvent(),
                        this.clearingEventSent = !0)
                    }
                }
            }
            Et.CLEARING_EVENT_TYPE_50PV2S = "8",
            Et.CLEARING_EVENT_TYPE_100PV50PD = "9";
            class pt {
                getDurationThreshold(e) {
                    return pt.DURATION_THRESHOLD
                }
                getTrackedObjectDuration(e) {
                    return e.getMetricsAggregator().getIABDuration()
                }
            }
            pt.DURATION_THRESHOLD = 2e3;
            class Tt extends nt {
                constructor(e) {
                    super(e)
                }
                getDurationThreshold(e) {
                    return Tt.DURATION_THRESHOLD
                }
                getTrackedObjectDuration(e) {
                    return e.getMetricsAggregator().getTime100PercentVisible()
                }
            }
            Tt.DURATION_THRESHOLD = 1e3;
            class _t {
                refreshContent() {
                    this.readTags(),
                    this.processTags()
                }
                getScriptListLength() {
                    return c.getNamespace().scs.length
                }
                getAndRemoveFirstScript() {
                    return c.getNamespace().scs.shift() || null
                }
                loadIframe(e) {}
                handleNewTagURL(e, t) {}
                isOmidByDefault() {
                    return !1
                }
                canHandleOmsdk() {
                    return !0
                }
                initXDRDisplayApi() {}
            }
            class It {
                init() {
                    It.initializeApiNative(c.getWindow()),
                    It.readInits()
                }
                readTags() {
                    It.synchronous || (It.readInits(),
                    It.synchronous = !0)
                }
                static initializeApiNative(e) {
                    let t = e.xdrViewDisplay;
                    t || (t = {
                        inits: []
                    },
                    e.xdrViewDisplay = t),
                    It.inits = t.inits,
                    t.inits.push = function(e) {
                        Array.prototype.push.call(this, e),
                        It.readInits()
                    }
                }
                static readInits() {
                    let e;
                    for (; e = It.inits.shift(); ) {
                        O.notify(O.EXCEPTION_1316);
                        const t = e.p;
                        $t.handleNewTagURL(null, t)
                    }
                }
            }
            It.inits = [],
            It.synchronous = !1;
            class Ot {
                init() {
                    Ot.isXdrViewApiCreatedBefore = Ot.hasXdrViewApi(),
                    Ot.initializeApiNative(c.getWindow()),
                    Ot.readInits()
                }
                processTags() {
                    Ot.synchronous || (Ot.processNewVideoTagUrls(),
                    Ot.readEvents(),
                    Ot.synchronous = !0)
                }
                static hasXdrViewApi() {
                    let e = !1
                      , t = c.getWindow();
                    for (; !e && t; )
                        e = Ot.hasXdrViewApiNative(t),
                        t = w.getAccessibleParentWindow(t);
                    return e
                }
                static hasXdrViewApiNative(e) {
                    return void 0 !== e.xdrViewApi
                }
                static initializeApiNative(e) {
                    let t = e.xdrViewApi;
                    t || (t = {
                        inits: [],
                        events: []
                    }),
                    Ot.inits = t.inits,
                    Ot.events = t.events,
                    t.inits.push = function(e) {
                        Array.prototype.push.call(this, e),
                        Ot.readInits(),
                        Ot.processNewVideoTagUrls()
                    }
                    ,
                    t.events.push = function(e) {
                        Array.prototype.push.call(this, e),
                        Ot.readEvents()
                    }
                }
                static onClipEvent(e, t, i, n) {
                    t === Ot.START ? (e.onClipPlayEvent(i),
                    e.getTag().getTagURL().isFullscreen() && e.onFullscreenOn()) : t === Ot.RESUME ? e.onClipResumeEvent(i) : t === Ot.PAUSE ? e.onClipPauseEvent(i) : t === Ot.COMPLETE ? e.onClipStopEvent(i, n) : t === Ot.SKIP ? e.onClipInterruptEvent(i, n) : t === Ot.FULLSCREEN_ON ? e.onFullscreenOn() : t === Ot.FULLSCREEN_OFF ? e.onFullscreenOff() : t === Ot.SOUND_ON ? e.getTag().onSoundOnEvent() : t === Ot.SOUND_OFF && e.getTag().onSoundOffEvent()
                }
                static readEvents() {
                    let e;
                    for (; e = Ot.events.shift(); ) {
                        Ot.synchronous && F.checkDurationStatic();
                        const t = it.getInstreamAPITrackedObjectList();
                        for (let i = t.length - 1; i >= 0; i--) {
                            const n = t[i];
                            n.getTag().getAdUID() === e.a && Ot.onClipEvent(n, e.c, e.d, !Ot.synchronous)
                        }
                    }
                }
                static readInits() {
                    let e;
                    for (; e = Ot.inits.shift(); )
                        Ot.videoTagUrlCache.push(new Se("",e))
                }
                static processNewTagVideoUrl(e) {
                    let t;
                    Ot._hasProcessedOneTagAtLeast = !0,
                    O.notify(O.EXCEPTION_1330),
                    t = e.getAdNode() ? new Ue(e.getAdNode()) : new xe(e.getDomID()),
                    Pe.addTag(new Qe(e,t))
                }
                static processNewVideoTagUrls() {
                    let e = Ot.videoTagUrlCache.shift();
                    for (; e; )
                        Ot.processNewTagVideoUrl(e),
                        e = Ot.videoTagUrlCache.shift()
                }
                static hasProcessedOneTagAtLeast() {
                    return Ot._hasProcessedOneTagAtLeast
                }
                static isXdrViewApiHasBeenUsedAlready() {
                    return Ot.hasProcessedOneTagAtLeast() || Ot.isXdrViewApiCreatedBefore
                }
            }
            Ot.START = "start",
            Ot.PAUSE = "pause",
            Ot.RESUME = "resume",
            Ot.COMPLETE = "complete",
            Ot.SKIP = "skip",
            Ot.SOUND_ON = "sound_on",
            Ot.SOUND_OFF = "sound_off",
            Ot.FULLSCREEN_ON = "fullscreen_on",
            Ot.FULLSCREEN_OFF = "fullscreen_off",
            Ot.videoTagUrlCache = [],
            Ot._hasProcessedOneTagAtLeast = !1,
            Ot.isXdrViewApiCreatedBefore = !1,
            Ot.synchronous = !1;
            class ft {
                init() {
                    ft.readTagsNative(c.getWindow())
                }
                processTags() {
                    ft.processNewVideoTagUrls(),
                    this.readCachedEvents(c.getWindow())
                }
                static readTagsNative(e) {
                    e.anxVVAPI = {
                        initializeFromParams: function(e, t, i, n, s, r, o, a, c, l) {
                            ft.readTagsFromParamsNative(e, t, i, n, l, s, r, o, a, c),
                            ft.processNewVideoTagUrls()
                        },
                        notifyEvent: function(e, t) {
                            const i = h.getCurrentTime();
                            ft.notifyEvent(e, t, i, !1)
                        }
                    };
                    const t = e.anxVVAPICache;
                    if (t) {
                        const e = t.init;
                        if (e) {
                            let t;
                            for (; t = e.shift(); )
                                ft.readTagsFromParamsNative(t.params, t.id, t.a, t.v, t.vb, t.dur, t.w, t.h, t.x, t.y)
                        }
                    }
                }
                static onClipEvent(e, t, i, n) {
                    t === ft.START ? e.onClipPlayEvent(i) : t === ft.RESUME ? e.onClipResumeEvent(i) : t === ft.PAUSE ? e.onClipPauseEvent(i) : t === ft.STOP ? e.onClipStopEvent(i, n) : t === ft.INTERRUPT ? e.onClipInterruptEvent(i, n) : t === ft.EXPAND ? e.onFullscreenOn() : t === ft.SOUND_ON ? e.getTag().onSoundOnEvent() : t === ft.SOUND_OFF ? e.getTag().onSoundOffEvent() : t === ft.COLLAPSE && e.onFullscreenOff()
                }
                static readTagsFromParamsNative(e, t, i, n, s, r, o, a, c, l) {
                    r || (r = 0),
                    o || (o = -1),
                    a || (a = -1),
                    c || (c = 0),
                    l || (l = 0),
                    ft.readTagsFromParams(e, t, i, n, s, r, o, a, c, l)
                }
                static readTagsFromParams(e, t, i, n, s, r, o, a, c, l) {
                    s && (e = e.concat("&native_event=" + s)),
                    ft.tagsVideoUrlCache.push(new Se(e,t,i,n,r))
                }
                readCachedEvents(e) {
                    const t = e.anxVVAPICache;
                    if (t) {
                        const e = t.events;
                        if (e) {
                            let t;
                            for (; t = e.shift(); )
                                ft.notifyEvent(t.a, t.c, t.d, !0)
                        }
                    }
                }
                static processNewVideoTagUrls() {
                    let e = ft.tagsVideoUrlCache.shift();
                    for (; e; )
                        ft.processNewTagVideoUrl(e),
                        e = ft.tagsVideoUrlCache.shift()
                }
                static processNewTagVideoUrl(e) {
                    const t = new xe(e.getDomID());
                    Pe.addTag(new Qe(e,t))
                }
                static notifyEvent(e, t, i, n) {
                    n || F.checkDurationStatic();
                    const s = it.getInstreamAPITrackedObjectList();
                    for (let r = s.length - 1; r >= 0; r--) {
                        const o = s[r];
                        o.getTag().getAdUID() === e && ft.onClipEvent(o, t, i, n)
                    }
                }
            }
            ft.START = "start",
            ft.PAUSE = "pause",
            ft.RESUME = "resume",
            ft.STOP = "stop",
            ft.CLICK = "click",
            ft.INTERRUPT = "interrupt",
            ft.SOUND_ON = "sound_on",
            ft.SOUND_OFF = "sound_off",
            ft.EXPAND = "expand",
            ft.COLLAPSE = "collapse",
            ft.tagsVideoUrlCache = [];
            class Ct {
                constructor() {
                    this.videoEventListener = new _(O.EXCEPTION_206,(e => {
                        const t = new Te(e)
                          , i = I.isAsync(t.getTimestamp());
                        i || F.checkDurationStatic();
                        const n = it.getInstreamAPITrackedObjectList();
                        for (let e = n.length - 1; e >= 0; e--) {
                            const s = n[e]
                              , r = t.getTimestamp()
                              , o = t.getType();
                            if (o === Ct.START)
                                s.getTag().onDurationReceived(t.getDuration()),
                                s.onClipPlayEvent(r),
                                t.getVolume() > 0 ? s.getTag().onSoundOnEvent() : s.getTag().onSoundOffEvent();
                            else if (o === Ct.RESUME)
                                s.onClipResumeEvent(r);
                            else if (o === Ct.PAUSE)
                                s.onClipPauseEvent(r);
                            else if (o === Ct.COMPLETE)
                                s.onClipStopEvent(r, i);
                            else if (o === Ct.SKIPPED)
                                s.onClipInterruptEvent(r, i);
                            else if (o === Ct.SOUND_CHANGE)
                                t.getVolume() > 0 ? s.getTag().onSoundOnEvent() : s.getTag().onSoundOffEvent();
                            else if (o === Ct.PLAYER_STATE_CHANGE) {
                                const e = t.getPlayerStateChange();
                                e === Ct.PLAYER_STATE_MINIMIZED || e === Ct.PLAYER_STATE_COLLAPSED ? s.onFullscreenOff() : e === Ct.PLAYER_STATE_EXPANDED || e === Ct.PLAYER_STATE_FULLSCREEN ? s.onFullscreenOn() : s.onFullscreenOff()
                            }
                        }
                    }
                    ))
                }
                processTags() {
                    let e = Ct.tagsVideoUrlCache.shift();
                    for (; e; )
                        this.processNewTagUrl(e),
                        e = Ct.tagsVideoUrlCache.shift()
                }
                handleNewTagURL(e, t) {
                    const i = new Se(t,e);
                    Ct.tagsVideoUrlCache.push(i),
                    F.setLastReferenceElement(e)
                }
                processNewTagUrl(e) {
                    let t = null;
                    t = I.isOMIDContextWithoutCreativeAccess() ? new We : e.getAdNode() ? new Ue(e.getAdNode()) : new je,
                    Pe.addTag(new Qe(e,t)),
                    F.getContainer().setVideoListener(this.videoEventListener)
                }
            }
            Ct.tagsVideoUrlCache = [],
            Ct.START = "start",
            Ct.PAUSE = "pause",
            Ct.RESUME = "resume",
            Ct.COMPLETE = "complete",
            Ct.SKIPPED = "skipped",
            Ct.SOUND_CHANGE = "volumeChange",
            Ct.PLAYER_STATE_CHANGE = "playerStateChange",
            Ct.PLAYER_STATE_MINIMIZED = "minimized",
            Ct.PLAYER_STATE_COLLAPSED = "collapsed",
            Ct.PLAYER_STATE_EXPANDED = "expanded",
            Ct.PLAYER_STATE_FULLSCREEN = "fullscreen";
            class St extends _t {
                constructor() {
                    super(...arguments),
                    this.scriptFound = !1,
                    this.xdrDisplayApi = new It
                }
                initXDRDisplayApi() {
                    this.xdrDisplayApi.init()
                }
                readTags() {
                    const e = this.getScriptListLength();
                    for (; !r() && 0 !== this.getScriptListLength(); ) {
                        let e = !1;
                        const t = this.getAndRemoveFirstScript();
                        if (t) {
                            const i = t.getAttribute("src") || "";
                            if (-1 !== i.indexOf("#")) {
                                const n = i.substring(i.indexOf("#") + 1);
                                e = this.addScriptAddon(n, t)
                            }
                            if (!e) {
                                const i = s(t);
                                e = this.readParametersOnDivElement(i)
                            }
                        }
                        e || (e = this.searchForDivTagInTheWholeWindow(c.getWindow()))
                    }
                    this.xdrDisplayApi.readTags(),
                    e !== St.tagsUrlCache.length && (ue.isOmidSupported() || O.notify(O.EXCEPTION_110))
                }
                readParametersOnDivElement(e) {
                    const t = e.getAttribute(St.TAG_ATTRIBUTE_NAME);
                    if (t && t.startsWith(h.getScriptId())) {
                        const i = t.replace(h.getScriptId(), "");
                        return e.setAttribute(St.TAG_ATTRIBUTE_NAME, i),
                        this.handleNewTagURL(e, i),
                        !0
                    }
                    return !1
                }
                addScriptAddon(e, t) {
                    if (!oe.getElementProperty(t, St.TAG_ATTRIBUTE_NAME)) {
                        t.setAttribute(St.TAG_ATTRIBUTE_NAME, "1");
                        const i = e.replace(h.getScriptId(), "");
                        return this.handleNewTagURL(t, i),
                        !0
                    }
                    return !1
                }
                searchForDivTagInTheWholeWindow(e) {
                    const t = se.getElementsByTagName(e, "div");
                    for (let e = 0; e < t.length; e++) {
                        const i = t[e];
                        if (this.readParametersOnDivElement(i))
                            return !0
                    }
                    return !1
                }
                loadIframeNewlyFoundFrame(e) {
                    this.processTags(),
                    N.registerActivity(e),
                    F.trackingLoader.searchElements(),
                    F.checkDurationStatic()
                }
                handleNewTagURL(e, t) {
                    const i = new Ce(t,e);
                    St.tagsUrlCache.push(i),
                    F.setLastReferenceElement(e)
                }
                processTags() {
                    let e = St.tagsUrlCache.pop();
                    for (; e; )
                        this.processNewTagUrl(e),
                        e = St.tagsUrlCache.pop()
                }
                processNewTagUrl(e) {
                    let t = null;
                    if (I.isOMIDContextWithoutCreativeAccess())
                        t = new We;
                    else {
                        const i = e.getParameter("dom_id");
                        if (i)
                            t = new Fe(i);
                        else {
                            const i = e.getParameter("dom_id_child");
                            if (i)
                                t = new Xe(i);
                            else {
                                const i = e.getParameter("css_selector");
                                if (i)
                                    t = new He(i);
                                else {
                                    const i = e.getParameter("dom_elt_var");
                                    if (i)
                                        t = new Be(i);
                                    else {
                                        const i = e.getParameter("pbjs_adid") || ""
                                          , n = e.getParameter("pbjs_auc") || "";
                                        (i || n) && (t = new ke(i,n))
                                    }
                                }
                            }
                        }
                    }
                    t || (t = new je),
                    Pe.addTag(new tt(e,t))
                }
                isBannerOrNativeCreative() {
                    return !0
                }
                canHandleOmsdk() {
                    return !1
                }
            }
            St.tagsUrlCache = [],
            St.TAG_ATTRIBUTE_NAME = "lnttag";
            class vt extends St {
                canHandleOmsdk() {
                    return !0
                }
            }
            class Nt extends _t {
                constructor() {
                    super(...arguments),
                    this.anxVVApi = new ft,
                    this.xdrViewApi = new Ot
                }
                readTags() {
                    this.anxVVApi.init(),
                    this.xdrViewApi.init()
                }
                processTags() {
                    this.anxVVApi.processTags(),
                    this.xdrViewApi.processTags()
                }
                isBannerOrNativeCreative() {
                    return !1
                }
                canHandleOmsdk() {
                    return !1
                }
            }
            class At extends _t {
                constructor() {
                    super(...arguments),
                    this.omidVideo = new Ct,
                    this.xdrViewApi = new Ot
                }
                readTags() {
                    this.xdrViewApi.init()
                }
                processTags() {
                    this.xdrViewApi.processTags(),
                    this.omidVideo.processTags()
                }
                isBannerOrNativeCreative() {
                    return !1
                }
                handleNewTagURL(e, t) {
                    this.omidVideo.handleNewTagURL(e, t)
                }
                isOmidByDefault() {
                    return !0
                }
            }
            class $t {
                static init() {
                    $t.impl || ($t.impl = new vt,
                    $t.impl.initXDRDisplayApi())
                }
                static refreshContent() {
                    $t.init();
                    try {
                        $t.impl.refreshContent()
                    } catch (e) {
                        O.notify(O.EXCEPTION_81)
                    }
                }
                static processTags() {
                    $t.init();
                    try {
                        $t.impl.processTags()
                    } catch (e) {
                        O.notify(O.EXCEPTION_33)
                    }
                }
                static readTags() {
                    $t.init();
                    try {
                        $t.impl.readTags()
                    } catch (e) {
                        O.notify(O.EXCEPTION_36)
                    }
                }
                static handleNewTagURL(e, t) {
                    $t.init();
                    try {
                        $t.impl.handleNewTagURL(e, t)
                    } catch (e) {
                        O.notify(O.EXCEPTION_38)
                    }
                }
                static isBannerOrNativeCreative() {
                    return $t.init(),
                    $t.impl.isBannerOrNativeCreative()
                }
                static isOmidByDefault() {
                    return $t.init(),
                    $t.impl.isOmidByDefault()
                }
                static canHandleOmsdk() {
                    return $t.init(),
                    $t.impl.canHandleOmsdk()
                }
            }
            class bt {
                constructor() {
                    R.init(),
                    O.init()
                }
                onModuleLoad() {
                    c.getBodyElement(c.getWindow()) || r() ? this.initializeTracking() : this.delayedInitialization()
                }
                initializeTracking() {
                    try {
                        $t.readTags();
                        const e = T();
                        let t, i;
                        t = "gecko40" === e ? new B : "edge15" === e ? new H : "ie11" === e ? new W : new U,
                        Ge.checkSafeframeSignals(),
                        bt.useIntersectionObserver = se.isFunctionNative(bt.getIntersectionObserverFunction()),
                        i = R.isCrossDomain() && !bt.useIntersectionObserver ? t.createTrackingLoaderXD() : t.createTrackingLoader(),
                        i.start()
                    } catch (e) {
                        O.notifyWithException(O.EXCEPTION_107, e)
                    }
                }
                static getIntersectionObserverFunction() {
                    return c.getWindow().IntersectionObserver
                }
                delayedInitialization() {
                    let e = 0;
                    const t = new m(( () => {
                        if (!c.getBodyElement(c.getWindow())) {
                            if (5 !== e)
                                return void (e += 1);
                            O.notify(O.EXCEPTION_1184)
                        }
                        t.cancel(),
                        this.initializeTracking()
                    }
                    ),O.EXCEPTION_85);
                    t.scheduleRepeating(80)
                }
                static getUseIntersectionObserver() {
                    return bt.useIntersectionObserver
                }
            }
            bt.useIntersectionObserver = !1
        }
        ,
        242: (__unused_webpack_module, exports) => {
            exports = void 0;
            try {
                var topAccessibleWindow = void 0;
                if ("undefined" != typeof window) {
                    topAccessibleWindow = window;
                    try {
                        var isInIframe = !1;
                        try {
                            isInIframe = document.location != window.parent.location
                        } catch (e) {
                            isInIframe = !0
                        }
                        var currentWindow = window;
                        if (isInIframe)
                            for (var isXD = !1; currentWindow != currentWindow.parent && !isXD; )
                                "undefined" != currentWindow.parent.location.href ? currentWindow = currentWindow.parent : isXD = !0;
                        topAccessibleWindow = currentWindow
                    } catch (e) {}
                }
            } catch (e) {}
            if ("undefined" != typeof omid || void 0 !== topAccessibleWindow && void 0 !== topAccessibleWindow.omid || "undefined" != typeof omidVerificationProperties)
                try {
                    !function(e, t, i) {
                        if ("object" == typeof i && "string" != typeof i.nodeName)
                            t(e, i);
                        else {
                            i = {};
                            var n = ["1.3.37-iab3566"];
                            function r(e) {
                                for (var t in e)
                                    e.hasOwnProperty(t) && (e[t] = r(e[t]));
                                return Object.freeze(e)
                            }
                            for (var s in t(e, i),
                            i)
                                i.hasOwnProperty(s) && (null == Object.getOwnPropertyDescriptor(e, s) && Object.defineProperty(e, s, {
                                    value: {}
                                }),
                                n.forEach((function(t) {
                                    if (null == Object.getOwnPropertyDescriptor(e[s], t)) {
                                        var n = r(i[s]);
                                        Object.defineProperty(e[s], t, {
                                            get: function() {
                                                return n
                                            },
                                            enumerable: !0
                                        })
                                    }
                                }
                                )))
                        }
                    }("undefined" == typeof global ? this : global, (function(omidGlobal, omidExports) {
                        var $jscomp = $jscomp || {};
                        $jscomp.scope = {},
                        $jscomp.arrayIteratorImpl = function(e) {
                            var t = 0;
                            return function() {
                                return t < e.length ? {
                                    done: !1,
                                    value: e[t++]
                                } : {
                                    done: !0
                                }
                            }
                        }
                        ,
                        $jscomp.arrayIterator = function(e) {
                            return {
                                next: $jscomp.arrayIteratorImpl(e)
                            }
                        }
                        ,
                        $jscomp.makeIterator = function(e) {
                            var t = "undefined" != typeof Symbol && Symbol.iterator && e[Symbol.iterator];
                            return t ? t.call(e) : $jscomp.arrayIterator(e)
                        }
                        ,
                        $jscomp.arrayFromIterator = function(e) {
                            for (var t, i = []; !(t = e.next()).done; )
                                i.push(t.value);
                            return i
                        }
                        ,
                        $jscomp.arrayFromIterable = function(e) {
                            return e instanceof Array ? e : $jscomp.arrayFromIterator($jscomp.makeIterator(e))
                        }
                        ,
                        $jscomp.ASSUME_ES5 = !1,
                        $jscomp.ASSUME_NO_NATIVE_MAP = !1,
                        $jscomp.ASSUME_NO_NATIVE_SET = !1,
                        $jscomp.SIMPLE_FROUND_POLYFILL = !1,
                        $jscomp.objectCreate = $jscomp.ASSUME_ES5 || "function" == typeof Object.create ? Object.create : function(e) {
                            var t = function() {};
                            return t.prototype = e,
                            new t
                        }
                        ,
                        $jscomp.underscoreProtoCanBeSet = function() {
                            var e = {};
                            try {
                                return e.__proto__ = {
                                    a: !0
                                },
                                e.a
                            } catch (e) {}
                            return !1
                        }
                        ,
                        $jscomp.setPrototypeOf = "function" == typeof Object.setPrototypeOf ? Object.setPrototypeOf : $jscomp.underscoreProtoCanBeSet() ? function(e, t) {
                            if (e.__proto__ = t,
                            e.__proto__ !== t)
                                throw new TypeError(e + " is not extensible");
                            return e
                        }
                        : null,
                        $jscomp.inherits = function(e, t) {
                            if (e.prototype = $jscomp.objectCreate(t.prototype),
                            e.prototype.constructor = e,
                            $jscomp.setPrototypeOf) {
                                var i = $jscomp.setPrototypeOf;
                                i(e, t)
                            } else
                                for (i in t)
                                    if ("prototype" != i)
                                        if (Object.defineProperties) {
                                            var n = Object.getOwnPropertyDescriptor(t, i);
                                            n && Object.defineProperty(e, i, n)
                                        } else
                                            e[i] = t[i];
                            e.superClass_ = t.prototype
                        }
                        ;
                        var module$exports$omid$common$constants = {
                            AdEventType: {
                                IMPRESSION: "impression",
                                LOADED: "loaded",
                                GEOMETRY_CHANGE: "geometryChange",
                                SESSION_START: "sessionStart",
                                SESSION_ERROR: "sessionError",
                                SESSION_FINISH: "sessionFinish",
                                MEDIA: "media",
                                VIDEO: "video",
                                START: "start",
                                FIRST_QUARTILE: "firstQuartile",
                                MIDPOINT: "midpoint",
                                THIRD_QUARTILE: "thirdQuartile",
                                COMPLETE: "complete",
                                PAUSE: "pause",
                                RESUME: "resume",
                                BUFFER_START: "bufferStart",
                                BUFFER_FINISH: "bufferFinish",
                                SKIPPED: "skipped",
                                VOLUME_CHANGE: "volumeChange",
                                PLAYER_STATE_CHANGE: "playerStateChange",
                                AD_USER_INTERACTION: "adUserInteraction",
                                STATE_CHANGE: "stateChange"
                            },
                            MediaEventType: {
                                LOADED: "loaded",
                                START: "start",
                                FIRST_QUARTILE: "firstQuartile",
                                MIDPOINT: "midpoint",
                                THIRD_QUARTILE: "thirdQuartile",
                                COMPLETE: "complete",
                                PAUSE: "pause",
                                RESUME: "resume",
                                BUFFER_START: "bufferStart",
                                BUFFER_FINISH: "bufferFinish",
                                SKIPPED: "skipped",
                                VOLUME_CHANGE: "volumeChange",
                                PLAYER_STATE_CHANGE: "playerStateChange",
                                AD_USER_INTERACTION: "adUserInteraction"
                            },
                            ImpressionType: {
                                DEFINED_BY_JAVASCRIPT: "definedByJavaScript",
                                UNSPECIFIED: "unspecified",
                                LOADED: "loaded",
                                BEGIN_TO_RENDER: "beginToRender",
                                ONE_PIXEL: "onePixel",
                                VIEWABLE: "viewable",
                                AUDIBLE: "audible",
                                OTHER: "other"
                            },
                            ErrorType: {
                                GENERIC: "generic",
                                VIDEO: "video",
                                MEDIA: "media"
                            },
                            AdSessionType: {
                                NATIVE: "native",
                                HTML: "html",
                                JAVASCRIPT: "javascript"
                            },
                            EventOwner: {
                                NATIVE: "native",
                                JAVASCRIPT: "javascript",
                                NONE: "none"
                            },
                            AccessMode: {
                                FULL: "full",
                                DOMAIN: "domain",
                                LIMITED: "limited"
                            },
                            AppState: {
                                BACKGROUNDED: "backgrounded",
                                FOREGROUNDED: "foregrounded"
                            },
                            Environment: {
                                APP: "app",
                                WEB: "web"
                            },
                            InteractionType: {
                                CLICK: "click",
                                INVITATION_ACCEPT: "invitationAccept"
                            },
                            CreativeType: {
                                DEFINED_BY_JAVASCRIPT: "definedByJavaScript",
                                HTML_DISPLAY: "htmlDisplay",
                                NATIVE_DISPLAY: "nativeDisplay",
                                VIDEO: "video",
                                AUDIO: "audio"
                            },
                            MediaType: {
                                DISPLAY: "display",
                                VIDEO: "video"
                            },
                            Reason: {
                                NOT_FOUND: "notFound",
                                HIDDEN: "hidden",
                                BACKGROUNDED: "backgrounded",
                                VIEWPORT: "viewport",
                                OBSTRUCTED: "obstructed",
                                CLIPPED: "clipped",
                                UNMEASURABLE: "unmeasurable",
                                NO_WINDOW_FOCUS: "noWindowFocus"
                            },
                            SupportedFeatures: {
                                CONTAINER: "clid",
                                VIDEO: "vlid"
                            },
                            VideoPosition: {
                                PREROLL: "preroll",
                                MIDROLL: "midroll",
                                POSTROLL: "postroll",
                                STANDALONE: "standalone"
                            },
                            VideoPlayerState: {
                                MINIMIZED: "minimized",
                                COLLAPSED: "collapsed",
                                NORMAL: "normal",
                                EXPANDED: "expanded",
                                FULLSCREEN: "fullscreen"
                            },
                            NativeViewKeys: {
                                X: "x",
                                LEFT: "left",
                                Y: "y",
                                TOP: "top",
                                WIDTH: "width",
                                HEIGHT: "height",
                                AD_SESSION_ID: "adSessionId",
                                IS_FRIENDLY_OBSTRUCTION_FOR: "isFriendlyObstructionFor",
                                CLIPS_TO_BOUNDS: "clipsToBounds",
                                CHILD_VIEWS: "childViews",
                                END_X: "endX",
                                END_Y: "endY",
                                OBSTRUCTIONS: "obstructions",
                                OBSTRUCTION_CLASS: "obstructionClass",
                                OBSTRUCTION_PURPOSE: "obstructionPurpose",
                                OBSTRUCTION_REASON: "obstructionReason",
                                PIXELS: "pixels",
                                HAS_WINDOW_FOCUS: "hasWindowFocus"
                            },
                            MeasurementStateChangeSource: {
                                CONTAINER: "container",
                                CREATIVE: "creative"
                            },
                            ElementMarkup: {
                                OMID_ELEMENT_CLASS_NAME: "omid-element"
                            },
                            CommunicationType: {
                                NONE: "NONE",
                                DIRECT: "DIRECT",
                                POST_MESSAGE: "POST_MESSAGE"
                            },
                            OmidImplementer: {
                                OMSDK: "omsdk"
                            }
                        }
                          , module$contents$omid$common$InternalMessage_GUID_KEY = "omid_message_guid"
                          , module$contents$omid$common$InternalMessage_METHOD_KEY = "omid_message_method"
                          , module$contents$omid$common$InternalMessage_VERSION_KEY = "omid_message_version"
                          , module$contents$omid$common$InternalMessage_ARGS_KEY = "omid_message_args"
                          , module$exports$omid$common$InternalMessage = function(e, t, i, n) {
                            this.guid = e,
                            this.method = t,
                            this.version = i,
                            this.args = n
                        };
                        module$exports$omid$common$InternalMessage.isValidSerializedMessage = function(e) {
                            return !!e && void 0 !== e[module$contents$omid$common$InternalMessage_GUID_KEY] && void 0 !== e[module$contents$omid$common$InternalMessage_METHOD_KEY] && void 0 !== e[module$contents$omid$common$InternalMessage_VERSION_KEY] && "string" == typeof e[module$contents$omid$common$InternalMessage_GUID_KEY] && "string" == typeof e[module$contents$omid$common$InternalMessage_METHOD_KEY] && "string" == typeof e[module$contents$omid$common$InternalMessage_VERSION_KEY] && (void 0 === e[module$contents$omid$common$InternalMessage_ARGS_KEY] || void 0 !== e[module$contents$omid$common$InternalMessage_ARGS_KEY])
                        }
                        ,
                        module$exports$omid$common$InternalMessage.deserialize = function(e) {
                            return new module$exports$omid$common$InternalMessage(e[module$contents$omid$common$InternalMessage_GUID_KEY],e[module$contents$omid$common$InternalMessage_METHOD_KEY],e[module$contents$omid$common$InternalMessage_VERSION_KEY],e[module$contents$omid$common$InternalMessage_ARGS_KEY])
                        }
                        ,
                        module$exports$omid$common$InternalMessage.prototype.serialize = function() {
                            var e = {};
                            return e[module$contents$omid$common$InternalMessage_GUID_KEY] = this.guid,
                            e[module$contents$omid$common$InternalMessage_METHOD_KEY] = this.method,
                            e[module$contents$omid$common$InternalMessage_VERSION_KEY] = this.version,
                            void 0 !== this.args && (e[module$contents$omid$common$InternalMessage_ARGS_KEY] = this.args),
                            e
                        }
                        ;
                        var module$exports$omid$common$Communication = function(e) {
                            this.to = e,
                            this.communicationType_ = module$exports$omid$common$constants.CommunicationType.NONE
                        };
                        module$exports$omid$common$Communication.prototype.sendMessage = function(e, t) {}
                        ,
                        module$exports$omid$common$Communication.prototype.handleMessage = function(e, t) {
                            this.onMessage && this.onMessage(e, t)
                        }
                        ,
                        module$exports$omid$common$Communication.prototype.serialize = function(e) {
                            return JSON.stringify(e)
                        }
                        ,
                        module$exports$omid$common$Communication.prototype.deserialize = function(e) {
                            return JSON.parse(e)
                        }
                        ,
                        module$exports$omid$common$Communication.prototype.isDirectCommunication = function() {
                            return this.communicationType_ === module$exports$omid$common$constants.CommunicationType.DIRECT
                        }
                        ,
                        module$exports$omid$common$Communication.prototype.isCrossOrigin = function() {}
                        ;
                        var module$exports$omid$common$logger = {};
                        function module$contents$omid$common$logger_error(e) {
                            for (var t = [], i = 0; i < arguments.length; ++i)
                                t[i - 0] = arguments[i];
                            module$contents$omid$common$logger_executeLog((function() {
                                throw new (Function.prototype.bind.apply(Error, [null, "Could not complete the test successfully - "].concat($jscomp.arrayFromIterable(t))))
                            }
                            ), (function() {
                                return console.error.apply(console, $jscomp.arrayFromIterable(t))
                            }
                            ))
                        }
                        function module$contents$omid$common$logger_debug(e) {
                            for (var t = [], i = 0; i < arguments.length; ++i)
                                t[i - 0] = arguments[i];
                            module$contents$omid$common$logger_executeLog((function() {}
                            ), (function() {
                                return console.error.apply(console, $jscomp.arrayFromIterable(t))
                            }
                            ))
                        }
                        function module$contents$omid$common$logger_executeLog(e, t) {
                            "undefined" != typeof jasmine && jasmine ? e() : "undefined" != typeof console && console && console.error && t()
                        }
                        module$exports$omid$common$logger.error = module$contents$omid$common$logger_error,
                        module$exports$omid$common$logger.debug = module$contents$omid$common$logger_debug;
                        var module$exports$omid$common$eventTypedefs = {}
                          , module$exports$omid$common$version = {
                            ApiVersion: "1.0",
                            Version: "1.3.37-iab3566"
                        }
                          , module$exports$omid$common$argsChecker = {};
                        function module$contents$omid$common$argsChecker_assertTruthyString(e, t) {
                            if (!t)
                                throw Error("Value for " + e + " is undefined, null or blank.");
                            if ("string" != typeof t && !(t instanceof String))
                                throw Error("Value for " + e + " is not a string.");
                            if ("" === t.trim())
                                throw Error("Value for " + e + " is empty string.")
                        }
                        function module$contents$omid$common$argsChecker_assertNotNullObject(e, t) {
                            if (null == t)
                                throw Error("Value for " + e + " is undefined or null")
                        }
                        function module$contents$omid$common$argsChecker_assertNumber(e, t) {
                            if (null == t)
                                throw Error(e + " must not be null or undefined.");
                            if ("number" != typeof t || isNaN(t))
                                throw Error("Value for " + e + " is not a number")
                        }
                        function module$contents$omid$common$argsChecker_assertNumberBetween(e, t, i, n) {
                            if (module$contents$omid$common$argsChecker_assertNumber(e, t),
                            t < i || t > n)
                                throw Error("Value for " + e + " is outside the range [" + i + "," + n + "]")
                        }
                        function module$contents$omid$common$argsChecker_assertFunction(e, t) {
                            if (!t)
                                throw Error(e + " must not be truthy.")
                        }
                        function module$contents$omid$common$argsChecker_assertPositiveNumber(e, t) {
                            if (module$contents$omid$common$argsChecker_assertNumber(e, t),
                            0 > t)
                                throw Error(e + " must be a positive number.")
                        }
                        module$exports$omid$common$argsChecker.assertTruthyString = module$contents$omid$common$argsChecker_assertTruthyString,
                        module$exports$omid$common$argsChecker.assertNotNullObject = module$contents$omid$common$argsChecker_assertNotNullObject,
                        module$exports$omid$common$argsChecker.assertNumber = module$contents$omid$common$argsChecker_assertNumber,
                        module$exports$omid$common$argsChecker.assertNumberBetween = module$contents$omid$common$argsChecker_assertNumberBetween,
                        module$exports$omid$common$argsChecker.assertFunction = module$contents$omid$common$argsChecker_assertFunction,
                        module$exports$omid$common$argsChecker.assertPositiveNumber = module$contents$omid$common$argsChecker_assertPositiveNumber;
                        var module$exports$omid$common$VersionUtils = {}
                          , module$contents$omid$common$VersionUtils_SEMVER_DIGITS_NUMBER = 3;
                        function module$contents$omid$common$VersionUtils_isValidVersion(e) {
                            return /\d+\.\d+\.\d+(-.*)?/.test(e)
                        }
                        function module$contents$omid$common$VersionUtils_versionGreaterOrEqual(e, t) {
                            e = e.split("-")[0].split("."),
                            t = t.split("-")[0].split(".");
                            for (var i = 0; i < module$contents$omid$common$VersionUtils_SEMVER_DIGITS_NUMBER; i++) {
                                var n = parseInt(e[i], 10)
                                  , s = parseInt(t[i], 10);
                                if (n > s)
                                    break;
                                if (n < s)
                                    return !1
                            }
                            return !0
                        }
                        module$exports$omid$common$VersionUtils.isValidVersion = module$contents$omid$common$VersionUtils_isValidVersion,
                        module$exports$omid$common$VersionUtils.versionGreaterOrEqual = module$contents$omid$common$VersionUtils_versionGreaterOrEqual;
                        var module$exports$omid$common$ArgsSerDe = {}
                          , module$contents$omid$common$ArgsSerDe_ARGS_NOT_SERIALIZED_VERSION = "1.0.3";
                        function module$contents$omid$common$ArgsSerDe_serializeMessageArgs(e, t) {
                            return module$contents$omid$common$VersionUtils_isValidVersion(e) && module$contents$omid$common$VersionUtils_versionGreaterOrEqual(e, module$contents$omid$common$ArgsSerDe_ARGS_NOT_SERIALIZED_VERSION) ? t : JSON.stringify(t)
                        }
                        function module$contents$omid$common$ArgsSerDe_deserializeMessageArgs(e, t) {
                            return module$contents$omid$common$VersionUtils_isValidVersion(e) && module$contents$omid$common$VersionUtils_versionGreaterOrEqual(e, module$contents$omid$common$ArgsSerDe_ARGS_NOT_SERIALIZED_VERSION) ? t || [] : t && "string" == typeof t ? JSON.parse(t) : []
                        }
                        module$exports$omid$common$ArgsSerDe.serializeMessageArgs = module$contents$omid$common$ArgsSerDe_serializeMessageArgs,
                        module$exports$omid$common$ArgsSerDe.deserializeMessageArgs = module$contents$omid$common$ArgsSerDe_deserializeMessageArgs;
                        var module$exports$omid$common$guid = {};
                        function module$contents$omid$common$guid_generateGuid() {
                            return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (function(e) {
                                var t = 16 * Math.random() | 0;
                                return "y" === e ? (3 & t | 8).toString(16) : t.toString(16)
                            }
                            ))
                        }
                        module$exports$omid$common$guid.generateGuid = module$contents$omid$common$guid_generateGuid;
                        var module$exports$omid$common$serviceMethodUtils = {}
                          , module$contents$omid$common$serviceMethodUtils_ServiceMethodPrefix = {
                            SESSION_SERVICE: "SessionService.",
                            VERIFICATION_SERVICE: "VerificationService."
                        };
                        function module$contents$omid$common$serviceMethodUtils_getPrefixedSessionServiceMethod(e) {
                            return module$contents$omid$common$serviceMethodUtils_getPrefixedMethod(e, module$contents$omid$common$serviceMethodUtils_ServiceMethodPrefix.SESSION_SERVICE)
                        }
                        function module$contents$omid$common$serviceMethodUtils_getUnprefixedSessionServiceMethod(e) {
                            return module$contents$omid$common$serviceMethodUtils_getUnprefixedMethod(e, module$contents$omid$common$serviceMethodUtils_ServiceMethodPrefix.SESSION_SERVICE)
                        }
                        function module$contents$omid$common$serviceMethodUtils_isPrefixedSessionServiceMethod(e) {
                            return null != module$contents$omid$common$serviceMethodUtils_getUnprefixedSessionServiceMethod(e)
                        }
                        function module$contents$omid$common$serviceMethodUtils_getPrefixedVerificationServiceMethod(e) {
                            return module$contents$omid$common$serviceMethodUtils_getPrefixedMethod(e, module$contents$omid$common$serviceMethodUtils_ServiceMethodPrefix.VERIFICATION_SERVICE)
                        }
                        function module$contents$omid$common$serviceMethodUtils_getUnprefixedVerificationServiceMethod(e) {
                            return module$contents$omid$common$serviceMethodUtils_getUnprefixedMethod(e, module$contents$omid$common$serviceMethodUtils_ServiceMethodPrefix.VERIFICATION_SERVICE)
                        }
                        function module$contents$omid$common$serviceMethodUtils_isPrefixedVerificationServiceMethod(e) {
                            return null != module$contents$omid$common$serviceMethodUtils_getUnprefixedVerificationServiceMethod(e)
                        }
                        function module$contents$omid$common$serviceMethodUtils_getPrefixedMethod(e, t) {
                            return t + e
                        }
                        function module$contents$omid$common$serviceMethodUtils_getUnprefixedMethod(e, t) {
                            return (e = e.match(new RegExp("^" + t + "(.*)"))) && e[1]
                        }
                        module$exports$omid$common$serviceMethodUtils.getPrefixedSessionServiceMethod = module$contents$omid$common$serviceMethodUtils_getPrefixedSessionServiceMethod,
                        module$exports$omid$common$serviceMethodUtils.getPrefixedVerificationServiceMethod = module$contents$omid$common$serviceMethodUtils_getPrefixedVerificationServiceMethod,
                        module$exports$omid$common$serviceMethodUtils.getUnprefixedSessionServiceMethod = module$contents$omid$common$serviceMethodUtils_getUnprefixedSessionServiceMethod,
                        module$exports$omid$common$serviceMethodUtils.getUnprefixedVerificationServiceMethod = module$contents$omid$common$serviceMethodUtils_getUnprefixedVerificationServiceMethod,
                        module$exports$omid$common$serviceMethodUtils.isPrefixedSessionServiceMethod = module$contents$omid$common$serviceMethodUtils_isPrefixedSessionServiceMethod,
                        module$exports$omid$common$serviceMethodUtils.isPrefixedVerificationServiceMethod = module$contents$omid$common$serviceMethodUtils_isPrefixedVerificationServiceMethod;
                        var module$exports$omid$common$OmidGlobalProvider = {};
                        function module$contents$omid$common$OmidGlobalProvider_getOmidGlobal() {
                            if (void 0 !== omidGlobal && omidGlobal)
                                return omidGlobal;
                            if ("undefined" != typeof global && global)
                                return global;
                            if ("undefined" != typeof window && window)
                                return window;
                            if ("undefined" != typeof globalThis && globalThis)
                                return globalThis;
                            var e = Function("return this")();
                            if (e)
                                return e;
                            throw Error("Could not determine global object context.")
                        }
                        module$exports$omid$common$OmidGlobalProvider.omidGlobal = module$contents$omid$common$OmidGlobalProvider_getOmidGlobal();
                        var module$exports$omid$common$exporter = {};
                        function module$contents$omid$common$exporter_getOmidExports() {
                            return void 0 === omidExports ? null : omidExports
                        }
                        function module$contents$omid$common$exporter_getOrCreateName(e, t) {
                            return e && (e[t] || (e[t] = {}))
                        }
                        function module$contents$omid$common$exporter_packageExport(e, t, i) {
                            (i = void 0 === i ? module$contents$omid$common$exporter_getOmidExports() : i) && ((e = e.split(".")).slice(0, e.length - 1).reduce(module$contents$omid$common$exporter_getOrCreateName, i)[e[e.length - 1]] = t)
                        }
                        module$exports$omid$common$exporter.packageExport = module$contents$omid$common$exporter_packageExport;
                        var module$exports$omid$common$windowUtils = {};
                        function module$contents$omid$common$windowUtils_isValidWindow(e) {
                            return null != e && void 0 !== e.top && null != e.top
                        }
                        function module$contents$omid$common$windowUtils_isCrossOrigin(e) {
                            if (e === module$exports$omid$common$OmidGlobalProvider.omidGlobal)
                                return !1;
                            try {
                                if (void 0 === e.location.hostname)
                                    return !0;
                                module$contents$omid$common$windowUtils_isSameOriginForIE(e)
                            } catch (e) {
                                return !0
                            }
                            return !1
                        }
                        function module$contents$omid$common$windowUtils_isSameOriginForIE(e) {
                            return "" === e.x || "" !== e.x
                        }
                        function module$contents$omid$common$windowUtils_resolveGlobalContext(e) {
                            return void 0 === e && "undefined" != typeof window && window && (e = window),
                            module$contents$omid$common$windowUtils_isValidWindow(e) ? e : module$exports$omid$common$OmidGlobalProvider.omidGlobal
                        }
                        function module$contents$omid$common$windowUtils_resolveTopWindowContext(e) {
                            return module$contents$omid$common$windowUtils_isValidWindow(e) ? e.top : module$exports$omid$common$OmidGlobalProvider.omidGlobal
                        }
                        function module$contents$omid$common$windowUtils_isTopWindowAccessible(e) {
                            try {
                                return !!e.top.location.href
                            } catch (e) {
                                return !1
                            }
                        }
                        function module$contents$omid$common$windowUtils_evaluatePageUrl(e) {
                            if (!module$contents$omid$common$windowUtils_isValidWindow(e))
                                return null;
                            try {
                                var t = e.top;
                                return module$contents$omid$common$windowUtils_isCrossOrigin(t) ? null : t.location.href
                            } catch (e) {
                                return null
                            }
                        }
                        module$exports$omid$common$windowUtils.evaluatePageUrl = module$contents$omid$common$windowUtils_evaluatePageUrl,
                        module$exports$omid$common$windowUtils.isCrossOrigin = module$contents$omid$common$windowUtils_isCrossOrigin,
                        module$exports$omid$common$windowUtils.resolveGlobalContext = module$contents$omid$common$windowUtils_resolveGlobalContext,
                        module$exports$omid$common$windowUtils.resolveTopWindowContext = module$contents$omid$common$windowUtils_resolveTopWindowContext,
                        module$exports$omid$common$windowUtils.isTopWindowAccessible = module$contents$omid$common$windowUtils_isTopWindowAccessible;
                        var module$exports$omid$common$DirectCommunication = function(e) {
                            module$exports$omid$common$Communication.call(this, e),
                            this.communicationType_ = module$exports$omid$common$constants.CommunicationType.DIRECT,
                            this.handleExportedMessage = module$exports$omid$common$DirectCommunication.prototype.handleExportedMessage.bind(this)
                        };
                        $jscomp.inherits(module$exports$omid$common$DirectCommunication, module$exports$omid$common$Communication),
                        module$exports$omid$common$DirectCommunication.prototype.sendMessage = function(e, t) {
                            if (!(t = void 0 === t ? this.to : t))
                                throw Error("Message destination must be defined at construction time or when sending the message.");
                            t.handleExportedMessage(e.serialize(), this)
                        }
                        ,
                        module$exports$omid$common$DirectCommunication.prototype.handleExportedMessage = function(e, t) {
                            module$exports$omid$common$InternalMessage.isValidSerializedMessage(e) && this.handleMessage(module$exports$omid$common$InternalMessage.deserialize(e), t)
                        }
                        ,
                        module$exports$omid$common$DirectCommunication.prototype.isCrossOrigin = function() {
                            return !1
                        }
                        ;
                        var module$exports$omid$common$PostMessageCommunication = function(e, t) {
                            t = void 0 === t ? module$exports$omid$common$OmidGlobalProvider.omidGlobal : t,
                            module$exports$omid$common$Communication.call(this, t);
                            var i = this;
                            this.communicationType_ = module$exports$omid$common$constants.CommunicationType.POST_MESSAGE,
                            e.addEventListener("message", (function(e) {
                                if ("object" == typeof e.data) {
                                    var t = e.data;
                                    module$exports$omid$common$InternalMessage.isValidSerializedMessage(t) && (t = module$exports$omid$common$InternalMessage.deserialize(t),
                                    e.source && i.handleMessage(t, e.source))
                                }
                            }
                            ))
                        };
                        $jscomp.inherits(module$exports$omid$common$PostMessageCommunication, module$exports$omid$common$Communication),
                        module$exports$omid$common$PostMessageCommunication.isCompatibleContext = function(e) {
                            return !!(e && e.addEventListener && e.postMessage)
                        }
                        ,
                        module$exports$omid$common$PostMessageCommunication.prototype.sendMessage = function(e, t) {
                            if (!(t = void 0 === t ? this.to : t))
                                throw Error("Message destination must be defined at construction time or when sending the message.");
                            t.postMessage(e.serialize(), "*")
                        }
                        ,
                        module$exports$omid$common$PostMessageCommunication.prototype.isCrossOrigin = function() {
                            return !this.to || module$contents$omid$common$windowUtils_isCrossOrigin(this.to)
                        }
                        ;
                        var module$exports$omid$common$DetectOmid = {
                            OMID_PRESENT_FRAME_NAME: "omid_v1_present",
                            isOmidPresent: function(e) {
                                try {
                                    return !!e.frames && !!e.frames[module$exports$omid$common$DetectOmid.OMID_PRESENT_FRAME_NAME]
                                } catch (e) {
                                    return !1
                                }
                            },
                            declareOmidPresence: function(e) {
                                e.frames && e.document && (module$exports$omid$common$DetectOmid.OMID_PRESENT_FRAME_NAME in e.frames || (null == e.document.body && module$exports$omid$common$DetectOmid.isMutationObserverAvailable_(e) ? module$exports$omid$common$DetectOmid.registerMutationObserver_(e) : e.document.body ? module$exports$omid$common$DetectOmid.appendPresenceIframe_(e) : e.document.write('<iframe style="display:none" id="' + module$exports$omid$common$DetectOmid.OMID_PRESENT_FRAME_NAME + '" name="' + module$exports$omid$common$DetectOmid.OMID_PRESENT_FRAME_NAME + '"></iframe>')))
                            },
                            appendPresenceIframe_: function(e) {
                                var t = e.document.createElement("iframe");
                                t.id = module$exports$omid$common$DetectOmid.OMID_PRESENT_FRAME_NAME,
                                t.name = module$exports$omid$common$DetectOmid.OMID_PRESENT_FRAME_NAME,
                                t.style.display = "none",
                                e.document.body.appendChild(t)
                            },
                            isMutationObserverAvailable_: function(e) {
                                return "MutationObserver"in e
                            },
                            registerMutationObserver_: function(e) {
                                var t = new MutationObserver((function(i) {
                                    i.forEach((function(i) {
                                        "BODY" === i.addedNodes[0].nodeName && (module$exports$omid$common$DetectOmid.appendPresenceIframe_(e),
                                        t.disconnect())
                                    }
                                    ))
                                }
                                ));
                                t.observe(e.document.documentElement, {
                                    childList: !0
                                })
                            }
                        }
                          , module$exports$omid$common$serviceCommunication = {}
                          , module$contents$omid$common$serviceCommunication_EXPORTED_SESSION_COMMUNICATION_NAME = ["omid", "v1_SessionServiceCommunication"]
                          , module$contents$omid$common$serviceCommunication_EXPORTED_VERIFICATION_COMMUNICATION_NAME = ["omid", "v1_VerificationServiceCommunication"]
                          , module$contents$omid$common$serviceCommunication_EXPORTED_SERVICE_WINDOW_NAME = ["omidVerificationProperties", "serviceWindow"];
                        function module$contents$omid$common$serviceCommunication_getValueForKeypath(e, t) {
                            return t.reduce((function(e, t) {
                                return e && e[t]
                            }
                            ), e)
                        }
                        function module$contents$omid$common$serviceCommunication_startServiceCommunication(e, t, i, n) {
                            if (!module$contents$omid$common$windowUtils_isCrossOrigin(t))
                                try {
                                    var s = module$contents$omid$common$serviceCommunication_getValueForKeypath(t, i);
                                    if (s)
                                        return new module$exports$omid$common$DirectCommunication(s)
                                } catch (e) {}
                            return n(t) ? new module$exports$omid$common$PostMessageCommunication(e,t) : null
                        }
                        function module$contents$omid$common$serviceCommunication_startServiceCommunicationFromCandidates(e, t, i, n) {
                            for (var s = (t = $jscomp.makeIterator(t)).next(); !s.done; s = t.next())
                                if (s = module$contents$omid$common$serviceCommunication_startServiceCommunication(e, s.value, i, n))
                                    return s;
                            return null
                        }
                        function module$contents$omid$common$serviceCommunication_startSessionServiceCommunication(e, t, i) {
                            i = void 0 === i ? module$exports$omid$common$DetectOmid.isOmidPresent : i;
                            var n = [e, module$contents$omid$common$windowUtils_resolveTopWindowContext(e)];
                            return t && n.unshift(t),
                            module$contents$omid$common$serviceCommunication_startServiceCommunicationFromCandidates(e, n, module$contents$omid$common$serviceCommunication_EXPORTED_SESSION_COMMUNICATION_NAME, i)
                        }
                        function module$contents$omid$common$serviceCommunication_startVerificationServiceCommunication(e, t) {
                            t = void 0 === t ? module$exports$omid$common$DetectOmid.isOmidPresent : t;
                            var i = []
                              , n = module$contents$omid$common$serviceCommunication_getValueForKeypath(e, module$contents$omid$common$serviceCommunication_EXPORTED_SERVICE_WINDOW_NAME);
                            return n && i.push(n),
                            i.push(module$contents$omid$common$windowUtils_resolveTopWindowContext(e)),
                            module$contents$omid$common$serviceCommunication_startServiceCommunicationFromCandidates(e, i, module$contents$omid$common$serviceCommunication_EXPORTED_VERIFICATION_COMMUNICATION_NAME, t)
                        }
                        module$exports$omid$common$serviceCommunication.startSessionServiceCommunication = module$contents$omid$common$serviceCommunication_startSessionServiceCommunication,
                        module$exports$omid$common$serviceCommunication.startVerificationServiceCommunication = module$contents$omid$common$serviceCommunication_startVerificationServiceCommunication;
                        var module$contents$omid$verificationClient$VerificationClient_VERIFICATION_CLIENT_VERSION = module$exports$omid$common$version.Version, module$contents$omid$verificationClient$VerificationClient_EventCallback;
                        function module$contents$omid$verificationClient$VerificationClient_getThirdPartyOmid() {
                            var e = module$exports$omid$common$OmidGlobalProvider.omidGlobal.omid3p;
                            return e && "function" == typeof e.registerSessionObserver && "function" == typeof e.addEventListener ? e : null
                        }
                        var module$exports$omid$verificationClient$VerificationClient = function(e) {
                            (this.communication = e || module$contents$omid$common$serviceCommunication_startVerificationServiceCommunication(module$contents$omid$common$windowUtils_resolveGlobalContext())) ? this.communication.onMessage = this.handleMessage_.bind(this) : (e = module$contents$omid$verificationClient$VerificationClient_getThirdPartyOmid()) && (this.omid3p = e),
                            this.remoteIntervals_ = this.remoteTimeouts_ = 0,
                            this.callbackMap_ = {},
                            this.imgCache_ = [],
                            this.injectionId_ = (e = module$exports$omid$common$OmidGlobalProvider.omidGlobal.omidVerificationProperties) ? e.injectionId : void 0
                        };
                        module$exports$omid$verificationClient$VerificationClient.prototype.isSupported = function() {
                            return !(!this.communication && !this.omid3p)
                        }
                        ,
                        module$exports$omid$verificationClient$VerificationClient.prototype.injectionSource = function() {
                            var e = module$exports$omid$common$OmidGlobalProvider.omidGlobal.omidVerificationProperties;
                            if (e && e.injectionSource)
                                return e.injectionSource
                        }
                        ,
                        module$exports$omid$verificationClient$VerificationClient.prototype.registerSessionObserver = function(e, t) {
                            module$contents$omid$common$argsChecker_assertFunction("functionToExecute", e),
                            this.omid3p ? this.omid3p.registerSessionObserver(e, t, this.injectionId_) : this.sendMessage_("addSessionListener", e, t, this.injectionId_)
                        }
                        ,
                        module$exports$omid$verificationClient$VerificationClient.prototype.addEventListener = function(e, t) {
                            module$contents$omid$common$argsChecker_assertTruthyString("eventType", e),
                            module$contents$omid$common$argsChecker_assertFunction("functionToExecute", t),
                            this.omid3p ? this.omid3p.addEventListener(e, t) : this.sendMessage_("addEventListener", t, e)
                        }
                        ,
                        module$exports$omid$verificationClient$VerificationClient.prototype.sendUrl = function(e, t, i) {
                            module$contents$omid$common$argsChecker_assertTruthyString("url", e),
                            module$exports$omid$common$OmidGlobalProvider.omidGlobal.document && module$exports$omid$common$OmidGlobalProvider.omidGlobal.document.createElement ? this.sendUrlWithImg_(e, t, i) : this.sendMessage_("sendUrl", (function(e) {
                                e && t ? t() : !e && i && i()
                            }
                            ), e)
                        }
                        ,
                        module$exports$omid$verificationClient$VerificationClient.prototype.sendUrlWithImg_ = function(e, t, i) {
                            var n = this
                              , s = module$exports$omid$common$OmidGlobalProvider.omidGlobal.document.createElement("img");
                            this.imgCache_.push(s);
                            var r = function(e) {
                                var t = n.imgCache_.indexOf(s);
                                0 <= t && n.imgCache_.splice(t, 1),
                                e && e()
                            };
                            s.addEventListener("load", r.bind(this, t)),
                            s.addEventListener("error", r.bind(this, i)),
                            s.src = e
                        }
                        ,
                        module$exports$omid$verificationClient$VerificationClient.prototype.injectJavaScriptResource = function(e, t, i) {
                            var n = this;
                            module$contents$omid$common$argsChecker_assertTruthyString("url", e),
                            module$exports$omid$common$OmidGlobalProvider.omidGlobal.document ? this.injectJavascriptResourceUrlInDom_(e, t, i) : this.sendMessage_("injectJavaScriptResource", (function(s, r) {
                                s ? (n.evaluateJavaScript_(r, e),
                                t()) : (module$contents$omid$common$logger_error("Service failed to load JavaScript resource."),
                                i())
                            }
                            ), e)
                        }
                        ,
                        module$exports$omid$verificationClient$VerificationClient.prototype.injectJavascriptResourceUrlInDom_ = function(e, t, i) {
                            var n = module$exports$omid$common$OmidGlobalProvider.omidGlobal.document
                              , s = n.body;
                            (n = n.createElement("script")).onload = t,
                            n.onerror = i,
                            n.src = e,
                            n.type = "application/javascript",
                            s.appendChild(n)
                        }
                        ,
                        module$exports$omid$verificationClient$VerificationClient.prototype.evaluateJavaScript_ = function(a, b) {
                            try {
                                eval(a)
                            } catch (e) {
                                module$contents$omid$common$logger_error('Error evaluating the JavaScript resource from "' + b + '".')
                            }
                        }
                        ,
                        module$exports$omid$verificationClient$VerificationClient.prototype.setTimeout = function(e, t) {
                            if (module$contents$omid$common$argsChecker_assertFunction("functionToExecute", e),
                            module$contents$omid$common$argsChecker_assertPositiveNumber("timeInMillis", t),
                            this.hasTimeoutMethods_())
                                return module$exports$omid$common$OmidGlobalProvider.omidGlobal.setTimeout(e, t);
                            var i = this.remoteTimeouts_++;
                            return this.sendMessage_("setTimeout", e, i, t),
                            i
                        }
                        ,
                        module$exports$omid$verificationClient$VerificationClient.prototype.clearTimeout = function(e) {
                            module$contents$omid$common$argsChecker_assertPositiveNumber("timeoutId", e),
                            this.hasTimeoutMethods_() ? module$exports$omid$common$OmidGlobalProvider.omidGlobal.clearTimeout(e) : this.sendOneWayMessage_("clearTimeout", e)
                        }
                        ,
                        module$exports$omid$verificationClient$VerificationClient.prototype.setInterval = function(e, t) {
                            if (module$contents$omid$common$argsChecker_assertFunction("functionToExecute", e),
                            module$contents$omid$common$argsChecker_assertPositiveNumber("timeInMillis", t),
                            this.hasIntervalMethods_())
                                return module$exports$omid$common$OmidGlobalProvider.omidGlobal.setInterval(e, t);
                            var i = this.remoteIntervals_++;
                            return this.sendMessage_("setInterval", e, i, t),
                            i
                        }
                        ,
                        module$exports$omid$verificationClient$VerificationClient.prototype.clearInterval = function(e) {
                            module$contents$omid$common$argsChecker_assertPositiveNumber("intervalId", e),
                            this.hasIntervalMethods_() ? module$exports$omid$common$OmidGlobalProvider.omidGlobal.clearInterval(e) : this.sendOneWayMessage_("clearInterval", e)
                        }
                        ,
                        module$exports$omid$verificationClient$VerificationClient.prototype.hasTimeoutMethods_ = function() {
                            return "function" == typeof module$exports$omid$common$OmidGlobalProvider.omidGlobal.setTimeout && "function" == typeof module$exports$omid$common$OmidGlobalProvider.omidGlobal.clearTimeout
                        }
                        ,
                        module$exports$omid$verificationClient$VerificationClient.prototype.hasIntervalMethods_ = function() {
                            return "function" == typeof module$exports$omid$common$OmidGlobalProvider.omidGlobal.setInterval && "function" == typeof module$exports$omid$common$OmidGlobalProvider.omidGlobal.clearInterval
                        }
                        ,
                        module$exports$omid$verificationClient$VerificationClient.prototype.handleMessage_ = function(e, t) {
                            t = e.method;
                            var i = e.guid;
                            if (e = e.args,
                            "response" === t && this.callbackMap_[i]) {
                                var n = module$contents$omid$common$ArgsSerDe_deserializeMessageArgs(module$contents$omid$verificationClient$VerificationClient_VERIFICATION_CLIENT_VERSION, e);
                                this.callbackMap_[i].apply(this, n)
                            }
                            "error" === t && window.console && module$contents$omid$common$logger_error(e)
                        }
                        ,
                        module$exports$omid$verificationClient$VerificationClient.prototype.sendOneWayMessage_ = function(e, t) {
                            for (var i = [], n = 1; n < arguments.length; ++n)
                                i[n - 1] = arguments[n];
                            this.sendMessage_.apply(this, [e, null].concat($jscomp.arrayFromIterable(i)))
                        }
                        ,
                        module$exports$omid$verificationClient$VerificationClient.prototype.sendMessage_ = function(e, t, i) {
                            for (var n = [], s = 2; s < arguments.length; ++s)
                                n[s - 2] = arguments[s];
                            this.communication && (s = module$contents$omid$common$guid_generateGuid(),
                            t && (this.callbackMap_[s] = t),
                            n = new module$exports$omid$common$InternalMessage(s,module$contents$omid$common$serviceMethodUtils_getPrefixedVerificationServiceMethod(e),module$contents$omid$verificationClient$VerificationClient_VERIFICATION_CLIENT_VERSION,module$contents$omid$common$ArgsSerDe_serializeMessageArgs(module$contents$omid$verificationClient$VerificationClient_VERIFICATION_CLIENT_VERSION, n)),
                            this.communication.sendMessage(n))
                        }
                        ,
                        module$contents$omid$common$exporter_packageExport("OmidVerificationClient", module$exports$omid$verificationClient$VerificationClient)
                    }
                    ), void 0 === exports ? void 0 : exports)
                } catch (e) {}
        }
    }
      , __webpack_module_cache__ = {};
    function __webpack_require__(e) {
        var t = __webpack_module_cache__[e];
        if (void 0 !== t)
            return t.exports;
        var i = __webpack_module_cache__[e] = {
            exports: {}
        };
        return __webpack_modules__[e](i, i.exports, __webpack_require__),
        i.exports
    }
    __webpack_require__.d = (e, t) => {
        for (var i in t)
            __webpack_require__.o(t, i) && !__webpack_require__.o(e, i) && Object.defineProperty(e, i, {
                enumerable: !0,
                get: t[i]
            })
    }
    ,
    __webpack_require__.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t),
    __webpack_require__.r = e => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
            value: "Module"
        }),
        Object.defineProperty(e, "__esModule", {
            value: !0
        })
    }
    ;
    var __webpack_exports__ = {};
    const configDev = {
        scriptHostBaseURI: "//adsdkdevstand.azureedge.net/dev/viewability",
        scriptHostBaseURIConsentLess: "//adsdkdevstand.azureedge.net/dev/viewability"
    }
      , configProd = {
        scriptHostBaseURI: "//adsdkdevstand.azureedge.net/viewability",
        scriptHostBaseURIConsentLess: "//adsdkdevstand.azureedge.net/viewability"
    };
    let config = configProd;
    function InitTrackingModule(e, t) {
        void 0 === window[e] && (window[e] = {});
        const i = window[e]
          , {scriptHostBaseURI: n, scriptHostBaseURIConsentLess: s} = config;
        i[t] = function() {
            const e = n
              , r = s;
            let o, a, c;
            "undefined" == typeof window ? (i.isJsContext = !0,
            a = {},
            o = {
                parent: null,
                body: {},
                document: a,
                setTimeout: window.omidNative.setTimeout,
                setInterval: window.omidNative.setInterval,
                clearTimeout: window.omidNative.clearTimeout,
                clearInterval: window.omidNative.clearInterval,
                location: {
                    href: ""
                },
                navigator: {
                    userAgent: "iPhone"
                },
                Error: {}
            },
            o.top = o,
            o.parent = o) : (o = window,
            a = document),
            i.$wnd = o,
            i.base = e,
            i.scs || (i.scs = [],
            i.si = "app",
            i.it = (new Date).getTime(),
            i.rqs = [],
            i.ts = {},
            i.myo = {});
            let l = a.currentScript;
            if (!i.isJsContext && !l) {
                const t = document.getElementsByTagName("script");
                for (let i = t.length - 1; i >= 0; i--) {
                    const n = t[i];
                    if (!n.fnd && n.src && (-1 !== n.src.indexOf(e) || -1 !== n.src.indexOf(r))) {
                        l = n,
                        n.fnd = !0;
                        break
                    }
                }
            }
            l && (i.it = (new Date).getTime()),
            i.scs.push(l),
            i[t].onScriptLoad = function(e) {
                i[t] = null,
                c = e,
                c && (i.n ? i.n() : c(void 0, t, "", void 0))
            }
        }
        ;
        try {
            i[t]()
        } catch (e) {}
        return i[t].onScriptLoad
    }
    var jsmodules = __webpack_require__(242);
    const InitTrackingModuleWithTracking = InitTrackingModule("_lntapp", "app");
    InitTrackingModuleWithTracking(( () => {
        Promise.resolve().then(__webpack_require__.bind(__webpack_require__, 902)).then(( ({Tracking: e}) => {
            (new e).onModuleLoad()
        }
        )).catch((e => {
            console.log("Error loading tracking module", e)
        }
        ))
    }
    ))
}
)();
